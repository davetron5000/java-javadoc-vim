*java.awt.geom.Rectangle2D* *Rectangle2D* The Rectangle2D class describes a rectangle
 defined by a location(x,y)and dimension(w

public abstract class Rectangle2D
  extends    |java.awt.geom.RectangularShape|

|java.awt.geom.Rectangle2D_Description|
|java.awt.geom.Rectangle2D_Fields|
|java.awt.geom.Rectangle2D_Constructors|
|java.awt.geom.Rectangle2D_Methods|

================================================================================================================================

*java.awt.geom.Rectangle2D_Fields*
|int_java.awt.geom.Rectangle2D.OUT_BOTTOM|
|int_java.awt.geom.Rectangle2D.OUT_LEFT|
|int_java.awt.geom.Rectangle2D.OUT_RIGHT|
|int_java.awt.geom.Rectangle2D.OUT_TOP|

*java.awt.geom.Rectangle2D_Constructors*
|java.awt.geom.Rectangle2D()|This is an abstract class that cannot be instantiated directly.

*java.awt.geom.Rectangle2D_Methods*
|java.awt.geom.Rectangle2D.add(double,double)|Adds a point, specified by the double precision arguments  newx and newy, to this
|java.awt.geom.Rectangle2D.add(Point2D)|Adds the Point2D object pt to this  Rectangle2D.
|java.awt.geom.Rectangle2D.add(Rectangle2D)|Adds a Rectangle2D object to this   Rectangle2D.
|java.awt.geom.Rectangle2D.contains(double,double)|
|java.awt.geom.Rectangle2D.contains(double,double,double,double)|
|java.awt.geom.Rectangle2D.createIntersection(Rectangle2D)|Returns a new Rectangle2D object representing the  intersection of t
|java.awt.geom.Rectangle2D.createUnion(Rectangle2D)|Returns a new Rectangle2D object representing the  union of this Rectangle2
|java.awt.geom.Rectangle2D.equals(Object)|Determines whether or not the specified Object is  equal to this Rectangle2D.
|java.awt.geom.Rectangle2D.getBounds2D()|
|java.awt.geom.Rectangle2D.getPathIterator(AffineTransform)|Returns an iteration object that defines the boundary of this  Rect
|java.awt.geom.Rectangle2D.getPathIterator(AffineTransform,double)|Returns an iteration object that defines the boundary of the
|java.awt.geom.Rectangle2D.hashCode()|Returns the hashcode for this Rectangle2D.
|java.awt.geom.Rectangle2D.intersect(Rectangle2D,Rectangle2D,Rectangle2D)|Intersects the pair of specified source Rectangle2D  
|java.awt.geom.Rectangle2D.intersects(double,double,double,double)|
|java.awt.geom.Rectangle2D.intersectsLine(double,double,double,double)|Tests if the specified line segment intersects the inter
|java.awt.geom.Rectangle2D.intersectsLine(Line2D)|Tests if the specified line segment intersects the interior of this  Rectangl
|java.awt.geom.Rectangle2D.outcode(double,double)|Determines where the specified coordinates lie with respect  to this Rectangl
|java.awt.geom.Rectangle2D.outcode(Point2D)|Determines where the specifiedPoint2Dlies with   respect to this Rectangle2D.
|java.awt.geom.Rectangle2D.setFrame(double,double,double,double)|Sets the location and size of the outer bounds of this   Recta
|java.awt.geom.Rectangle2D.setRect(double,double,double,double)|Sets the location and size of this Rectangle2D  to the specifie
|java.awt.geom.Rectangle2D.setRect(Rectangle2D)|Sets this Rectangle2D to be the same as the specified  Rectangle2D.
|java.awt.geom.Rectangle2D.union(Rectangle2D,Rectangle2D,Rectangle2D)|Unions the pair of source Rectangle2D objects   and puts 

*java.awt.geom.Rectangle2D_Description*

The Rectangle2D class describes a rectangle defined by a location(x,y)and dimension(w x h). 

This class is only the abstract superclass for all objects that store a 2D rectangle. The actual storage representation of the 
coordinates is left to the subclass. 



*int_java.awt.geom.Rectangle2D.OUT_BOTTOM*

The bitmask that indicates that a point lies below this Rectangle2D. 


*int_java.awt.geom.Rectangle2D.OUT_LEFT*

The bitmask that indicates that a point lies to the left of this Rectangle2D. 


*int_java.awt.geom.Rectangle2D.OUT_RIGHT*

The bitmask that indicates that a point lies to the right of this Rectangle2D. 


*int_java.awt.geom.Rectangle2D.OUT_TOP*

The bitmask that indicates that a point lies above this Rectangle2D. 



*java.awt.geom.Rectangle2D()*

protected Rectangle2D()

This is an abstract class that cannot be instantiated directly. Type-specific implementation subclasses are available for 
instantiation and provide a number of formats for storing the information necessary to satisfy the various accessor methods 
below. 


*java.awt.geom.Rectangle2D.add(double,double)*

public void add(
  double newx,
  double newy)

Adds a point, specified by the double precision arguments newx and newy, to this Rectangle2D. The resulting Rectangle2D is the 
smallest Rectangle2D that contains both the original Rectangle2D and the specified point. 

After adding a point, a call to contains with the added point as an argument does not necessarily return true. The contains 
method does not return true for points on the right or bottom edges of a rectangle. Therefore, if the added point falls on the 
left or bottom edge of the enlarged rectangle, contains returns false for that point. 


    newx - the X coordinate of the new point 
    newy - the Y coordinate of the new point 

*java.awt.geom.Rectangle2D.add(Point2D)*

public void add(java.awt.geom.Point2D pt)

Adds the Point2D object pt to this Rectangle2D. The resulting Rectangle2D is the smallest Rectangle2D that contains both the 
original Rectangle2D and the specified Point2D. 

After adding a point, a call to contains with the added point as an argument does not necessarily return true. The contains 
method does not return true for points on the right or bottom edges of a rectangle. Therefore, if the added point falls on the 
left or bottom edge of the enlarged rectangle, contains returns false for that point. 


    pt - the new Point2D to add to this Rectangle2D. 

*java.awt.geom.Rectangle2D.add(Rectangle2D)*

public void add(java.awt.geom.Rectangle2D r)

Adds a Rectangle2D object to this Rectangle2D. The resulting Rectangle2D is the union of the two Rectangle2D objects. 


    r - the Rectangle2D to add to this Rectangle2D. 

*java.awt.geom.Rectangle2D.contains(double,double)*

public boolean contains(
  double x,
  double y)





*java.awt.geom.Rectangle2D.contains(double,double,double,double)*

public boolean contains(
  double x,
  double y,
  double w,
  double h)





*java.awt.geom.Rectangle2D.createIntersection(Rectangle2D)*

public abstract |java.awt.geom.Rectangle2D| createIntersection(java.awt.geom.Rectangle2D r)

Returns a new Rectangle2D object representing the intersection of this Rectangle2D with the specified Rectangle2D. 


    r - the Rectangle2D to be intersected with this Rectangle2D 

    Returns: the largest Rectangle2D contained in both the specified Rectangle2D and in this Rectangle2D. 

*java.awt.geom.Rectangle2D.createUnion(Rectangle2D)*

public abstract |java.awt.geom.Rectangle2D| createUnion(java.awt.geom.Rectangle2D r)

Returns a new Rectangle2D object representing the union of this Rectangle2D with the specified Rectangle2D. 


    r - the Rectangle2D to be combined with this Rectangle2D 

    Returns: the smallest Rectangle2D containing both the specified Rectangle2D and this Rectangle2D. 

*java.awt.geom.Rectangle2D.equals(Object)*

public boolean equals(java.lang.Object obj)

Determines whether or not the specified Object is equal to this Rectangle2D. The specified Object is equal to this Rectangle2D 
if it is an instance of Rectangle2D and if its location and size are the same as this Rectangle2D. 


    obj - an Object to be compared with this Rectangle2D. 

    Returns: true if obj is an instance of Rectangle2D and has the same values; false otherwise. 

*java.awt.geom.Rectangle2D.getBounds2D()*

public |java.awt.geom.Rectangle2D| getBounds2D()





*java.awt.geom.Rectangle2D.getPathIterator(AffineTransform)*

public |java.awt.geom.PathIterator| getPathIterator(java.awt.geom.AffineTransform at)

Returns an iteration object that defines the boundary of this Rectangle2D. The iterator for this class is multi-threaded safe, 
which means that this Rectangle2D class guarantees that modifications to the geometry of this Rectangle2D object do not affect 
any iterations of that geometry that are already in process. 


    at - an optional AffineTransform to be applied to the coordinates as they are returned in the iteration, or null if untransformed 
       coordinates are desired 

    Returns: the PathIterator object that returns the geometry of the outline of this Rectangle2D, one segment at a time. 

*java.awt.geom.Rectangle2D.getPathIterator(AffineTransform,double)*

public |java.awt.geom.PathIterator| getPathIterator(
  java.awt.geom.AffineTransform at,
  double flatness)

Returns an iteration object that defines the boundary of the flattened Rectangle2D. Since rectangles are already flat, the 
flatness parameter is ignored. The iterator for this class is multi-threaded safe, which means that this Rectangle2D class 
guarantees that modifications to the geometry of this Rectangle2D object do not affect any iterations of that geometry that are 
already in process. 


    at - an optional AffineTransform to be applied to the coordinates as they are returned in the iteration, or null if untransformed 
       coordinates are desired 
    flatness - the maximum distance that the line segments used to approximate the curved segments are allowed to deviate from any point on 
       the original curve. Since rectangles are already flat, the flatness parameter is ignored. 

    Returns: the PathIterator object that returns the geometry of the outline of this Rectangle2D, one segment at a time. 

*java.awt.geom.Rectangle2D.hashCode()*

public int hashCode()

Returns the hashcode for this Rectangle2D. 



    Returns: the hashcode for this Rectangle2D. 

*java.awt.geom.Rectangle2D.intersect(Rectangle2D,Rectangle2D,Rectangle2D)*

public static void intersect(
  java.awt.geom.Rectangle2D src1,
  java.awt.geom.Rectangle2D src2,
  java.awt.geom.Rectangle2D dest)

Intersects the pair of specified source Rectangle2D objects and puts the result into the specified destination Rectangle2D 
object. One of the source rectangles can also be the destination to avoid creating a third Rectangle2D object, but in this case 
the original points of this source rectangle will be overwritten by this method. 


    src1 - the first of a pair of Rectangle2D objects to be intersected with each other 
    src2 - the second of a pair of Rectangle2D objects to be intersected with each other 
    dest - the Rectangle2D that holds the results of the intersection of src1 and src2 

*java.awt.geom.Rectangle2D.intersects(double,double,double,double)*

public boolean intersects(
  double x,
  double y,
  double w,
  double h)





*java.awt.geom.Rectangle2D.intersectsLine(double,double,double,double)*

public boolean intersectsLine(
  double x1,
  double y1,
  double x2,
  double y2)

Tests if the specified line segment intersects the interior of this Rectangle2D. 


    x1 - the X coordinate of the start point of the specified line segment 
    y1 - the Y coordinate of the start point of the specified line segment 
    x2 - the X coordinate of the end point of the specified line segment 
    y2 - the Y coordinate of the end point of the specified line segment 

    Returns: true if the specified line segment intersects the interior of this Rectangle2D; false otherwise. 

*java.awt.geom.Rectangle2D.intersectsLine(Line2D)*

public boolean intersectsLine(java.awt.geom.Line2D l)

Tests if the specified line segment intersects the interior of this Rectangle2D. 


    l - the specified {@link Line2D} to test for intersection with the interior of this Rectangle2D 

    Returns: true if the specified Line2D intersects the interior of this Rectangle2D; false otherwise. 

*java.awt.geom.Rectangle2D.outcode(double,double)*

public abstract int outcode(
  double x,
  double y)

Determines where the specified coordinates lie with respect to this Rectangle2D. This method computes a binary OR of the 
appropriate mask values indicating, for each side of this Rectangle2D, whether or not the specified coordinates are on the same 
side of the edge as the rest of this Rectangle2D. 


    x - the specified X coordinate 
    y - the specified Y coordinate 

    Returns: the logical OR of all appropriate out codes. 

*java.awt.geom.Rectangle2D.outcode(Point2D)*

public int outcode(java.awt.geom.Point2D p)

Determines where the specified (|java.awt.geom.Point2D|) lies with respect to this Rectangle2D. This method computes a binary 
OR of the appropriate mask values indicating, for each side of this Rectangle2D, whether or not the specified Point2D is on the 
same side of the edge as the rest of this Rectangle2D. 


    p - the specified Point2D 

    Returns: the logical OR of all appropriate out codes. 

*java.awt.geom.Rectangle2D.setFrame(double,double,double,double)*

public void setFrame(
  double x,
  double y,
  double w,
  double h)

Sets the location and size of the outer bounds of this Rectangle2D to the specified rectangular values. 


    x - the X coordinate of the upper-left corner of this Rectangle2D 
    y - the Y coordinate of the upper-left corner of this Rectangle2D 
    w - the width of this Rectangle2D 
    h - the height of this Rectangle2D 

*java.awt.geom.Rectangle2D.setRect(double,double,double,double)*

public abstract void setRect(
  double x,
  double y,
  double w,
  double h)

Sets the location and size of this Rectangle2D to the specified double values. 


    x - the X coordinate of the upper-left corner of this Rectangle2D 
    y - the Y coordinate of the upper-left corner of this Rectangle2D 
    w - the width of this Rectangle2D 
    h - the height of this Rectangle2D 

*java.awt.geom.Rectangle2D.setRect(Rectangle2D)*

public void setRect(java.awt.geom.Rectangle2D r)

Sets this Rectangle2D to be the same as the specified Rectangle2D. 


    r - the specified Rectangle2D 

*java.awt.geom.Rectangle2D.union(Rectangle2D,Rectangle2D,Rectangle2D)*

public static void union(
  java.awt.geom.Rectangle2D src1,
  java.awt.geom.Rectangle2D src2,
  java.awt.geom.Rectangle2D dest)

Unions the pair of source Rectangle2D objects and puts the result into the specified destination Rectangle2D object. One of the 
source rectangles can also be the destination to avoid creating a third Rectangle2D object, but in this case the original 
points of this source rectangle will be overwritten by this method. 


    src1 - the first of a pair of Rectangle2D objects to be combined with each other 
    src2 - the second of a pair of Rectangle2D objects to be combined with each other 
    dest - the Rectangle2D that holds the results of the union of src1 and src2 


