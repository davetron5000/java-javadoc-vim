*java.sql.SQLInput* *SQLInput* An input stream that contains a stream of values representing an 
 instance of an SQL structured 

public interface interface SQLInput


|java.sql.SQLInput_Description|
|java.sql.SQLInput_Fields|
|java.sql.SQLInput_Constructors|
|java.sql.SQLInput_Methods|

================================================================================================================================

*java.sql.SQLInput_Methods*
|java.sql.SQLInput.readArray()|Reads an SQL ARRAY value from the stream and returns it as an  Array object in the Java programm
|java.sql.SQLInput.readAsciiStream()|Reads the next attribute in the stream and returns it as a stream of ASCII characters.
|java.sql.SQLInput.readBigDecimal()|Reads the next attribute in the stream and returns it as a java.math.BigDecimal   object in
|java.sql.SQLInput.readBinaryStream()|Reads the next attribute in the stream and returns it as a stream of uninterpreted  bytes
|java.sql.SQLInput.readBlob()|Reads an SQL BLOB value from the stream and returns it as a  Blob object in the Java programming 
|java.sql.SQLInput.readBoolean()|Reads the next attribute in the stream and returns it as a boolean   in the Java programming l
|java.sql.SQLInput.readByte()|Reads the next attribute in the stream and returns it as a byte   in the Java programming languag
|java.sql.SQLInput.readBytes()|Reads the next attribute in the stream and returns it as an array of bytes  in the Java programm
|java.sql.SQLInput.readCharacterStream()|Reads the next attribute in the stream and returns it as a stream of Unicode character
|java.sql.SQLInput.readClob()|Reads an SQL CLOB value from the stream and returns it as a  Clob object in the Java programming 
|java.sql.SQLInput.readDate()|Reads the next attribute in the stream and returns it as a java.sql.Date object.
|java.sql.SQLInput.readDouble()|Reads the next attribute in the stream and returns it as a double   in the Java programming lan
|java.sql.SQLInput.readFloat()|Reads the next attribute in the stream and returns it as a float   in the Java programming langu
|java.sql.SQLInput.readInt()|Reads the next attribute in the stream and returns it as an int   in the Java programming language
|java.sql.SQLInput.readLong()|Reads the next attribute in the stream and returns it as a long   in the Java programming languag
|java.sql.SQLInput.readNClob()|Reads an SQL NCLOB value from the stream and returns it as a  NClob object in the Java programmi
|java.sql.SQLInput.readNString()|Reads the next attribute in the stream and returns it as a String   in the Java programming la
|java.sql.SQLInput.readObject()|Reads the datum at the head of the stream and returns it as an  Object in the Java programming 
|java.sql.SQLInput.readRef()|Reads an SQL REF value from the stream and returns it as a  Ref object in the Java programming lan
|java.sql.SQLInput.readRowId()|Reads an SQL ROWID value from the stream and returns it as a  RowId object in the Java programmi
|java.sql.SQLInput.readShort()|Reads the next attribute in the stream and returns it as a short   in the Java programming langu
|java.sql.SQLInput.readSQLXML()|Reads an SQL XML value from the stream and returns it as a  SQLXML object in the Java programmi
|java.sql.SQLInput.readString()|Reads the next attribute in the stream and returns it as a String   in the Java programming lan
|java.sql.SQLInput.readTime()|Reads the next attribute in the stream and returns it as a java.sql.Time object.
|java.sql.SQLInput.readTimestamp()|Reads the next attribute in the stream and returns it as a java.sql.Timestamp object.
|java.sql.SQLInput.readURL()|Reads an SQL DATALINK value from the stream and returns it as a  java.net.URL object in the Java p
|java.sql.SQLInput.wasNull()|Retrieves whether the last value read was SQL NULL.

*java.sql.SQLInput_Description*

An input stream that contains a stream of values representing an instance of an SQL structured type or an SQL distinct type. 
This interface, used only for custom mapping, is used by the driver behind the scenes, and a programmer never directly invokes 
SQLInput methods. The reader methods (readLong, readBytes, and so on) provide a way for an implementation of the SQLData 
interface to read the values in an SQLInput object. And as described in SQLData, calls to reader methods must be made in the 
order that their corresponding attributes appear in the SQL definition of the type. The method wasNull is used to determine 
whether the last value read was SQL NULL. When the method getObject is called with an object of a class implementing the 
interface SQLData, the JDBC driver calls the method SQLData.getSQLType to determine the SQL type of the user-defined type (UDT) 
being custom mapped. The driver creates an instance of SQLInput, populating it with the attributes of the UDT. The driver then 
passes the input stream to the method SQLData.readSQL, which in turn calls the SQLInput reader methods in its implementation 
for reading the attributes from the input stream. 



*java.sql.SQLInput.readArray()*

public |java.sql.Array| readArray()
  throws |java.sql.SQLException|
         
Reads an SQL ARRAY value from the stream and returns it as an Array object in the Java programming language. 



    Returns: an Array object representing data of the SQL ARRAY value at the head of the stream; null if the value read is SQL NULL 

*java.sql.SQLInput.readAsciiStream()*

public |java.io.InputStream| readAsciiStream()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a stream of ASCII characters. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readBigDecimal()*

public |java.math.BigDecimal| readBigDecimal()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a java.math.BigDecimal object in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readBinaryStream()*

public |java.io.InputStream| readBinaryStream()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a stream of uninterpreted bytes. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readBlob()*

public |java.sql.Blob| readBlob()
  throws |java.sql.SQLException|
         
Reads an SQL BLOB value from the stream and returns it as a Blob object in the Java programming language. 



    Returns: a Blob object representing data of the SQL BLOB value at the head of the stream; null if the value read is SQL NULL 

*java.sql.SQLInput.readBoolean()*

public boolean readBoolean()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a boolean in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns false 

*java.sql.SQLInput.readByte()*

public byte readByte()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a byte in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns 0 

*java.sql.SQLInput.readBytes()*

public byte[] readBytes()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as an array of bytes in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readCharacterStream()*

public |java.io.Reader| readCharacterStream()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a stream of Unicode characters. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readClob()*

public |java.sql.Clob| readClob()
  throws |java.sql.SQLException|
         
Reads an SQL CLOB value from the stream and returns it as a Clob object in the Java programming language. 



    Returns: a Clob object representing data of the SQL CLOB value at the head of the stream; null if the value read is SQL NULL 

*java.sql.SQLInput.readDate()*

public |java.sql.Date| readDate()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a java.sql.Date object. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readDouble()*

public double readDouble()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a double in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns 0 

*java.sql.SQLInput.readFloat()*

public float readFloat()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a float in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns 0 

*java.sql.SQLInput.readInt()*

public int readInt()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as an int in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns 0 

*java.sql.SQLInput.readLong()*

public long readLong()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a long in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns 0 

*java.sql.SQLInput.readNClob()*

public |java.sql.NClob| readNClob()
  throws |java.sql.SQLException|
         
Reads an SQL NCLOB value from the stream and returns it as a NClob object in the Java programming language. 



    Returns: a NClob object representing data of the SQL NCLOB value at the head of the stream; null if the value read is SQL NULL 

*java.sql.SQLInput.readNString()*

public |java.lang.String| readNString()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a String in the Java programming language. It is intended for use when 
accessing NCHAR,NVARCHAR and LONGNVARCHAR columns. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readObject()*

public |java.lang.Object| readObject()
  throws |java.sql.SQLException|
         
Reads the datum at the head of the stream and returns it as an Object in the Java programming language. The actual type of the 
object returned is determined by the default type mapping, and any customizations present in this stream's type map. 

A type map is registered with the stream by the JDBC driver before the stream is passed to the application. 

When the datum at the head of the stream is an SQL NULL, the method returns null. If the datum is an SQL structured or distinct 
type, it determines the SQL type of the datum at the head of the stream. If the stream's type map has an entry for that SQL 
type, the driver constructs an object of the appropriate class and calls the method SQLData.readSQL on that object, which reads 
additional data from the stream, using the protocol described for that method. 



    Returns: the datum at the head of the stream as an Object in the Java programming language;null if the datum is SQL NULL 

*java.sql.SQLInput.readRef()*

public |java.sql.Ref| readRef()
  throws |java.sql.SQLException|
         
Reads an SQL REF value from the stream and returns it as a Ref object in the Java programming language. 



    Returns: a Ref object representing the SQL REF value at the head of the stream; null if the value read is SQL NULL 

*java.sql.SQLInput.readRowId()*

public |java.sql.RowId| readRowId()
  throws |java.sql.SQLException|
         
Reads an SQL ROWID value from the stream and returns it as a RowId object in the Java programming language. 



    Returns: a RowId object representing data of the SQL ROWID value at the head of the stream; null if the value read is SQL NULL 

*java.sql.SQLInput.readShort()*

public short readShort()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a short in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns 0 

*java.sql.SQLInput.readSQLXML()*

public |java.sql.SQLXML| readSQLXML()
  throws |java.sql.SQLException|
         
Reads an SQL XML value from the stream and returns it as a SQLXML object in the Java programming language. 



    Returns: a SQLXML object representing data of the SQL XML value at the head of the stream; null if the value read is SQL NULL 

*java.sql.SQLInput.readString()*

public |java.lang.String| readString()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a String in the Java programming language. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readTime()*

public |java.sql.Time| readTime()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a java.sql.Time object. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readTimestamp()*

public |java.sql.Timestamp| readTimestamp()
  throws |java.sql.SQLException|
         
Reads the next attribute in the stream and returns it as a java.sql.Timestamp object. 



    Returns: the attribute; if the value is SQL NULL, returns null 

*java.sql.SQLInput.readURL()*

public |java.net.URL| readURL()
  throws |java.sql.SQLException|
         
Reads an SQL DATALINK value from the stream and returns it as a java.net.URL object in the Java programming language. 



    Returns: a java.net.URL object. 

*java.sql.SQLInput.wasNull()*

public boolean wasNull()
  throws |java.sql.SQLException|
         
Retrieves whether the last value read was SQL NULL. 



    Returns: true if the most recently read SQL value was SQL NULL; false otherwise 


