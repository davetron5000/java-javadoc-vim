*java.security.SecureRandom* *SecureRandom* This class provides a cryptographically strong random number
 generator (RNG).

public class SecureRandom
  extends    |java.util.Random|

|java.security.SecureRandom_Description|
|java.security.SecureRandom_Fields|
|java.security.SecureRandom_Constructors|
|java.security.SecureRandom_Methods|

================================================================================================================================

*java.security.SecureRandom_Constructors*
|java.security.SecureRandom()|Constructs a secure random number generator (RNG) implementing the  default random number algorit
|java.security.SecureRandom(byte[])|Constructs a secure random number generator (RNG) implementing the  default random number a
|java.security.SecureRandom(SecureRandomSpi,Provider)|Creates a SecureRandom object.

*java.security.SecureRandom_Methods*
|java.security.SecureRandom.generateSeed(int)|Returns the given number of seed bytes, computed using the seed  generation algor
|java.security.SecureRandom.getAlgorithm()|Returns the name of the algorithm implemented by this SecureRandom  object.
|java.security.SecureRandom.getInstance(String)|Returns a SecureRandom object that implements the specified  Random Number Gene
|java.security.SecureRandom.getInstance(String,Provider)|Returns a SecureRandom object that implements the specified  Random Nu
|java.security.SecureRandom.getInstance(String,String)|Returns a SecureRandom object that implements the specified  Random Numb
|java.security.SecureRandom.getProvider()|Returns the provider of this SecureRandom object.
|java.security.SecureRandom.getSeed(int)|Returns the given number of seed bytes, computed using the seed  generation algorithm 
|java.security.SecureRandom.next(int)|Generates an integer containing the user-specified number of  pseudo-random bits (right j
|java.security.SecureRandom.nextBytes(byte[])|Generates a user-specified number of random bytes.
|java.security.SecureRandom.setSeed(byte[])|Reseeds this random object.
|java.security.SecureRandom.setSeed(long)|Reseeds this random object, using the eight bytes contained   in the given long seed.

*java.security.SecureRandom_Description*

This class provides a cryptographically strong random number generator (RNG). 

A cryptographically strong random number minimally complies with the statistical random number generator tests specified in 
FIPS 140-2, Security Requirements for Cryptographic Modules, section 4.9.1. Additionally, SecureRandom must produce 
non-deterministic output. Therefore any seed material passed to a SecureRandom object must be unpredictable, and all 
SecureRandom output sequences must be cryptographically strong, as described in 

RFC 1750: Randomness Recommendations for Security. 

A caller obtains a SecureRandom instance via the no-argument constructor or one of the getInstance methods: 



SecureRandom random = new SecureRandom(); 

Many SecureRandom implementations are in the form of a pseudo-random number generator (PRNG), which means they use a 
deterministic algorithm to produce a pseudo-random sequence from a true random seed. Other implementations may produce true 
random numbers, and yet others may use a combination of both techniques. 

Typical callers of SecureRandom invoke the following methods to retrieve random bytes: 



SecureRandom random = new SecureRandom(); byte bytes[] = new byte[20]; random.nextBytes(bytes); 

Callers may also invoke the generateSeed method to generate a given number of seed bytes (to seed other random number 
generators, for example): 

byte seed[] = random.generateSeed(20); 



*java.security.SecureRandom()*

public SecureRandom()

Constructs a secure random number generator (RNG) implementing the default random number algorithm. 

This constructor traverses the list of registered security Providers, starting with the most preferred Provider. A new 
SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) 
algorithm is returned. If none of the Providers support a RNG algorithm, then an implementation-specific default is returned. 

Note that the list of registered providers may be retrieved via the Security.getProviders()(|java.security.Security|) method. 

See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard RNG 
algorithm names. 

The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not 
called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if 
setSeed was previously called. 


*java.security.SecureRandom(byte[])*

public SecureRandom(byte[] seed)

Constructs a secure random number generator (RNG) implementing the default random number algorithm. The SecureRandom instance 
is seeded with the specified seed bytes. 

This constructor traverses the list of registered security Providers, starting with the most preferred Provider. A new 
SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) 
algorithm is returned. If none of the Providers support a RNG algorithm, then an implementation-specific default is returned. 

Note that the list of registered providers may be retrieved via the Security.getProviders()(|java.security.Security|) method. 

See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard RNG 
algorithm names. 

    seed - the seed. 

*java.security.SecureRandom(SecureRandomSpi,Provider)*

protected SecureRandom(
  java.security.SecureRandomSpi secureRandomSpi,
  java.security.Provider provider)

Creates a SecureRandom object. 

    secureRandomSpi - the SecureRandom implementation. 
    provider - the provider. 

*java.security.SecureRandom.generateSeed(int)*

public byte[] generateSeed(int numBytes)

Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself. This 
call may be used to seed other random number generators. 


    numBytes - the number of seed bytes to generate. 

    Returns: the seed bytes. 

*java.security.SecureRandom.getAlgorithm()*

public |java.lang.String| getAlgorithm()

Returns the name of the algorithm implemented by this SecureRandom object. 



    Returns: the name of the algorithm or unknown if the algorithm name cannot be determined. 

*java.security.SecureRandom.getInstance(String)*

public static |java.security.SecureRandom| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. 

This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom 
object encapsulating the SecureRandomSpi implementation from the first Provider that supports the specified algorithm is 
returned. 

Note that the list of registered providers may be retrieved via the Security.getProviders()(|java.security.Security|) method. 

The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not 
called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if 
setSeed was previously called. 


    algorithm - the name of the RNG algorithm. See Appendix A in the Java Cryptography Architecture API Specification and Reference for 
       information about standard RNG algorithm names. 

    Returns: the new SecureRandom object. 

*java.security.SecureRandom.getInstance(String,Provider)*

public static |java.security.SecureRandom| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. 

A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified Provider object is returned. Note 
that the specified Provider object does not have to be registered in the provider list. 

The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not 
called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if 
setSeed was previously called. 


    algorithm - the name of the RNG algorithm. See Appendix A in the Java Cryptography Architecture API Specification and Reference for 
       information about standard RNG algorithm names. 
    provider - the provider. 

    Returns: the new SecureRandom object. 

*java.security.SecureRandom.getInstance(String,String)*

public static |java.security.SecureRandom| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. 

A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified provider is returned. The 
specified provider must be registered in the security provider list. 

Note that the list of registered providers may be retrieved via the Security.getProviders()(|java.security.Security|) method. 

The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method. If setSeed is not 
called, the first call to nextBytes will force the SecureRandom object to seed itself. This self-seeding will not occur if 
setSeed was previously called. 


    algorithm - the name of the RNG algorithm. See Appendix A in the Java Cryptography Architecture API Specification and Reference for 
       information about standard RNG algorithm names. 
    provider - the name of the provider. 

    Returns: the new SecureRandom object. 

*java.security.SecureRandom.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this SecureRandom object. 



    Returns: the provider of this SecureRandom object. 

*java.security.SecureRandom.getSeed(int)*

public static byte[] getSeed(int numBytes)

Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself. This 
call may be used to seed other random number generators. 

This method is only included for backwards compatibility. The caller is encouraged to use one of the alternative getInstance 
methods to obtain a SecureRandom object, and then call the generateSeed method to obtain seed bytes from that object. 


    numBytes - the number of seed bytes to generate. 

    Returns: the seed bytes. 

*java.security.SecureRandom.next(int)*

protected final int next(int numBits)

Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros). This 
method overrides a java.util.Random method, and serves to provide a source of random bits to all of the methods inherited from 
that class (for example, nextInt, nextLong, and nextFloat). 


    numBits - number of pseudo-random bits to be generated, where 0 numBits <= 32. 

    Returns: an int containing the user-specified number of pseudo-random bits (right justified, with leading zeros). 

*java.security.SecureRandom.nextBytes(byte[])*

public synchronized void nextBytes(byte[] bytes)

Generates a user-specified number of random bytes. 

If a call to setSeed had not occurred previously, the first call to this method forces this SecureRandom object to seed itself. 
This self-seeding will not occur if setSeed was previously called. 


    bytes - the array to be filled in with random bytes. 

*java.security.SecureRandom.setSeed(byte[])*

public synchronized void setSeed(byte[] seed)

Reseeds this random object. The given seed supplements, rather than replaces, the existing seed. Thus, repeated calls are 
guaranteed never to reduce randomness. 


    seed - the seed. 

*java.security.SecureRandom.setSeed(long)*

public void setSeed(long seed)

Reseeds this random object, using the eight bytes contained in the given long seed. The given seed supplements, rather than 
replaces, the existing seed. Thus, repeated calls are guaranteed never to reduce randomness. 

This method is defined for compatibility with java.util.Random. 


    seed - the seed. 


