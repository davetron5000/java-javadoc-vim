*java.sql.Connection* *Connection* A connection (session) with a specific
 database.

public interface interface Connection

  implements |java.sql.Wrapper|

|java.sql.Connection_Description|
|java.sql.Connection_Fields|
|java.sql.Connection_Constructors|
|java.sql.Connection_Methods|

================================================================================================================================

*java.sql.Connection_Fields*
|int_java.sql.Connection.TRANSACTION_NONE|
|int_java.sql.Connection.TRANSACTION_READ_COMMITTED|
|int_java.sql.Connection.TRANSACTION_READ_UNCOMMITTED|
|int_java.sql.Connection.TRANSACTION_REPEATABLE_READ|
|int_java.sql.Connection.TRANSACTION_SERIALIZABLE|

*java.sql.Connection_Methods*
|java.sql.Connection.clearWarnings()|Clears all warnings reported for this Connection object.
|java.sql.Connection.close()|Releases this Connection object's database and JDBC resources  immediately instead of waiting for 
|java.sql.Connection.commit()|Makes all changes made since the previous  commit/rollback permanent and releases any database lo
|java.sql.Connection.createArrayOf(String,Object[])|Factory method for creating Array objects.
|java.sql.Connection.createBlob()|Constructs an object that implements the Blob interface.
|java.sql.Connection.createClob()|Constructs an object that implements the Clob interface.
|java.sql.Connection.createNClob()|Constructs an object that implements the NClob interface.
|java.sql.Connection.createSQLXML()|Constructs an object that implements the SQLXML interface.
|java.sql.Connection.createStatement()|Creates a Statement object for sending  SQL statements to the database.
|java.sql.Connection.createStatement(int,int)|Creates a Statement object that will generate  ResultSet objects with the given t
|java.sql.Connection.createStatement(int,int,int)|Creates a Statement object that will generate  ResultSet objects with the giv
|java.sql.Connection.createStruct(String,Object[])|Factory method for creating Struct objects.
|java.sql.Connection.getAutoCommit()|Retrieves the current auto-commit mode for this Connection  object.
|java.sql.Connection.getCatalog()|Retrieves this Connection object's current catalog name.
|java.sql.Connection.getClientInfo()|Returns a list containing the name and current value of each client info   property suppor
|java.sql.Connection.getClientInfo(String)|Returns the value of the client info property specified by name.
|java.sql.Connection.getHoldability()|Retrieves the current holdability of ResultSet objects  created using this Connection obj
|java.sql.Connection.getMetaData()|Retrieves a DatabaseMetaData object that contains  metadata about the database to which this
|java.sql.Connection.getTransactionIsolation()|Retrieves this Connection object's current   transaction isolation level.
|java.sql.Connection.getTypeMap()|Retrieves the Map object associated with this   Connection object.
|java.sql.Connection.getWarnings()|Retrieves the first warning reported by calls on this   Connection object.
|java.sql.Connection.isClosed()|Retrieves whether this Connection object has been  closed.
|java.sql.Connection.isReadOnly()|Retrieves whether this Connection   object is in read-only mode.
|java.sql.Connection.isValid(int)|Returns true if the connection has not been closed and is still valid.
|java.sql.Connection.nativeSQL(String)|Converts the given SQL statement into the system's native SQL grammar.
|java.sql.Connection.prepareCall(String)|Creates a CallableStatement object for calling  database stored procedures.
|java.sql.Connection.prepareCall(String,int,int)|Creates a CallableStatement object that will generate  ResultSet objects with 
|java.sql.Connection.prepareCall(String,int,int,int)|Creates a CallableStatement object that will generate  ResultSet objects w
|java.sql.Connection.prepareStatement(String)|Creates a PreparedStatement object for sending  parameterized SQL statements to t
|java.sql.Connection.prepareStatement(String,int)|Creates a default PreparedStatement object that has  the capability to retrie
|java.sql.Connection.prepareStatement(String,int[])|Creates a default PreparedStatement object capable  of returning the auto-g
|java.sql.Connection.prepareStatement(String,int,int)|Creates a PreparedStatement object that will generate  ResultSet objects 
|java.sql.Connection.prepareStatement(String,int,int,int)|Creates a PreparedStatement object that will generate  ResultSet obje
|java.sql.Connection.prepareStatement(String,String[])|Creates a default PreparedStatement object capable  of returning the aut
|java.sql.Connection.releaseSavepoint(Savepoint)|Removes the specified Savepoint  and subsequent Savepoint objects from the cur
|java.sql.Connection.rollback()|Undoes all changes made in the current transaction  and releases any database locks currently h
|java.sql.Connection.rollback(Savepoint)|Undoes all changes made after the given Savepoint object  was set.
|java.sql.Connection.setAutoCommit(boolean)|Sets this connection's auto-commit mode to the given state.
|java.sql.Connection.setCatalog(String)|Sets the given catalog name in order to select 	  a subspace of this Connection object'
|java.sql.Connection.setClientInfo(Properties)|Sets the value of the connection's client info properties.
|java.sql.Connection.setClientInfo(String,String)|Sets the value of the client info property specified by name to the   value s
|java.sql.Connection.setHoldability(int)|Changes the default holdability of ResultSet objects  created using this Connection ob
|java.sql.Connection.setReadOnly(boolean)|Puts this connection in read-only mode as a hint to the driver to enable   database o
|java.sql.Connection.setSavepoint()|Creates an unnamed savepoint in the current transaction and   returns the new Savepoint obj
|java.sql.Connection.setSavepoint(String)|Creates a savepoint with the given name in the current transaction  and returns the n
|java.sql.Connection.setTransactionIsolation(int)|Attempts to change the transaction isolation level for this  Connection objec
|java.sql.Connection.setTypeMap(Map<String,Class<?>>)|Installs the given TypeMap object as the type map for  this Connection ob

*java.sql.Connection_Description*

A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a 
connection. 

A Connection object's database is able to provide information describing its tables, its supported SQL grammar, its stored 
procedures, the capabilities of this connection, and so on. This information is obtained with the getMetaData method. 

Note: When configuring a Connection, JDBC applications should use the appropritate Connection method such as setAutoCommit or 
setTransactionIsolation. Applications should not invoke SQL commands directly to change the connection's configuration when 
there is a JDBC method available. By default a Connection object is in auto-commit mode, which means that it automatically 
commits changes after executing each statement. If auto-commit mode has been disabled, the method commit must be called 
explicitly in order to commit changes; otherwise, database changes will not be saved. 

A new Connection object created using the JDBC 2.1 core API has an initially empty type map associated with it. A user may 
enter a custom mapping for a UDT in this type map. When a UDT is retrieved from a data source with the method 
ResultSet.getObject, the getObject method will check the connection's type map to see if there is an entry for that UDT. If so, 
the getObject method will map the UDT to the class indicated. If there is no entry, the UDT will be mapped using the standard 
mapping. 

A user may create a new type map, which is a java.util.Map object, make an entry in it, and pass it to the java.sql methods 
that can perform custom mapping. In this case, the method will use the given type map instead of the one associated with the 
connection. 

For example, the following code fragment specifies that the SQL type ATHLETES will be mapped to the class Athletes in the Java 
programming language. The code fragment retrieves the type map for the Connection object con, inserts the entry into it, and 
then sets the type map with the new entry as the connection's type map. 

java.util.Map map = con.getTypeMap(); map.put("mySchemaName.ATHLETES", Class.forName("Athletes")); con.setTypeMap(map); 



*int_java.sql.Connection.TRANSACTION_NONE*

A constant indicating that transactions are not supported. 


*int_java.sql.Connection.TRANSACTION_READ_COMMITTED*

A constant indicating that dirty reads are prevented; non-repeatable reads and phantom reads can occur. This level only 
prohibits a transaction from reading a row with uncommitted changes in it. 


*int_java.sql.Connection.TRANSACTION_READ_UNCOMMITTED*

A constant indicating that dirty reads, non-repeatable reads and phantom reads can occur. This level allows a row changed by 
one transaction to be read by another transaction before any changes in that row have been committed (a "dirty read"). If any 
of the changes are rolled back, the second transaction will have retrieved an invalid row. 


*int_java.sql.Connection.TRANSACTION_REPEATABLE_READ*

A constant indicating that dirty reads and non-repeatable reads are prevented; phantom reads can occur. This level prohibits a 
transaction from reading a row with uncommitted changes in it, and it also prohibits the situation where one transaction reads 
a row, a second transaction alters the row, and the first transaction rereads the row, getting different values the second time 
(a "non-repeatable read"). 


*int_java.sql.Connection.TRANSACTION_SERIALIZABLE*

A constant indicating that dirty reads, non-repeatable reads and phantom reads are prevented. This level includes the 
prohibitions in TRANSACTION_REPEATABLE_READ and further prohibits the situation where one transaction reads all rows that 
satisfy a WHERE condition, a second transaction inserts a row that satisfies that WHERE condition, and the first transaction 
rereads for the same condition, retrieving the additional "phantom" row in the second read. 



*java.sql.Connection.clearWarnings()*

public void clearWarnings()
  throws |java.sql.SQLException|
         
Clears all warnings reported for this Connection object. After a call to this method, the method getWarnings returns null until 
a new warning is reported for this Connection object. 



*java.sql.Connection.close()*

public void close()
  throws |java.sql.SQLException|
         
Releases this Connection object's database and JDBC resources immediately instead of waiting for them to be automatically 
released. 

Calling the method close on a Connection object that is already closed is a no-op. 

It is strongly recommended that an application explicitly commits or rolls back an active transaction prior to calling the 
close method. If the close method is called and there is an active transaction, the results are implementation-defined. 



*java.sql.Connection.commit()*

public void commit()
  throws |java.sql.SQLException|
         
Makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this 
Connection object. This method should be used only when auto-commit mode has been disabled. 



*java.sql.Connection.createArrayOf(String,Object[])*

public |java.sql.Array| createArrayOf(
  java.lang.String typeName,
  java.lang.Object[] elements)
  throws |java.sql.SQLException|
         
Factory method for creating Array objects. 

Note: When createArrayOf is used to create an array object that maps to a primitive data type, then it is 
implementation-defined whether the Array object is an array of that primitive data type or an array of Object. 

Note: The JDBC driver is responsible for mapping the elements Object array to the default JDBC SQL type defined in 
java.sql.Types for the given class of Object. The default mapping is specified in Appendix B of the JDBC specification. If the 
resulting JDBC type is not the appropriate type for the given typeName then it is implementation defined whether an 
SQLException is thrown or the driver supports the resulting conversion. 


    typeName - the SQL name of the type the elements of the array map to. The typeName is a database-specific name which may be the name of a 
       built-in type, a user-defined type or a standard SQL type supported by this database. This is the value returned by 
       Array.getBaseTypeName 
    elements - the elements that populate the returned object 

    Returns: an Array object whose elements map to the specified SQL type 

*java.sql.Connection.createBlob()*

public |java.sql.Blob| createBlob()
  throws |java.sql.SQLException|
         
Constructs an object that implements the Blob interface. The object returned initially contains no data. The setBinaryStream 
and setBytes methods of the Blob interface may be used to add data to the Blob. 



    Returns: An object that implements the Blob interface 

*java.sql.Connection.createClob()*

public |java.sql.Clob| createClob()
  throws |java.sql.SQLException|
         
Constructs an object that implements the Clob interface. The object returned initially contains no data. The setAsciiStream, 
setCharacterStream and setString methods of the Clob interface may be used to add data to the Clob. 



    Returns: An object that implements the Clob interface 

*java.sql.Connection.createNClob()*

public |java.sql.NClob| createNClob()
  throws |java.sql.SQLException|
         
Constructs an object that implements the NClob interface. The object returned initially contains no data. The setAsciiStream, 
setCharacterStream and setString methods of the NClob interface may be used to add data to the NClob. 



    Returns: An object that implements the NClob interface 

*java.sql.Connection.createSQLXML()*

public |java.sql.SQLXML| createSQLXML()
  throws |java.sql.SQLException|
         
Constructs an object that implements the SQLXML interface. The object returned initially contains no data. The 
createXmlStreamWriter object and setString method of the SQLXML interface may be used to add data to the SQLXML object. 



    Returns: An object that implements the SQLXML interface 

*java.sql.Connection.createStatement()*

public |java.sql.Statement| createStatement()
  throws |java.sql.SQLException|
         
Creates a Statement object for sending SQL statements to the database. SQL statements without parameters are normally executed 
using Statement objects. If the same SQL statement is executed many times, it may be more efficient to use a PreparedStatement 
object. 

Result sets created using the returned Statement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level 
of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling (|java.sql.Connection|) . 



    Returns: a new default Statement object 

*java.sql.Connection.createStatement(int,int)*

public |java.sql.Statement| createStatement(
  int resultSetType,
  int resultSetConcurrency)
  throws |java.sql.SQLException|
         
Creates a Statement object that will generate ResultSet objects with the given type and concurrency. This method is the same as 
the createStatement method above, but it allows the default result set type and concurrency to be overridden. The holdability 
of the created result sets can be determined by calling (|java.sql.Connection|) . 


    resultSetType - a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 
    resultSetConcurrency - a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE 

    Returns: a new Statement object that will generate ResultSet objects with the given type and concurrency 

*java.sql.Connection.createStatement(int,int,int)*

public |java.sql.Statement| createStatement(
  int resultSetType,
  int resultSetConcurrency,
  int resultSetHoldability)
  throws |java.sql.SQLException|
         
Creates a Statement object that will generate ResultSet objects with the given type, concurrency, and holdability. This method 
is the same as the createStatement method above, but it allows the default result set type, concurrency, and holdability to be 
overridden. 


    resultSetType - one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or 
       ResultSet.TYPE_SCROLL_SENSITIVE 
    resultSetConcurrency - one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE 
    resultSetHoldability - one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT 

    Returns: a new Statement object that will generate ResultSet objects with the given type, concurrency, and holdability 

*java.sql.Connection.createStruct(String,Object[])*

public |java.sql.Struct| createStruct(
  java.lang.String typeName,
  java.lang.Object[] attributes)
  throws |java.sql.SQLException|
         
Factory method for creating Struct objects. 


    typeName - the SQL type name of the SQL structured type that this Struct object maps to. The typeName is the name of a user-defined type 
       that has been defined for this database. It is the value returned by Struct.getSQLTypeName. 
    attributes - the attributes that populate the returned object 

    Returns: a Struct object that maps to the given SQL type and is populated with the given attributes 

*java.sql.Connection.getAutoCommit()*

public boolean getAutoCommit()
  throws |java.sql.SQLException|
         
Retrieves the current auto-commit mode for this Connection object. 



    Returns: the current state of this Connection object's auto-commit mode 

*java.sql.Connection.getCatalog()*

public |java.lang.String| getCatalog()
  throws |java.sql.SQLException|
         
Retrieves this Connection object's current catalog name. 



    Returns: the current catalog name or null if there is none 

*java.sql.Connection.getClientInfo()*

public |java.util.Properties| getClientInfo()
  throws |java.sql.SQLException|
         
Returns a list containing the name and current value of each client info property supported by the driver. The value of a 
client info property may be null if the property has not been set and does not have a default value. 



    Returns: A Properties object that contains the name and current value of each of the client info properties supported by the driver. 

*java.sql.Connection.getClientInfo(String)*

public |java.lang.String| getClientInfo(java.lang.String name)
  throws |java.sql.SQLException|
         
Returns the value of the client info property specified by name. This method may return null if the specified client info 
property has not been set and does not have a default value. This method will also return null if the specified client info 
property name is not supported by the driver. 

Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by 
the driver. 


    name - The name of the client info property to retrieve 

    Returns: The value of the client info property specified 

*java.sql.Connection.getHoldability()*

public int getHoldability()
  throws |java.sql.SQLException|
         
Retrieves the current holdability of ResultSet objects created using this Connection object. 



    Returns: the holdability, one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT 

*java.sql.Connection.getMetaData()*

public |java.sql.DatabaseMetaData| getMetaData()
  throws |java.sql.SQLException|
         
Retrieves a DatabaseMetaData object that contains metadata about the database to which this Connection object represents a 
connection. The metadata includes information about the database's tables, its supported SQL grammar, its stored procedures, 
the capabilities of this connection, and so on. 



    Returns: a DatabaseMetaData object for this Connection object 

*java.sql.Connection.getTransactionIsolation()*

public int getTransactionIsolation()
  throws |java.sql.SQLException|
         
Retrieves this Connection object's current transaction isolation level. 



    Returns: the current transaction isolation level, which will be one of the following constants: Connection.TRANSACTION_READ_UNCOMMITTED, 
             Connection.TRANSACTION_READ_COMMITTED, Connection.TRANSACTION_REPEATABLE_READ, 
             Connection.TRANSACTION_SERIALIZABLE, or Connection.TRANSACTION_NONE. 

*java.sql.Connection.getTypeMap()*

public |java.util.Map|<String,Class<?>> getTypeMap()
  throws |java.sql.SQLException|
         
Retrieves the Map object associated with this Connection object. Unless the application has added an entry, the type map 
returned will be empty. 



    Returns: the java.util.Map object associated with this Connection object 

*java.sql.Connection.getWarnings()*

public |java.sql.SQLWarning| getWarnings()
  throws |java.sql.SQLException|
         
Retrieves the first warning reported by calls on this Connection object. If there is more than one warning, subsequent warnings 
will be chained to the first one and can be retrieved by calling the method SQLWarning.getNextWarning on the warning that was 
retrieved previously. 

This method may not be called on a closed connection; doing so will cause an SQLException to be thrown. 

Note: Subsequent warnings will be chained to this SQLWarning. 



    Returns: the first SQLWarning object or null if there are none 

*java.sql.Connection.isClosed()*

public boolean isClosed()
  throws |java.sql.SQLException|
         
Retrieves whether this Connection object has been closed. A connection is closed if the method close has been called on it or 
if certain fatal errors have occurred. This method is guaranteed to return true only when it is called after the method 
Connection.close has been called. 

This method generally cannot be called to determine whether a connection to a database is valid or invalid. A typical client 
can determine that a connection is invalid by catching any exceptions that might be thrown when an operation is attempted. 



    Returns: true if this Connection object is closed; false if it is still open 

*java.sql.Connection.isReadOnly()*

public boolean isReadOnly()
  throws |java.sql.SQLException|
         
Retrieves whether this Connection object is in read-only mode. 



    Returns: true if this Connection object is read-only; false otherwise 

*java.sql.Connection.isValid(int)*

public boolean isValid(int timeout)
  throws |java.sql.SQLException|
         
Returns true if the connection has not been closed and is still valid. The driver shall submit a query on the connection or use 
some other mechanism that positively verifies the connection is still valid when this method is called. 

The query submitted by the driver to validate the connection shall be executed in the context of the current transaction. 


    timeout - -		The time in seconds to wait for the database operation used to validate the connection to complete. If the timeout period 
       expires before the operation completes, this method returns false. A value of 0 indicates a timeout is not applied to 
       the database operation. 

    Returns: true if the connection is valid, false otherwise 

*java.sql.Connection.nativeSQL(String)*

public |java.lang.String| nativeSQL(java.lang.String sql)
  throws |java.sql.SQLException|
         
Converts the given SQL statement into the system's native SQL grammar. A driver may convert the JDBC SQL grammar into its 
system's native SQL grammar prior to sending it. This method returns the native form of the statement that the driver would 
have sent. 


    sql - an SQL statement that may contain one or more '?' parameter placeholders 

    Returns: the native form of this statement 

*java.sql.Connection.prepareCall(String)*

public |java.sql.CallableStatement| prepareCall(java.lang.String sql)
  throws |java.sql.SQLException|
         
Creates a CallableStatement object for calling database stored procedures. The CallableStatement object provides methods for 
setting up its IN and OUT parameters, and methods for executing the call to a stored procedure. 

Note: This method is optimized for handling stored procedure call statements. Some drivers may send the call statement to the 
database when the method prepareCall is done; others may wait until the CallableStatement object is executed. This has no 
direct effect on users; however, it does affect which method throws certain SQLExceptions. 

Result sets created using the returned CallableStatement object will by default be type TYPE_FORWARD_ONLY and have a 
concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling 
(|java.sql.Connection|) . 


    sql - an SQL statement that may contain one or more '?' parameter placeholders. Typically this statement is specified using JDBC call 
       escape syntax. 

    Returns: a new default CallableStatement object containing the pre-compiled SQL statement 

*java.sql.Connection.prepareCall(String,int,int)*

public |java.sql.CallableStatement| prepareCall(
  java.lang.String sql,
  int resultSetType,
  int resultSetConcurrency)
  throws |java.sql.SQLException|
         
Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the 
same as the prepareCall method above, but it allows the default result set type and concurrency to be overridden. The 
holdability of the created result sets can be determined by calling (|java.sql.Connection|) . 


    sql - a String object that is the SQL statement to be sent to the database; may contain on or more '?' parameters 
    resultSetType - a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 
    resultSetConcurrency - a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE 

    Returns: a new CallableStatement object containing the pre-compiled SQL statement that will produce ResultSet objects with the given 
             type and concurrency 

*java.sql.Connection.prepareCall(String,int,int,int)*

public |java.sql.CallableStatement| prepareCall(
  java.lang.String sql,
  int resultSetType,
  int resultSetConcurrency,
  int resultSetHoldability)
  throws |java.sql.SQLException|
         
Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the 
same as the prepareCall method above, but it allows the default result set type, result set concurrency type and holdability to 
be overridden. 


    sql - a String object that is the SQL statement to be sent to the database; may contain on or more '?' parameters 
    resultSetType - one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or 
       ResultSet.TYPE_SCROLL_SENSITIVE 
    resultSetConcurrency - one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE 
    resultSetHoldability - one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT 

    Returns: a new CallableStatement object, containing the pre-compiled SQL statement, that will generate ResultSet objects with the given 
             type, concurrency, and holdability 

*java.sql.Connection.prepareStatement(String)*

public |java.sql.PreparedStatement| prepareStatement(java.lang.String sql)
  throws |java.sql.SQLException|
         
Creates a PreparedStatement object for sending parameterized SQL statements to the database. 

A SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can 
then be used to efficiently execute this statement multiple times. 

Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports 
precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not 
support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is 
executed. This has no direct effect on users; however, it does affect which methods throw certain SQLException objects. 

Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a 
concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling 
(|java.sql.Connection|) . 


    sql - an SQL statement that may contain one or more '?' IN parameter placeholders 

    Returns: a new default PreparedStatement object containing the pre-compiled SQL statement 

*java.sql.Connection.prepareStatement(String,int)*

public |java.sql.PreparedStatement| prepareStatement(
  java.lang.String sql,
  int autoGeneratedKeys)
  throws |java.sql.SQLException|
         
Creates a default PreparedStatement object that has the capability to retrieve auto-generated keys. The given constant tells 
the driver whether it should make auto-generated keys available for retrieval. This parameter is ignored if the SQL statement 
is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is 
vendor-specific). 

Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports 
precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not 
support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is 
executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. 

Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a 
concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling 
(|java.sql.Connection|) . 


    sql - an SQL statement that may contain one or more '?' IN parameter placeholders 
    autoGeneratedKeys - a flag indicating whether auto-generated keys should be returned; one of Statement.RETURN_GENERATED_KEYS or 
       Statement.NO_GENERATED_KEYS 

    Returns: a new PreparedStatement object, containing the pre-compiled SQL statement, that will have the capability of returning 
             auto-generated keys 

*java.sql.Connection.prepareStatement(String,int[])*

public |java.sql.PreparedStatement| prepareStatement(
  java.lang.String sql,
  int[] columnIndexes)
  throws |java.sql.SQLException|
         
Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array. This 
array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made 
available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return 
auto-generated keys (the list of such statements is vendor-specific). 

An SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can 
then be used to efficiently execute this statement multiple times. 

Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports 
precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not 
support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is 
executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. 

Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a 
concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling 
(|java.sql.Connection|) . 


    sql - an SQL statement that may contain one or more '?' IN parameter placeholders 
    columnIndexes - an array of column indexes indicating the columns that should be returned from the inserted row or rows 

    Returns: a new PreparedStatement object, containing the pre-compiled statement, that is capable of returning the auto-generated keys 
             designated by the given array of column indexes 

*java.sql.Connection.prepareStatement(String,int,int)*

public |java.sql.PreparedStatement| prepareStatement(
  java.lang.String sql,
  int resultSetType,
  int resultSetConcurrency)
  throws |java.sql.SQLException|
         
Creates a PreparedStatement object that will generate ResultSet objects with the given type and concurrency. This method is the 
same as the prepareStatement method above, but it allows the default result set type and concurrency to be overridden. The 
holdability of the created result sets can be determined by calling (|java.sql.Connection|) . 


    sql - a String object that is the SQL statement to be sent to the database; may contain one or more '?' IN parameters 
    resultSetType - a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 
    resultSetConcurrency - a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE 

    Returns: a new PreparedStatement object containing the pre-compiled SQL statement that will produce ResultSet objects with the given 
             type and concurrency 

*java.sql.Connection.prepareStatement(String,int,int,int)*

public |java.sql.PreparedStatement| prepareStatement(
  java.lang.String sql,
  int resultSetType,
  int resultSetConcurrency,
  int resultSetHoldability)
  throws |java.sql.SQLException|
         
Creates a PreparedStatement object that will generate ResultSet objects with the given type, concurrency, and holdability. 

This method is the same as the prepareStatement method above, but it allows the default result set type, concurrency, and 
holdability to be overridden. 


    sql - a String object that is the SQL statement to be sent to the database; may contain one or more '?' IN parameters 
    resultSetType - one of the following ResultSet constants: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or 
       ResultSet.TYPE_SCROLL_SENSITIVE 
    resultSetConcurrency - one of the following ResultSet constants: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE 
    resultSetHoldability - one of the following ResultSet constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT 

    Returns: a new PreparedStatement object, containing the pre-compiled SQL statement, that will generate ResultSet objects with the given 
             type, concurrency, and holdability 

*java.sql.Connection.prepareStatement(String,String[])*

public |java.sql.PreparedStatement| prepareStatement(
  java.lang.String sql,
  java.lang.String[] columnNames)
  throws |java.sql.SQLException|
         
Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array. This 
array contains the names of the columns in the target table that contain the auto-generated keys that should be returned. The 
driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated 
keys (the list of such statements is vendor-specific). 

An SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can 
then be used to efficiently execute this statement multiple times. 

Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports 
precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not 
support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is 
executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. 

Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a 
concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling 
(|java.sql.Connection|) . 


    sql - an SQL statement that may contain one or more '?' IN parameter placeholders 
    columnNames - an array of column names indicating the columns that should be returned from the inserted row or rows 

    Returns: a new PreparedStatement object, containing the pre-compiled statement, that is capable of returning the auto-generated keys 
             designated by the given array of column names 

*java.sql.Connection.releaseSavepoint(Savepoint)*

public void releaseSavepoint(java.sql.Savepoint savepoint)
  throws |java.sql.SQLException|
         
Removes the specified Savepoint and subsequent Savepoint objects from the current transaction. Any reference to the savepoint 
after it have been removed will cause an SQLException to be thrown. 


    savepoint - the Savepoint object to be removed 

*java.sql.Connection.rollback()*

public void rollback()
  throws |java.sql.SQLException|
         
Undoes all changes made in the current transaction and releases any database locks currently held by this Connection object. 
This method should be used only when auto-commit mode has been disabled. 



*java.sql.Connection.rollback(Savepoint)*

public void rollback(java.sql.Savepoint savepoint)
  throws |java.sql.SQLException|
         
Undoes all changes made after the given Savepoint object was set. 

This method should be used only when auto-commit has been disabled. 


    savepoint - the Savepoint object to roll back to 

*java.sql.Connection.setAutoCommit(boolean)*

public void setAutoCommit(boolean autoCommit)
  throws |java.sql.SQLException|
         
Sets this connection's auto-commit mode to the given state. If a connection is in auto-commit mode, then all its SQL statements 
will be executed and committed as individual transactions. Otherwise, its SQL statements are grouped into transactions that are 
terminated by a call to either the method commit or the method rollback. By default, new connections are in auto-commit mode. 

The commit occurs when the statement completes. The time when the statement completes depends on the type of SQL Statement: 

For DML statements, such as Insert, Update or Delete, and DDL statements, the statement is complete as soon as it has finished 
executing. For Select statements, the statement is complete when the associated result set is closed. For CallableStatement 
objects or for statements that return multiple results, the statement is complete when all of the associated result sets have 
been closed, and all update counts and output parameters have been retrieved. 

NOTE: If this method is called during a transaction and the auto-commit mode is changed, the transaction is committed. If 
setAutoCommit is called and the auto-commit mode is not changed, the call is a no-op. 


    autoCommit - true to enable auto-commit mode; false to disable it 

*java.sql.Connection.setCatalog(String)*

public void setCatalog(java.lang.String catalog)
  throws |java.sql.SQLException|
         
Sets the given catalog name in order to select a subspace of this Connection object's database in which to work. 

If the driver does not support catalogs, it will silently ignore this request. 


    catalog - the name of a catalog (subspace in this Connection object's database) in which to work 

*java.sql.Connection.setClientInfo(Properties)*

public void setClientInfo(java.util.Properties properties)
  throws |java.sql.SQLClientInfoException|
         
Sets the value of the connection's client info properties. The Properties object contains the names and values of the client 
info properties to be set. The set of client info properties contained in the properties list replaces the current set of 
client info properties on the connection. If a property that is currently set on the connection is not present in the 
properties list, that property is cleared. Specifying an empty properties list will clear all of the properties on the 
connection. See setClientInfo (String, String) for more information. 

If an error occurs in setting any of the client info properties, a SQLClientInfoException is thrown. The SQLClientInfoException 
contains information indicating which client info properties were not set. The state of the client information is unknown 
because some databases do not allow multiple client info properties to be set atomically. For those databases, one or more 
properties may have been set before the error occurred. 


    properties - the list of client info properties to set 

*java.sql.Connection.setClientInfo(String,String)*

public void setClientInfo(
  java.lang.String name,
  java.lang.String value)
  throws |java.sql.SQLClientInfoException|
         
Sets the value of the client info property specified by name to the value specified by value. 

Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by 
the driver and the maximum length that may be specified for each property. 

The driver stores the value specified in a suitable location in the database. For example in a special register, session 
parameter, or system table column. For efficiency the driver may defer setting the value in the database until the next time a 
statement is executed or prepared. Other than storing the client information in the appropriate place in the database, these 
methods shall not alter the behavior of the connection in anyway. The values supplied to these methods are used for accounting, 
diagnostics and debugging purposes only. 

The driver shall generate a warning if the client info name specified is not recognized by the driver. 

If the value specified to this method is greater than the maximum length for the property the driver may either truncate the 
value and generate a warning or generate a SQLClientInfoException. If the driver generates a SQLClientInfoException, the value 
specified was not set on the connection. 

The following are standard client info properties. Drivers are not required to support these properties however if the driver 
supports a client info property that can be described by one of the standard properties, the standard property name should be 
used. 

ApplicationName	-	The name of the application currently utilizing the connection ClientUser		-	The name of the user that the 
application using the connection is performing work for. This may not be the same as the user name that was used in 
establishing the connection. ClientHostname	-	The hostname of the computer the application using the connection is running on. 




    name - The name of the client info property to set 
    value - The value to set the client info property to. If the value is null, the current value of the specified property is cleared. 

*java.sql.Connection.setHoldability(int)*

public void setHoldability(int holdability)
  throws |java.sql.SQLException|
         
Changes the default holdability of ResultSet objects created using this Connection object to the given holdability. The default 
holdability of ResultSet objects can be be determined by invoking (|java.sql.DatabaseMetaData|) . 


    holdability - a ResultSet holdability constant; one of ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT 

*java.sql.Connection.setReadOnly(boolean)*

public void setReadOnly(boolean readOnly)
  throws |java.sql.SQLException|
         
Puts this connection in read-only mode as a hint to the driver to enable database optimizations. 

Note: This method cannot be called during a transaction. 


    readOnly - true enables read-only mode; false disables it 

*java.sql.Connection.setSavepoint()*

public |java.sql.Savepoint| setSavepoint()
  throws |java.sql.SQLException|
         
Creates an unnamed savepoint in the current transaction and returns the new Savepoint object that represents it. 

if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created savepoint. 



    Returns: the new Savepoint object 

*java.sql.Connection.setSavepoint(String)*

public |java.sql.Savepoint| setSavepoint(java.lang.String name)
  throws |java.sql.SQLException|
         
Creates a savepoint with the given name in the current transaction and returns the new Savepoint object that represents it. 

if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created savepoint. 


    name - a String containing the name of the savepoint 

    Returns: the new Savepoint object 

*java.sql.Connection.setTransactionIsolation(int)*

public void setTransactionIsolation(int level)
  throws |java.sql.SQLException|
         
Attempts to change the transaction isolation level for this Connection object to the one given. The constants defined in the 
interface Connection are the possible transaction isolation levels. 

Note: If this method is called during a transaction, the result is implementation-defined. 


    level - one of the following Connection constants: Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED, 
       Connection.TRANSACTION_REPEATABLE_READ, or Connection.TRANSACTION_SERIALIZABLE. (Note that Connection.TRANSACTION_NONE 
       cannot be used because it specifies that transactions are not supported.) 

*java.sql.Connection.setTypeMap(Map<String,Class<?>>)*

public void setTypeMap(java.util.Map<java.lang.String, java.lang.Class<?>> map)
  throws |java.sql.SQLException|
         
Installs the given TypeMap object as the type map for this Connection object. The type map will be used for the custom mapping 
of SQL structured types and distinct types. 


    map - the java.util.Map object to install as the replacement for this Connection object's default type map 


