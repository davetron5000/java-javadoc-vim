*java.security.Policy* *Policy* A Policy object is responsible for determining whether code executing
 in the Java runtime envir

public abstract class Policy
  extends    |java.lang.Object|

|java.security.Policy_Description|
|java.security.Policy_Fields|
|java.security.Policy_Constructors|
|java.security.Policy_Methods|

================================================================================================================================

*java.security.Policy_Fields*
|java.security.PermissionCollection_java.security.Policy.UNSUPPORTED_EMPTY_COLLECTION|

*java.security.Policy_Constructors*
|java.security.Policy()|

*java.security.Policy_Methods*
|java.security.Policy.getInstance(String,Policy.Parameters)|Returns a Policy object of the specified type.
|java.security.Policy.getInstance(String,Policy.Parameters,Provider)|Returns a Policy object of the specified type.
|java.security.Policy.getInstance(String,Policy.Parameters,String)|Returns a Policy object of the specified type.
|java.security.Policy.getParameters()|Return Policy parameters.
|java.security.Policy.getPermissions(CodeSource)|Return a PermissionCollection object containing the set of  permissions grante
|java.security.Policy.getPermissions(ProtectionDomain)|Return a PermissionCollection object containing the set of  permissions 
|java.security.Policy.getPolicy()|Returns the installed Policy object.
|java.security.Policy.getProvider()|Return the Provider of this Policy.
|java.security.Policy.getType()|Return the type of this Policy.
|java.security.Policy.implies(ProtectionDomain,Permission)|Evaluates the global policy for the permissions granted to  the Prot
|java.security.Policy.refresh()|Refreshes/reloads the policy configuration.
|java.security.Policy.setPolicy(Policy)|Sets the system-wide Policy object.

*java.security.Policy_Description*

A Policy object is responsible for determining whether code executing in the Java runtime environment has permission to perform 
a security-sensitive operation. 

There is only one Policy object installed in the runtime at any given time. A Policy object can be installed by calling the 
setPolicy method. The installed Policy object can be obtained by calling the getPolicy method. 

If no Policy object has been installed in the runtime, a call to getPolicy installs an instance of the default Policy 
implementation (a default subclass implementation of this abstract class). The default Policy implementation can be changed by 
setting the value of the "policy.provider" security property (in the Java security properties file) to the fully qualified name 
of the desired Policy subclass implementation. The Java security properties file is located in the file named 
<JAVA_HOME>/lib/security/java.security. <JAVA_HOME> refers to the value of the java.home system property, and specifies the 
directory where the JRE is installed. 

Application code can directly subclass Policy to provide a custom implementation. In addition, an instance of a Policy object 
can be constructed by invoking one of the getInstance factory methods with a standard type. The default policy type is 
"JavaPolicy". See Appendix A in the Java Cryptography Architecture API Specification and Reference for a list of standard 
Policy types. 

Once a Policy instance has been installed (either by default, or by calling setPolicy), the Java runtime invokes its implies 
when it needs to determine whether executing code (encapsulated in a ProtectionDomain) can perform SecurityManager-protected 
operations. How a Policy object retrieves its policy data is up to the Policy implementation itself. The policy data may be 
stored, for example, in a flat ASCII file, in a serialized binary file of the Policy class, or in a database. 

The refresh method causes the policy object to refresh/reload its data. This operation is implementation-dependent. For 
example, if the policy object stores its data in configuration files, calling refresh will cause it to re-read the 
configuration policy files. If a refresh operation is not supported, this method does nothing. Note that refreshed policy may 
not have an effect on classes in a particular ProtectionDomain. This is dependent on the Policy provider's implementation of 
the implies method and its PermissionCollection caching strategy. 



*java.security.PermissionCollection_java.security.Policy.UNSUPPORTED_EMPTY_COLLECTION*

A read-only empty PermissionCollection instance. 



*java.security.Policy()*

public Policy()




*java.security.Policy.getInstance(String,Policy.Parameters)*

public static |java.security.Policy| getInstance(
  java.lang.String type,
  java.security.Policy.Parameters params)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a Policy object of the specified type. 

This method traverses the list of registered security providers, starting with the most preferred Provider. A new Policy object 
encapsulating the PolicySpi implementation from the first Provider that supports the specified type is returned. 

Note that the list of registered providers may be retrieved via the Security.getProviders()(|java.security.Security|) method. 


    type - the specified Policy type. See Appendix A in the 

Java Cryptography Architecture API Specification and Reference for a list of standard Policy types. 
    params - parameters for the Policy, which may be null. 

    Returns: the new Policy object. 

*java.security.Policy.getInstance(String,Policy.Parameters,Provider)*

public static |java.security.Policy| getInstance(
  java.lang.String type,
  java.security.Policy.Parameters params,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a Policy object of the specified type. 

A new Policy object encapsulating the PolicySpi implementation from the specified Provider object is returned. Note that the 
specified Provider object does not have to be registered in the provider list. 


    type - the specified Policy type. See Appendix A in the 

Java Cryptography Architecture API Specification and Reference for a list of standard Policy types. 
    params - parameters for the Policy, which may be null. 
    provider - the Provider. 

    Returns: the new Policy object. 

*java.security.Policy.getInstance(String,Policy.Parameters,String)*

public static |java.security.Policy| getInstance(
  java.lang.String type,
  java.security.Policy.Parameters params,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a Policy object of the specified type. 

A new Policy object encapsulating the PolicySpi implementation from the specified provider is returned. The specified provider 
must be registered in the provider list. 

Note that the list of registered providers may be retrieved via the Security.getProviders()(|java.security.Security|) method. 


    type - the specified Policy type. See Appendix A in the 

Java Cryptography Architecture API Specification and Reference for a list of standard Policy types. 
    params - parameters for the Policy, which may be null. 
    provider - the provider. 

    Returns: the new Policy object. 

*java.security.Policy.getParameters()*

public |java.security.Policy.Parameters| getParameters()

Return Policy parameters. 

This Policy instance will only have parameters if it was obtained via a call to Policy.getInstance. Otherwise this method 
returns null. 



    Returns: Policy parameters, or null. 

*java.security.Policy.getPermissions(CodeSource)*

public |java.security.PermissionCollection| getPermissions(java.security.CodeSource codesource)

Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource. 

Applications are discouraged from calling this method since this operation may not be supported by all policy implementations. 
Applications should solely rely on the implies method to perform policy checks. If an application absolutely must call a 
getPermissions method, it should call getPermissions(ProtectionDomain). 

The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION. This method can be overridden if the 
policy implementation can return a set of permissions granted to a CodeSource. 


    codesource - the CodeSource to which the returned PermissionCollection has been granted. 

    Returns: a set of permissions granted to the specified CodeSource. If this operation is supported, the returned set of permissions must 
             be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, 
             Policy.UNSUPPORTED_EMPTY_COLLECTION is returned. 

*java.security.Policy.getPermissions(ProtectionDomain)*

public |java.security.PermissionCollection| getPermissions(java.security.ProtectionDomain domain)

Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain. 

Applications are discouraged from calling this method since this operation may not be supported by all policy implementations. 
Applications should rely on the implies method to perform policy checks. 

The default implementation of this method first retrieves the permissions returned via getPermissions(CodeSource) (the 
CodeSource is taken from the specified ProtectionDomain), as well as the permissions located inside the specified 
ProtectionDomain. All of these permissions are then combined and returned in a new PermissionCollection object. If 
getPermissions(CodeSource) returns Policy.UNSUPPORTED_EMPTY_COLLECTION, then this method returns the permissions contained 
inside the specified ProtectionDomain in a new PermissionCollection object. 

This method can be overridden if the policy implementation supports returning a set of permissions granted to a 
ProtectionDomain. 


    domain - the ProtectionDomain to which the returned PermissionCollection has been granted. 

    Returns: a set of permissions granted to the specified ProtectionDomain. If this operation is supported, the returned set of permissions 
             must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not 
             supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned. 

*java.security.Policy.getPolicy()*

public static |java.security.Policy| getPolicy()

Returns the installed Policy object. This value should not be cached, as it may be changed by a call to setPolicy. This method 
first calls SecurityManager.checkPermission with a SecurityPermission("getPolicy") permission to ensure it's ok to get the 
Policy object.. 



    Returns: the installed Policy. 

*java.security.Policy.getProvider()*

public |java.security.Provider| getProvider()

Return the Provider of this Policy. 

This Policy instance will only have a Provider if it was obtained via a call to Policy.getInstance. Otherwise this method 
returns null. 



    Returns: the Provider of this Policy, or null. 

*java.security.Policy.getType()*

public |java.lang.String| getType()

Return the type of this Policy. 

This Policy instance will only have a type if it was obtained via a call to Policy.getInstance. Otherwise this method returns 
null. 



    Returns: the type of this Policy, or null. 

*java.security.Policy.implies(ProtectionDomain,Permission)*

public boolean implies(
  java.security.ProtectionDomain domain,
  java.security.Permission permission)

Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted. 


    domain - the ProtectionDomain to test 
    permission - the Permission object to be tested for implication. 

    Returns: true if "permission" is a proper subset of a permission granted to this ProtectionDomain. 

*java.security.Policy.refresh()*

public void refresh()

Refreshes/reloads the policy configuration. The behavior of this method depends on the implementation. For example, calling 
refresh on a file-based policy will cause the file to be re-read. 

The default implementation of this method does nothing. This method should be overridden if a refresh operation is supported by 
the policy implementation. 



*java.security.Policy.setPolicy(Policy)*

public static void setPolicy(java.security.Policy p)

Sets the system-wide Policy object. This method first calls SecurityManager.checkPermission with a 
SecurityPermission("setPolicy") permission to ensure it's ok to set the Policy. 


    p - the new system Policy object. 


