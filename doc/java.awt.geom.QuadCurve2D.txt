*java.awt.geom.QuadCurve2D* *QuadCurve2D* The QuadCurve2D class defines a quadratic parametric curve
 segment in(x,y)coordinate 

public abstract class QuadCurve2D
  extends    |java.lang.Object|
  implements |java.awt.Shape|
             |java.lang.Cloneable|

|java.awt.geom.QuadCurve2D_Description|
|java.awt.geom.QuadCurve2D_Fields|
|java.awt.geom.QuadCurve2D_Constructors|
|java.awt.geom.QuadCurve2D_Methods|

================================================================================================================================

*java.awt.geom.QuadCurve2D_Constructors*
|java.awt.geom.QuadCurve2D()|This is an abstract class that cannot be instantiated directly.

*java.awt.geom.QuadCurve2D_Methods*
|java.awt.geom.QuadCurve2D.clone()|Creates a new object of the same class and with the same contents   as this object.
|java.awt.geom.QuadCurve2D.contains(double,double)|
|java.awt.geom.QuadCurve2D.contains(double,double,double,double)|
|java.awt.geom.QuadCurve2D.contains(Point2D)|
|java.awt.geom.QuadCurve2D.contains(Rectangle2D)|
|java.awt.geom.QuadCurve2D.getBounds()|
|java.awt.geom.QuadCurve2D.getCtrlPt()|Returns the control point.
|java.awt.geom.QuadCurve2D.getCtrlX()|Returns the X coordinate of the control point in   double precision.
|java.awt.geom.QuadCurve2D.getCtrlY()|Returns the Y coordinate of the control point in   double precision.
|java.awt.geom.QuadCurve2D.getFlatness()|Returns the flatness, or maximum distance of a  control point from the line connecting
|java.awt.geom.QuadCurve2D.getFlatness(double[],int)|Returns the flatness, or maximum distance of a  control point from the lin
|java.awt.geom.QuadCurve2D.getFlatness(double,double,double,double,double,double)|Returns the flatness, or maximum distance of 
|java.awt.geom.QuadCurve2D.getFlatnessSq()|Returns the square of the flatness, or maximum distance of a  control point from the
|java.awt.geom.QuadCurve2D.getFlatnessSq(double[],int)|Returns the square of the flatness, or maximum distance of a  control po
|java.awt.geom.QuadCurve2D.getFlatnessSq(double,double,double,double,double,double)|Returns the square of the flatness, or maxi
|java.awt.geom.QuadCurve2D.getP1()|Returns the start point.
|java.awt.geom.QuadCurve2D.getP2()|Returns the end point.
|java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform)|Returns an iteration object that defines the boundary of the  shape
|java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform,double)|Returns an iteration object that defines the boundary of the
|java.awt.geom.QuadCurve2D.getX1()|Returns the X coordinate of the start point in   double in precision.
|java.awt.geom.QuadCurve2D.getX2()|Returns the X coordinate of the end point in   double precision.
|java.awt.geom.QuadCurve2D.getY1()|Returns the Y coordinate of the start point in   double precision.
|java.awt.geom.QuadCurve2D.getY2()|Returns the Y coordinate of the end point in   double precision.
|java.awt.geom.QuadCurve2D.intersects(double,double,double,double)|
|java.awt.geom.QuadCurve2D.intersects(Rectangle2D)|
|java.awt.geom.QuadCurve2D.setCurve(double[],int)|Sets the location of the end points and control points of this   QuadCurve2D 
|java.awt.geom.QuadCurve2D.setCurve(double,double,double,double,double,double)|Sets the location of the end points and control 
|java.awt.geom.QuadCurve2D.setCurve(Point2D[],int)|Sets the location of the end points and control points of this  QuadCurve2D 
|java.awt.geom.QuadCurve2D.setCurve(Point2D,Point2D,Point2D)|Sets the location of the end points and control point of this  Qua
|java.awt.geom.QuadCurve2D.setCurve(QuadCurve2D)|Sets the location of the end points and control point of this   QuadCurve2D to
|java.awt.geom.QuadCurve2D.solveQuadratic(double[])|Solves the quadratic whose coefficients are in the eqn   array and places t
|java.awt.geom.QuadCurve2D.solveQuadratic(double[],double[])|Solves the quadratic whose coefficients are in the eqn   array and
|java.awt.geom.QuadCurve2D.subdivide(double[],int,double[],int,double[],int)|Subdivides the quadratic curve specified by the co
|java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D,QuadCurve2D)|Subdivides this QuadCurve2D and stores the resulting  two subdivi
|java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D,QuadCurve2D,QuadCurve2D)|Subdivides the quadratic curve specified by the src  

*java.awt.geom.QuadCurve2D_Description*

The QuadCurve2D class defines a quadratic parametric curve segment in(x,y)coordinate space. 

This class is only the abstract superclass for all objects that store a 2D quadratic curve segment. The actual storage 
representation of the coordinates is left to the subclass. 



*java.awt.geom.QuadCurve2D()*

protected QuadCurve2D()

This is an abstract class that cannot be instantiated directly. Type-specific implementation subclasses are available for 
instantiation and provide a number of formats for storing the information necessary to satisfy the various accessor methods 
below. 


*java.awt.geom.QuadCurve2D.clone()*

public |java.lang.Object| clone()

Creates a new object of the same class and with the same contents as this object. 



    Returns: a clone of this instance. 

*java.awt.geom.QuadCurve2D.contains(double,double)*

public boolean contains(
  double x,
  double y)





*java.awt.geom.QuadCurve2D.contains(double,double,double,double)*

public boolean contains(
  double x,
  double y,
  double w,
  double h)





*java.awt.geom.QuadCurve2D.contains(Point2D)*

public boolean contains(java.awt.geom.Point2D p)





*java.awt.geom.QuadCurve2D.contains(Rectangle2D)*

public boolean contains(java.awt.geom.Rectangle2D r)





*java.awt.geom.QuadCurve2D.getBounds()*

public |java.awt.Rectangle| getBounds()





*java.awt.geom.QuadCurve2D.getCtrlPt()*

public abstract |java.awt.geom.Point2D| getCtrlPt()

Returns the control point. 



    Returns: a Point2D that is the control point of this Point2D. 

*java.awt.geom.QuadCurve2D.getCtrlX()*

public abstract double getCtrlX()

Returns the X coordinate of the control point in double precision. 



    Returns: X coordinate the control point 

*java.awt.geom.QuadCurve2D.getCtrlY()*

public abstract double getCtrlY()

Returns the Y coordinate of the control point in double precision. 



    Returns: the Y coordinate of the control point. 

*java.awt.geom.QuadCurve2D.getFlatness()*

public double getFlatness()

Returns the flatness, or maximum distance of a control point from the line connecting the end points, of this QuadCurve2D. 



    Returns: the flatness of this QuadCurve2D. 

*java.awt.geom.QuadCurve2D.getFlatness(double[],int)*

public static double getFlatness(
  double[] coords,
  int offset)

Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve 
specified by the control points stored in the indicated array at the indicated index. 


    coords - an array containing coordinate values 
    offset - the index into coords from which to start getting the coordinate values 

    Returns: the flatness of a quadratic curve defined by the specified array at the specified offset. 

*java.awt.geom.QuadCurve2D.getFlatness(double,double,double,double,double,double)*

public static double getFlatness(
  double x1,
  double y1,
  double ctrlx,
  double ctrly,
  double x2,
  double y2)

Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve 
specified by the indicated control points. 


    x1 - the X coordinate of the start point 
    y1 - the Y coordinate of the start point 
    ctrlx - the X coordinate of the control point 
    ctrly - the Y coordinate of the control point 
    x2 - the X coordinate of the end point 
    y2 - the Y coordinate of the end point 

    Returns: the flatness of the quadratic curve defined by the specified coordinates. 

*java.awt.geom.QuadCurve2D.getFlatnessSq()*

public double getFlatnessSq()

Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of this 
QuadCurve2D. 



    Returns: the square of the flatness of this QuadCurve2D. 

*java.awt.geom.QuadCurve2D.getFlatnessSq(double[],int)*

public static double getFlatnessSq(
  double[] coords,
  int offset)

Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the 
quadratic curve specified by the control points stored in the indicated array at the indicated index. 


    coords - an array containing coordinate values 
    offset - the index into coords from which to to start getting the values from the array 

    Returns: the flatness of the quadratic curve that is defined by the values in the specified array at the specified index. 

*java.awt.geom.QuadCurve2D.getFlatnessSq(double,double,double,double,double,double)*

public static double getFlatnessSq(
  double x1,
  double y1,
  double ctrlx,
  double ctrly,
  double x2,
  double y2)

Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the 
quadratic curve specified by the indicated control points. 


    x1 - the X coordinate of the start point 
    y1 - the Y coordinate of the start point 
    ctrlx - the X coordinate of the control point 
    ctrly - the Y coordinate of the control point 
    x2 - the X coordinate of the end point 
    y2 - the Y coordinate of the end point 

    Returns: the square of the flatness of the quadratic curve defined by the specified coordinates. 

*java.awt.geom.QuadCurve2D.getP1()*

public abstract |java.awt.geom.Point2D| getP1()

Returns the start point. 



    Returns: a Point2D that is the start point of this QuadCurve2D. 

*java.awt.geom.QuadCurve2D.getP2()*

public abstract |java.awt.geom.Point2D| getP2()

Returns the end point. 



    Returns: a Point object that is the end point of this Point2D. 

*java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform)*

public |java.awt.geom.PathIterator| getPathIterator(java.awt.geom.AffineTransform at)

Returns an iteration object that defines the boundary of the shape of this QuadCurve2D. The iterator for this class is not 
multi-threaded safe, which means that this QuadCurve2D class does not guarantee that modifications to the geometry of this 
QuadCurve2D object do not affect any iterations of that geometry that are already in process. 


    at - an optional {@link AffineTransform} to apply to the shape boundary 

    Returns: a {@link PathIterator} object that defines the boundary of the shape. 

*java.awt.geom.QuadCurve2D.getPathIterator(AffineTransform,double)*

public |java.awt.geom.PathIterator| getPathIterator(
  java.awt.geom.AffineTransform at,
  double flatness)

Returns an iteration object that defines the boundary of the flattened shape of this QuadCurve2D. The iterator for this class 
is not multi-threaded safe, which means that this QuadCurve2D class does not guarantee that modifications to the geometry of 
this QuadCurve2D object do not affect any iterations of that geometry that are already in process. 


    at - an optional AffineTransform to apply to the boundary of the shape 
    flatness - the maximum distance that the control points for a subdivided curve can be with respect to a line connecting the end points of 
       this curve before this curve is replaced by a straight line connecting the end points. 

    Returns: a PathIterator object that defines the flattened boundary of the shape. 

*java.awt.geom.QuadCurve2D.getX1()*

public abstract double getX1()

Returns the X coordinate of the start point in double in precision. 



    Returns: the X coordinate of the start point. 

*java.awt.geom.QuadCurve2D.getX2()*

public abstract double getX2()

Returns the X coordinate of the end point in double precision. 



    Returns: the x coordiante of the end point. 

*java.awt.geom.QuadCurve2D.getY1()*

public abstract double getY1()

Returns the Y coordinate of the start point in double precision. 



    Returns: the Y coordinate of the start point. 

*java.awt.geom.QuadCurve2D.getY2()*

public abstract double getY2()

Returns the Y coordinate of the end point in double precision. 



    Returns: the Y coordinate of the end point. 

*java.awt.geom.QuadCurve2D.intersects(double,double,double,double)*

public boolean intersects(
  double x,
  double y,
  double w,
  double h)





*java.awt.geom.QuadCurve2D.intersects(Rectangle2D)*

public boolean intersects(java.awt.geom.Rectangle2D r)





*java.awt.geom.QuadCurve2D.setCurve(double[],int)*

public void setCurve(
  double[] coords,
  int offset)

Sets the location of the end points and control points of this QuadCurve2D to the double coordinates at the specified offset in 
the specified array. 


    coords - the array containing coordinate values 
    offset - the index into the array from which to start getting the coordinate values and assigning them to this QuadCurve2D 

*java.awt.geom.QuadCurve2D.setCurve(double,double,double,double,double,double)*

public abstract void setCurve(
  double x1,
  double y1,
  double ctrlx,
  double ctrly,
  double x2,
  double y2)

Sets the location of the end points and control point of this curve to the specified double coordinates. 


    x1 - the X coordinate of the start point 
    y1 - the Y coordinate of the start point 
    ctrlx - the X coordinate of the control point 
    ctrly - the Y coordinate of the control point 
    x2 - the X coordinate of the end point 
    y2 - the Y coordinate of the end point 

*java.awt.geom.QuadCurve2D.setCurve(Point2D[],int)*

public void setCurve(
  java.awt.geom.Point2D[] pts,
  int offset)

Sets the location of the end points and control points of this QuadCurve2D to the coordinates of the Point2D objects at the 
specified offset in the specified array. 


    pts - an array containing Point2D that define coordinate values 
    offset - the index into pts from which to start getting the coordinate values and assigning them to this QuadCurve2D 

*java.awt.geom.QuadCurve2D.setCurve(Point2D,Point2D,Point2D)*

public void setCurve(
  java.awt.geom.Point2D p1,
  java.awt.geom.Point2D cp,
  java.awt.geom.Point2D p2)

Sets the location of the end points and control point of this QuadCurve2D to the specified Point2D coordinates. 


    p1 - the start point 
    cp - the control point 
    p2 - the end point 

*java.awt.geom.QuadCurve2D.setCurve(QuadCurve2D)*

public void setCurve(java.awt.geom.QuadCurve2D c)

Sets the location of the end points and control point of this QuadCurve2D to the same as those in the specified QuadCurve2D. 


    c - the specified QuadCurve2D 

*java.awt.geom.QuadCurve2D.solveQuadratic(double[])*

public static int solveQuadratic(double[] eqn)

Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots back into the same array, 
returning the number of roots. The quadratic solved is represented by the equation: 

eqn = {C, B, A}; ax^2 + bx + c = 0 

A return value of -1 is used to distinguish a constant equation, which might be always 0 or never 0, from an equation that has 
no zeroes. 


    eqn - the array that contains the quadratic coefficients 

    Returns: the number of roots, or -1 if the equation is a constant 

*java.awt.geom.QuadCurve2D.solveQuadratic(double[],double[])*

public static int solveQuadratic(
  double[] eqn,
  double[] res)

Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots into the res array, returning the 
number of roots. The quadratic solved is represented by the equation: 

eqn = {C, B, A}; ax^2 + bx + c = 0 

A return value of -1 is used to distinguish a constant equation, which might be always 0 or never 0, from an equation that has 
no zeroes. 


    eqn - the specified array of coefficients to use to solve the quadratic equation 
    res - the array that contains the non-complex roots resulting from the solution of the quadratic equation 

    Returns: the number of roots, or -1 if the equation is a constant. 

*java.awt.geom.QuadCurve2D.subdivide(double[],int,double[],int,double[],int)*

public static void subdivide(
  double[] src,
  int srcoff,
  double[] left,
  int leftoff,
  double[] right,
  int rightoff)

Subdivides the quadratic curve specified by the coordinates stored in the src array at indices srcoff through srcoff+5 and 
stores the resulting two subdivided curves into the two result arrays at the corresponding indices. Either or both of the left 
and right arrays can be null or a reference to the same array and offset as the src array. Note that the last point in the 
first subdivided curve is the same as the first point in the second subdivided curve. Thus, it is possible to pass the same 
array for left and right and to use offsets such that rightoff equals leftoff + 4 in order to avoid allocating extra storage 
for this common point. 


    src - the array holding the coordinates for the source curve 
    srcoff - the offset into the array of the beginning of the the 6 source coordinates 
    left - the array for storing the coordinates for the first half of the subdivided curve 
    leftoff - the offset into the array of the beginning of the the 6 left coordinates 
    right - the array for storing the coordinates for the second half of the subdivided curve 
    rightoff - the offset into the array of the beginning of the the 6 right coordinates 

*java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D,QuadCurve2D)*

public void subdivide(
  java.awt.geom.QuadCurve2D left,
  java.awt.geom.QuadCurve2D right)

Subdivides this QuadCurve2D and stores the resulting two subdivided curves into the left and right curve parameters. Either or 
both of the left and right objects can be the same as this QuadCurve2D or null. 


    left - the QuadCurve2D object for storing the left or first half of the subdivided curve 
    right - the QuadCurve2D object for storing the right or second half of the subdivided curve 

*java.awt.geom.QuadCurve2D.subdivide(QuadCurve2D,QuadCurve2D,QuadCurve2D)*

public static void subdivide(
  java.awt.geom.QuadCurve2D src,
  java.awt.geom.QuadCurve2D left,
  java.awt.geom.QuadCurve2D right)

Subdivides the quadratic curve specified by the src parameter and stores the resulting two subdivided curves into the left and 
right curve parameters. Either or both of the left and right objects can be the same as the src object or null. 


    src - the quadratic curve to be subdivided 
    left - the QuadCurve2D object for storing the left or first half of the subdivided curve 
    right - the QuadCurve2D object for storing the right or second half of the subdivided curve 


