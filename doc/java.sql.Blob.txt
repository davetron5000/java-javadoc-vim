*java.sql.Blob* *Blob* The representation (mapping) in
 the JavaTM programming
 language of an SQL 
 BLOB value.

public interface interface Blob


|java.sql.Blob_Description|
|java.sql.Blob_Fields|
|java.sql.Blob_Constructors|
|java.sql.Blob_Methods|

================================================================================================================================

*java.sql.Blob_Methods*
|java.sql.Blob.free()|This method frees the Blob object and releases the resources that   it holds.
|java.sql.Blob.getBinaryStream()|Retrieves the BLOB value designated by this  Blob instance as a stream.
|java.sql.Blob.getBinaryStream(long,long)|Returns an InputStream object that contains a partial Blob value,   starting  with th
|java.sql.Blob.getBytes(long,int)|Retrieves all or part of the BLOB  value that this Blob object represents, as an array of  by
|java.sql.Blob.length()|Returns the number of bytes in the BLOB value  designated by this Blob object.
|java.sql.Blob.position(Blob,long)|Retrieves the byte position in the BLOB value  designated by this Blob object at which   pat
|java.sql.Blob.position(byte[],long)|Retrieves the byte position at which the specified byte array  pattern begins within the B
|java.sql.Blob.setBinaryStream(long)|Retrieves a stream that can be used to write to the BLOB   value that this Blob object rep
|java.sql.Blob.setBytes(long,byte[])|Writes the given array of bytes to the BLOB value that  this Blob object represents, start
|java.sql.Blob.setBytes(long,byte[],int,int)|Writes all or part of the given byte array to the  BLOB value that this Blob objec
|java.sql.Blob.truncate(long)|Truncates the BLOB value that this Blob  object represents to be len bytes in length.

*java.sql.Blob_Description*

The representation (mapping) in the JavaTM programming language of an SQL BLOB value. An SQL BLOB is a built-in type that 
stores a Binary Large Object as a column value in a row of a database table. By default drivers implement Blob using an SQL 
locator(BLOB), which means that a Blob object contains a logical pointer to the SQL BLOB data rather than the data itself. A 
Blob object is valid for the duration of the transaction in which is was created. 

Methods in the interfaces (|java.sql.ResultSet|) , (|java.sql.CallableStatement|) , and (|java.sql.PreparedStatement|) , such 
as getBlob and setBlob allow a programmer to access an SQL BLOB value. The Blob interface provides methods for getting the 
length of an SQL BLOB (Binary Large Object) value, for materializing a BLOB value on the client, and for determining the 
position of a pattern of bytes within a BLOB value. In addition, this interface has methods for updating a BLOB value. 

All methods on the Blob interface must be fully implemented if the JDBC driver supports the data type. 



*java.sql.Blob.free()*

public void free()
  throws |java.sql.SQLException|
         
This method frees the Blob object and releases the resources that it holds. The object is invalid once the free method is 
called. 

After free has been called, any attempt to invoke a method other than free will result in a SQLException being thrown. If free 
is called multiple times, the subsequent calls to free are treated as a no-op. 



*java.sql.Blob.getBinaryStream()*

public |java.io.InputStream| getBinaryStream()
  throws |java.sql.SQLException|
         
Retrieves the BLOB value designated by this Blob instance as a stream. 



    Returns: a stream containing the BLOB data 

*java.sql.Blob.getBinaryStream(long,long)*

public |java.io.InputStream| getBinaryStream(
  long pos,
  long length)
  throws |java.sql.SQLException|
         
Returns an InputStream object that contains a partial Blob value, starting with the byte specified by pos, which is length 
bytes in length. 


    pos - the offset to the first byte of the partial value to be retrieved. The first byte in the Blob is at position 1 
    length - the length in bytes of the partial value to be retrieved 

    Returns: InputStream through which the partial Blob value can be read. 

*java.sql.Blob.getBytes(long,int)*

public byte[] getBytes(
  long pos,
  int length)
  throws |java.sql.SQLException|
         
Retrieves all or part of the BLOB value that this Blob object represents, as an array of bytes. This byte array contains up to 
length consecutive bytes starting at position pos. 


    pos - the ordinal position of the first byte in the BLOB value to be extracted; the first byte is at position 1 
    length - the number of consecutive bytes to be copied; the value for length must be 0 or greater 

    Returns: a byte array containing up to length consecutive bytes from the BLOB value designated by this Blob object, starting with the 
             byte at position pos 

*java.sql.Blob.length()*

public long length()
  throws |java.sql.SQLException|
         
Returns the number of bytes in the BLOB value designated by this Blob object. 



    Returns: length of the BLOB in bytes 

*java.sql.Blob.position(Blob,long)*

public long position(
  java.sql.Blob pattern,
  long start)
  throws |java.sql.SQLException|
         
Retrieves the byte position in the BLOB value designated by this Blob object at which pattern begins. The search begins at 
position start. 


    pattern - the Blob object designating the BLOB value for which to search 
    start - the position in the BLOB value at which to begin searching; the first position is 1 

    Returns: the position at which the pattern begins, else -1 

*java.sql.Blob.position(byte[],long)*

public long position(
  byte[] pattern,
  long start)
  throws |java.sql.SQLException|
         
Retrieves the byte position at which the specified byte array pattern begins within the BLOB value that this Blob object 
represents. The search for pattern begins at position start. 


    pattern - the byte array for which to search 
    start - the position at which to begin searching; the first position is 1 

    Returns: the position at which the pattern appears, else -1 

*java.sql.Blob.setBinaryStream(long)*

public |java.io.OutputStream| setBinaryStream(long pos)
  throws |java.sql.SQLException|
         
Retrieves a stream that can be used to write to the BLOB value that this Blob object represents. The stream begins at position 
pos. The bytes written to the stream will overwrite the existing bytes in the Blob object starting at the position pos. If the 
end of the Blob value is reached while writing to the stream, then the length of the Blob value will be increased to accomodate 
the extra bytes. 

Note: If the value specified for pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC 
drivers may throw a SQLException while other drivers may support this operation. 


    pos - the position in the BLOB value at which to start writing; the first position is 1 

    Returns: a java.io.OutputStream object to which data can be written 

*java.sql.Blob.setBytes(long,byte[])*

public int setBytes(
  long pos,
  byte[] bytes)
  throws |java.sql.SQLException|
         
Writes the given array of bytes to the BLOB value that this Blob object represents, starting at position pos, and returns the 
number of bytes written. The array of bytes will overwrite the existing bytes in the Blob object starting at the position pos. 
If the end of the Blob value is reached while writing the array of bytes, then the length of the Blob value will be increased 
to accomodate the extra bytes. 

Note: If the value specified for pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC 
drivers may throw a SQLException while other drivers may support this operation. 


    pos - the position in the BLOB object at which to start writing; the first position is 1 
    bytes - the array of bytes to be written to the BLOB value that this Blob object represents 

    Returns: the number of bytes written 

*java.sql.Blob.setBytes(long,byte[],int,int)*

public int setBytes(
  long pos,
  byte[] bytes,
  int offset,
  int len)
  throws |java.sql.SQLException|
         
Writes all or part of the given byte array to the BLOB value that this Blob object represents and returns the number of bytes 
written. Writing starts at position pos in the BLOB value; len bytes from the given byte array are written. The array of bytes 
will overwrite the existing bytes in the Blob object starting at the position pos. If the end of the Blob value is reached 
while writing the array of bytes, then the length of the Blob value will be increased to accomodate the extra bytes. 

Note: If the value specified for pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC 
drivers may throw a SQLException while other drivers may support this operation. 


    pos - the position in the BLOB object at which to start writing; the first position is 1 
    bytes - the array of bytes to be written to this BLOB object 
    offset - the offset into the array bytes at which to start reading the bytes to be set 
    len - the number of bytes to be written to the BLOB value from the array of bytes bytes 

    Returns: the number of bytes written 

*java.sql.Blob.truncate(long)*

public void truncate(long len)
  throws |java.sql.SQLException|
         
Truncates the BLOB value that this Blob object represents to be len bytes in length. 

Note: If the value specified for pos is greater then the length+1 of the BLOB value then the behavior is undefined. Some JDBC 
drivers may throw a SQLException while other drivers may support this operation. 


    len - the length, in bytes, to which the BLOB value that this Blob object represents should be truncated 


