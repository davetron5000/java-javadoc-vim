*java.awt.Rectangle* *Rectangle* A Rectangle specifies an area in a coordinate space that is 
 enclosed by the Rectangle object'

public class Rectangle
  extends    |java.awt.geom.Rectangle2D|
  implements |java.awt.Shape|
             |java.io.Serializable|

|java.awt.Rectangle_Description|
|java.awt.Rectangle_Fields|
|java.awt.Rectangle_Constructors|
|java.awt.Rectangle_Methods|

================================================================================================================================

*java.awt.Rectangle_Fields*
|int_java.awt.Rectangle.height|
|int_java.awt.Rectangle.width|
|int_java.awt.Rectangle.x|
|int_java.awt.Rectangle.y|

*java.awt.Rectangle_Constructors*
|java.awt.Rectangle()|Constructs a new Rectangle whose upper-left corner   is at (0,0) in the coordinate space, and whose width
|java.awt.Rectangle(Dimension)|Constructs a new Rectangle whose top left corner is    (0,0) and whose width and height are spec
|java.awt.Rectangle(int,int)|Constructs a new Rectangle whose upper-left corner   is at (0,0) in the coordinate space, and whos
|java.awt.Rectangle(int,int,int,int)|Constructs a new Rectangle whose upper-left corner is   specified as(x,y)and whose width a
|java.awt.Rectangle(Point)|Constructs a new Rectangle whose upper-left corner is the    specified Point, and whose width and he
|java.awt.Rectangle(Point,Dimension)|Constructs a new Rectangle whose upper-left corner is   specified by thePointargument, and
|java.awt.Rectangle(Rectangle)|Constructs a new Rectangle, initialized to match   the values of the specified Rectangle.

*java.awt.Rectangle_Methods*
|java.awt.Rectangle.add(int,int)|Adds a point, specified by the integer argumentsnewx,newyto the bounds of thisRectangle.
|java.awt.Rectangle.add(Point)|Adds the specifiedPointto the bounds of thisRectangle.
|java.awt.Rectangle.add(Rectangle)|Adds a Rectangle to this Rectangle.
|java.awt.Rectangle.contains(int,int)|Checks whether or not this Rectangle contains the   point at the specified location(x,y).
|java.awt.Rectangle.contains(int,int,int,int)|Checks whether this Rectangle entirely contains   the Rectangle  at the specified
|java.awt.Rectangle.contains(Point)|Checks whether or not this Rectangle contains the   specified Point.
|java.awt.Rectangle.contains(Rectangle)|Checks whether or not this Rectangle entirely contains   the specified Rectangle.
|java.awt.Rectangle.createIntersection(Rectangle2D)|
|java.awt.Rectangle.createUnion(Rectangle2D)|
|java.awt.Rectangle.equals(Object)|Checks whether two rectangles are equal.
|java.awt.Rectangle.getBounds()|Gets the bounding Rectangle of this Rectangle.
|java.awt.Rectangle.getBounds2D()|
|java.awt.Rectangle.getHeight()|Returns the height of the bounding Rectangle in   double precision.
|java.awt.Rectangle.getLocation()|Returns the location of this Rectangle.
|java.awt.Rectangle.getSize()|Gets the size of this Rectangle, represented by   the returned Dimension.
|java.awt.Rectangle.getWidth()|Returns the width of the bounding Rectangle in   double precision.
|java.awt.Rectangle.getX()|Returns the X coordinate of the bounding Rectangle in   double precision.
|java.awt.Rectangle.getY()|Returns the Y coordinate of the bounding Rectangle in   double precision.
|java.awt.Rectangle.grow(int,int)|Resizes the Rectangle both horizontally and vertically.
|java.awt.Rectangle.inside(int,int)|Checks whether or not this Rectangle contains the   point at the specified location(X,Y).
|java.awt.Rectangle.intersection(Rectangle)|Computes the intersection of this Rectangle with the   specified Rectangle.
|java.awt.Rectangle.intersects(Rectangle)|Determines whether or not this Rectangle and the specified   Rectangle intersect.
|java.awt.Rectangle.isEmpty()|
|java.awt.Rectangle.move(int,int)|Moves this Rectangle to the specified location.
|java.awt.Rectangle.outcode(double,double)|
|java.awt.Rectangle.reshape(int,int,int,int)|Sets the bounding Rectangle of this   Rectangle to the specified   x, y, width,   
|java.awt.Rectangle.resize(int,int)|Sets the size of this Rectangle to the specified   width and height.
|java.awt.Rectangle.setBounds(int,int,int,int)|Sets the bounding Rectangle of this   Rectangle to the specified   x, y, width, 
|java.awt.Rectangle.setBounds(Rectangle)|Sets the bounding Rectangle of this Rectangle   to match the specified Rectangle.
|java.awt.Rectangle.setLocation(int,int)|Moves this Rectangle to the specified location.
|java.awt.Rectangle.setLocation(Point)|Moves this Rectangle to the specified location.
|java.awt.Rectangle.setRect(double,double,double,double)|Sets the bounds of thisRectangleto the integer bounds  which encompass
|java.awt.Rectangle.setSize(Dimension)|Sets the size of this Rectangle to match the   specified Dimension.
|java.awt.Rectangle.setSize(int,int)|Sets the size of this Rectangle to the specified   width and height.
|java.awt.Rectangle.toString()|Returns a String representing this   Rectangle and its values.
|java.awt.Rectangle.translate(int,int)|Translates this Rectangle the indicated distance,  to the right along the X coordinate a
|java.awt.Rectangle.union(Rectangle)|Computes the union of this Rectangle with the   specified Rectangle.

*java.awt.Rectangle_Description*

A Rectangle specifies an area in a coordinate space that is enclosed by the Rectangle object's upper-left point(x,y)in the 
coordinate space, its width, and its height. 

A Rectangle object's width and height are public fields. The constructors that create a Rectangle, and the methods that can 
modify one, do not prevent setting a negative value for width or height. 

ARectanglewhose width or height is exactly zero has location along those axes with zero dimension, but is otherwise considered 
empty. The (|java.awt.Rectangle|) method will return true for such aRectangle. Methods which test if an emptyRectanglecontains 
or intersects a point or rectangle will always return false if either dimension is zero. Methods which combine such 
aRectanglewith a point or rectangle will include the location of theRectangleon that axis in the result as if the 
(|java.awt.Rectangle|) method were being called. 



ARectanglewhose width or height is negative has neither location nor dimension along those axes with negative dimensions. Such 
aRectangleis treated as non-existant along those axes. Such aRectangleis also empty with respect to containment calculations 
and methods which test if it contains or intersects a point or rectangle will always return false. Methods which combine such 
aRectanglewith a point or rectangle will ignore theRectangleentirely in generating the result. If twoRectangleobjects are 
combined and each has a negative dimension, the result will have at least one negative dimension. 

Methods which affect only the location of aRectanglewill operate on its location regardless of whether or not it has a negative 
or zero dimension along either axis. 

Note that aRectangleconstructed with the default no-argument constructor will have dimensions of0x0and therefore be empty. 
ThatRectanglewill still have a location of(0,0)and will contribute that location to the union and add operations. Code 
attempting to accumulate the bounds of a set of points should therefore initially construct theRectanglewith a specifically 
negative width and height or it should use the first point in the set to construct theRectangle. For example: 

Rectangle bounds = new Rectangle(0, 0, -1, -1); for (int i = 0; i This class uses 32-bit integers to store its location and 
dimensions. Frequently operations may produce a result that exceeds the range of a 32-bit integer. The methods will calculate 
their results in a way that avoids any 32-bit overflow for intermediate results and then choose the best representation to 
store the final results back into the 32-bit fields which hold the location and dimensions. The location of the result will be 
stored into the (|java.awt.Rectangle|) and (|java.awt.Rectangle|) fields by clipping the true result to the nearest 32-bit 
value. The values stored into the (|java.awt.Rectangle|) and (|java.awt.Rectangle|) dimension fields will be chosen as the 
32-bit values that encompass the largest part of the true result as possible. Generally this means that the dimension will be 
clipped independently to the range of 32-bit integers except that if the location had to be moved to store it into its pair of 
32-bit fields then the dimensions will be adjusted relative to the "best representation" of the location. If the true result 
had a negative dimension and was therefore non-existant along one or both axes, the stored dimensions will be negative numbers 
in those axes. If the true result had a location that could be represented within the range of 32-bit integers, but zero 
dimension along one or both axes, then the stored dimensions will be zero in those axes. 



*int_java.awt.Rectangle.height*

The height of the Rectangle. 


*int_java.awt.Rectangle.width*

The width of the Rectangle. 


*int_java.awt.Rectangle.x*

The X coordinate of the upper-left corner of the Rectangle. 


*int_java.awt.Rectangle.y*

The Y coordinate of the upper-left corner of the Rectangle. 



*java.awt.Rectangle()*

public Rectangle()

Constructs a new Rectangle whose upper-left corner is at (0,0) in the coordinate space, and whose width and height are both 
zero. 


*java.awt.Rectangle(Dimension)*

public Rectangle(java.awt.Dimension d)

Constructs a new Rectangle whose top left corner is (0,0) and whose width and height are specified by the Dimension argument. 

    d - a Dimension, specifying width and height 

*java.awt.Rectangle(int,int)*

public Rectangle(
  int width,
  int height)

Constructs a new Rectangle whose upper-left corner is at (0,0) in the coordinate space, and whose width and height are 
specified by the arguments of the same name. 

    width - the width of the Rectangle 
    height - the height of the Rectangle 

*java.awt.Rectangle(int,int,int,int)*

public Rectangle(
  int x,
  int y,
  int width,
  int height)

Constructs a new Rectangle whose upper-left corner is specified as(x,y)and whose width and height are specified by the 
arguments of the same name. 

    x - the specified X coordinate 
    y - the specified Y coordinate 
    width - the width of the Rectangle 
    height - the height of the Rectangle 

*java.awt.Rectangle(Point)*

public Rectangle(java.awt.Point p)

Constructs a new Rectangle whose upper-left corner is the specified Point, and whose width and height are both zero. 

    p - a Point that is the top left corner of the Rectangle 

*java.awt.Rectangle(Point,Dimension)*

public Rectangle(
  java.awt.Point p,
  java.awt.Dimension d)

Constructs a new Rectangle whose upper-left corner is specified by the (|java.awt.Point|) argument, and whose width and height 
are specified by the (|java.awt.Dimension|) argument. 

    p - a Point that is the upper-left corner of the Rectangle 
    d - a Dimension, representing the width and height of the Rectangle 

*java.awt.Rectangle(Rectangle)*

public Rectangle(java.awt.Rectangle r)

Constructs a new Rectangle, initialized to match the values of the specified Rectangle. 

    r - the Rectangle from which to copy initial values to a newly constructed Rectangle 

*java.awt.Rectangle.add(int,int)*

public void add(
  int newx,
  int newy)

Adds a point, specified by the integer argumentsnewx,newyto the bounds of thisRectangle. 

If thisRectanglehas any dimension less than zero, the rules for non-existant rectangles apply. In that case, the new bounds of 
thisRectanglewill have a location equal to the specified coordinates and width and height equal to zero. 

After adding a point, a call to contains with the added point as an argument does not necessarily return true. The contains 
method does not return true for points on the right or bottom edges of a Rectangle. Therefore, if the added point falls on the 
right or bottom edge of the enlarged Rectangle, contains returns false for that point. If the specified point must be contained 
within the newRectangle, a 1x1 rectangle should be added instead: 

r.add(newx, newy, 1, 1); 


    newx - the X coordinate of the new point 
    newy - the Y coordinate of the new point 

*java.awt.Rectangle.add(Point)*

public void add(java.awt.Point pt)

Adds the specifiedPointto the bounds of thisRectangle. 

If thisRectanglehas any dimension less than zero, the rules for non-existant rectangles apply. In that case, the new bounds of 
thisRectanglewill have a location equal to the coordinates of the specifiedPointand width and height equal to zero. 

After adding a Point, a call to contains with the added Point as an argument does not necessarily return true. The contains 
method does not return true for points on the right or bottom edges of a Rectangle. Therefore if the added Point falls on the 
right or bottom edge of the enlarged Rectangle, contains returns false for that Point. If the specified point must be contained 
within the newRectangle, a 1x1 rectangle should be added instead: 

r.add(pt.x, pt.y, 1, 1); 


    pt - the new Point to add to this Rectangle 

*java.awt.Rectangle.add(Rectangle)*

public void add(java.awt.Rectangle r)

Adds a Rectangle to this Rectangle. The resulting Rectangle is the union of the two rectangles. 

If eitherRectanglehas any dimension less than 0, the result will have the dimensions of the otherRectangle. If bothRectangles 
have at least one dimension less than 0, the result will have at least one dimension less than 0. 

If eitherRectanglehas one or both dimensions equal to 0, the result along those axes with 0 dimensions will be equivalent to 
the results obtained by adding the corresponding origin coordinate to the result rectangle along that axis, similar to the 
operation of the (|java.awt.Rectangle|) method, but contribute no further dimension beyond that. 

If the resultingRectanglewould have a dimension too large to be expressed as anint, the result will have a dimension 
ofInteger.MAX_VALUEalong that dimension. 


    r - the specified Rectangle 

*java.awt.Rectangle.contains(int,int)*

public boolean contains(
  int x,
  int y)

Checks whether or not this Rectangle contains the point at the specified location(x,y). 


    x - the specified X coordinate 
    y - the specified Y coordinate 

    Returns: true if the point {@code (x,y)} is inside this Rectangle; false otherwise. 

*java.awt.Rectangle.contains(int,int,int,int)*

public boolean contains(
  int X,
  int Y,
  int W,
  int H)

Checks whether this Rectangle entirely contains the Rectangle at the specified location(X,Y)with the specified dimensions(W,H). 


    X - the specified X coordinate 
    Y - the specified Y coordinate 
    W - the width of the Rectangle 
    H - the height of the Rectangle 

    Returns: true if the Rectangle specified by {@code (X, Y, W, H)} is entirely enclosed inside this Rectangle; false otherwise. 

*java.awt.Rectangle.contains(Point)*

public boolean contains(java.awt.Point p)

Checks whether or not this Rectangle contains the specified Point. 


    p - the Point to test 

    Returns: true if the specified Point is inside this Rectangle; false otherwise. 

*java.awt.Rectangle.contains(Rectangle)*

public boolean contains(java.awt.Rectangle r)

Checks whether or not this Rectangle entirely contains the specified Rectangle. 


    r - the specified Rectangle 

    Returns: true if the Rectangle is contained entirely inside this Rectangle; false otherwise 

*java.awt.Rectangle.createIntersection(Rectangle2D)*

public |java.awt.geom.Rectangle2D| createIntersection(java.awt.geom.Rectangle2D r)





*java.awt.Rectangle.createUnion(Rectangle2D)*

public |java.awt.geom.Rectangle2D| createUnion(java.awt.geom.Rectangle2D r)





*java.awt.Rectangle.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks whether two rectangles are equal. 

The result is true if and only if the argument is not null and is a Rectangle object that has the same upper-left corner, 
width, and height as this Rectangle. 


    obj - the Object to compare with this Rectangle 

    Returns: true if the objects are equal; false otherwise. 

*java.awt.Rectangle.getBounds()*

public |java.awt.Rectangle| getBounds()

Gets the bounding Rectangle of this Rectangle. 

This method is included for completeness, to parallel the getBounds method of (|java.awt.Component|) . 



    Returns: a new Rectangle, equal to the bounding Rectangle for this Rectangle. 

*java.awt.Rectangle.getBounds2D()*

public |java.awt.geom.Rectangle2D| getBounds2D()





*java.awt.Rectangle.getHeight()*

public double getHeight()

Returns the height of the bounding Rectangle in double precision. 



    Returns: the height of the bounding Rectangle. 

*java.awt.Rectangle.getLocation()*

public |java.awt.Point| getLocation()

Returns the location of this Rectangle. 

This method is included for completeness, to parallel the getLocation method of Component. 



    Returns: the Point that is the upper-left corner of this Rectangle. 

*java.awt.Rectangle.getSize()*

public |java.awt.Dimension| getSize()

Gets the size of this Rectangle, represented by the returned Dimension. 

This method is included for completeness, to parallel the getSize method of Component. 



    Returns: a Dimension, representing the size of this Rectangle. 

*java.awt.Rectangle.getWidth()*

public double getWidth()

Returns the width of the bounding Rectangle in double precision. 



    Returns: the width of the bounding Rectangle. 

*java.awt.Rectangle.getX()*

public double getX()

Returns the X coordinate of the bounding Rectangle in double precision. 



    Returns: the X coordinate of the bounding Rectangle. 

*java.awt.Rectangle.getY()*

public double getY()

Returns the Y coordinate of the bounding Rectangle in double precision. 



    Returns: the Y coordinate of the bounding Rectangle. 

*java.awt.Rectangle.grow(int,int)*

public void grow(
  int h,
  int v)

Resizes the Rectangle both horizontally and vertically. 

This method modifies the Rectangle so that it is h units larger on both the left and right side, and v units larger at both the 
top and bottom. 

The new Rectangle has(x - h, y - v)as its upper-left corner, width of(width + 2h), and a height of(height + 2v). 

If negative values are supplied for h and v, the size of the Rectangle decreases accordingly. Thegrowmethod will check for 
integer overflow and underflow, but does not check whether the resulting values ofwidthandheightgrow from negative to 
non-negative or shrink from non-negative to negative. 


    h - the horizontal expansion 
    v - the vertical expansion 

*java.awt.Rectangle.inside(int,int)*

public boolean inside(
  int X,
  int Y)

Checks whether or not this Rectangle contains the point at the specified location(X,Y). 

    Deprecated: As of JDK version 1.1,
 replaced by <code>contains(int, int)</code>.

    X - the specified X coordinate 
    Y - the specified Y coordinate 

    Returns: true if the point {@code (X,Y)} is inside this Rectangle; false otherwise. 

*java.awt.Rectangle.intersection(Rectangle)*

public |java.awt.Rectangle| intersection(java.awt.Rectangle r)

Computes the intersection of this Rectangle with the specified Rectangle. Returns a new Rectangle that represents the 
intersection of the two rectangles. If the two rectangles do not intersect, the result will be an empty rectangle. 


    r - the specified Rectangle 

    Returns: the largest Rectangle contained in both the specified Rectangle and in this Rectangle; or if the rectangles do not intersect, 
             an empty rectangle. 

*java.awt.Rectangle.intersects(Rectangle)*

public boolean intersects(java.awt.Rectangle r)

Determines whether or not this Rectangle and the specified Rectangle intersect. Two rectangles intersect if their intersection 
is nonempty. 


    r - the specified Rectangle 

    Returns: true if the specified Rectangle and this Rectangle intersect; false otherwise. 

*java.awt.Rectangle.isEmpty()*

public boolean isEmpty()





*java.awt.Rectangle.move(int,int)*

public void move(
  int x,
  int y)

Moves this Rectangle to the specified location. 

    Deprecated: As of JDK version 1.1,
 replaced by <code>setLocation(int, int)</code>.

    x - the X coordinate of the new location 
    y - the Y coordinate of the new location 

*java.awt.Rectangle.outcode(double,double)*

public int outcode(
  double x,
  double y)





*java.awt.Rectangle.reshape(int,int,int,int)*

public void reshape(
  int x,
  int y,
  int width,
  int height)

Sets the bounding Rectangle of this Rectangle to the specified x, y, width, and height. 

    Deprecated: As of JDK version 1.1,
 replaced by <code>setBounds(int, int, int, int)</code>.

    x - the new X coordinate for the upper-left corner of this Rectangle 
    y - the new Y coordinate for the upper-left corner of this Rectangle 
    width - the new width for this Rectangle 
    height - the new height for this Rectangle 

*java.awt.Rectangle.resize(int,int)*

public void resize(
  int width,
  int height)

Sets the size of this Rectangle to the specified width and height. 

    Deprecated: As of JDK version 1.1,
 replaced by <code>setSize(int, int)</code>.

    width - the new width for this Rectangle 
    height - the new height for this Rectangle 

*java.awt.Rectangle.setBounds(int,int,int,int)*

public void setBounds(
  int x,
  int y,
  int width,
  int height)

Sets the bounding Rectangle of this Rectangle to the specified x, y, width, and height. 

This method is included for completeness, to parallel the setBounds method of Component. 


    x - the new X coordinate for the upper-left corner of this Rectangle 
    y - the new Y coordinate for the upper-left corner of this Rectangle 
    width - the new width for this Rectangle 
    height - the new height for this Rectangle 

*java.awt.Rectangle.setBounds(Rectangle)*

public void setBounds(java.awt.Rectangle r)

Sets the bounding Rectangle of this Rectangle to match the specified Rectangle. 

This method is included for completeness, to parallel the setBounds method of Component. 


    r - the specified Rectangle 

*java.awt.Rectangle.setLocation(int,int)*

public void setLocation(
  int x,
  int y)

Moves this Rectangle to the specified location. 

This method is included for completeness, to parallel the setLocation method of Component. 


    x - the X coordinate of the new location 
    y - the Y coordinate of the new location 

*java.awt.Rectangle.setLocation(Point)*

public void setLocation(java.awt.Point p)

Moves this Rectangle to the specified location. 

This method is included for completeness, to parallel the setLocation method of Component. 


    p - the Point specifying the new location for this Rectangle 

*java.awt.Rectangle.setRect(double,double,double,double)*

public void setRect(
  double x,
  double y,
  double width,
  double height)

Sets the bounds of thisRectangleto the integer bounds which encompass the specifiedx,y,width, andheight. If the parameters 
specify aRectanglethat exceeds the maximum range of integers, the result will be the best representation of the 
specifiedRectangleintersected with the maximum integer bounds. 


    x - the X coordinate of the upper-left corner of the specified rectangle 
    y - the Y coordinate of the upper-left corner of the specified rectangle 
    width - the width of the specified rectangle 
    height - the new height of the specified rectangle 

*java.awt.Rectangle.setSize(Dimension)*

public void setSize(java.awt.Dimension d)

Sets the size of this Rectangle to match the specified Dimension. 

This method is included for completeness, to parallel the setSize method of Component. 


    d - the new size for the Dimension object 

*java.awt.Rectangle.setSize(int,int)*

public void setSize(
  int width,
  int height)

Sets the size of this Rectangle to the specified width and height. 

This method is included for completeness, to parallel the setSize method of Component. 


    width - the new width for this Rectangle 
    height - the new height for this Rectangle 

*java.awt.Rectangle.toString()*

public |java.lang.String| toString()

Returns a String representing this Rectangle and its values. 



    Returns: a String representing this Rectangle object's coordinate and size values. 

*java.awt.Rectangle.translate(int,int)*

public void translate(
  int dx,
  int dy)

Translates this Rectangle the indicated distance, to the right along the X coordinate axis, and downward along the Y coordinate 
axis. 


    dx - the distance to move this Rectangle along the X axis 
    dy - the distance to move this Rectangle along the Y axis 

*java.awt.Rectangle.union(Rectangle)*

public |java.awt.Rectangle| union(java.awt.Rectangle r)

Computes the union of this Rectangle with the specified Rectangle. Returns a new Rectangle that represents the union of the two 
rectangles. 

If eitherRectanglehas any dimension less than zero the rules for non-existant rectangles apply. If only one has a dimension 
less than zero, then the result will be a copy of the otherRectangle. If both have dimension less than zero, then the result 
will have at least one dimension less than zero. 

If the resultingRectanglewould have a dimension too large to be expressed as anint, the result will have a dimension 
ofInteger.MAX_VALUEalong that dimension. 


    r - the specified Rectangle 

    Returns: the smallest Rectangle containing both the specified Rectangle and this Rectangle. 


