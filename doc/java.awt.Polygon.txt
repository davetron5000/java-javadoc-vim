*java.awt.Polygon* *Polygon* The Polygon class encapsulates a description of a 
 closed, two-dimensional region within a coordin

public class Polygon
  extends    |java.lang.Object|
  implements |java.awt.Shape|
             |java.io.Serializable|

|java.awt.Polygon_Description|
|java.awt.Polygon_Fields|
|java.awt.Polygon_Constructors|
|java.awt.Polygon_Methods|

================================================================================================================================

*java.awt.Polygon_Fields*
|java.awt.Rectangle_java.awt.Polygon.bounds|
|int_java.awt.Polygon.npoints|
|int[]_java.awt.Polygon.xpoints|
|int[]_java.awt.Polygon.ypoints|

*java.awt.Polygon_Constructors*
|java.awt.Polygon()|Creates an empty polygon.
|java.awt.Polygon(int[],int[],int)|Constructs and initializes a Polygon from the specified   parameters.

*java.awt.Polygon_Methods*
|java.awt.Polygon.addPoint(int,int)|Appends the specified coordinates to this Polygon.
|java.awt.Polygon.contains(double,double)|
|java.awt.Polygon.contains(double,double,double,double)|
|java.awt.Polygon.contains(int,int)|Determines whether the specified coordinates are inside this   Polygon.
|java.awt.Polygon.contains(Point)|Determines whether the specifiedPointis inside this   Polygon.
|java.awt.Polygon.contains(Point2D)|
|java.awt.Polygon.contains(Rectangle2D)|
|java.awt.Polygon.getBoundingBox()|Returns the bounds of this Polygon.
|java.awt.Polygon.getBounds()|Gets the bounding box of this Polygon.
|java.awt.Polygon.getBounds2D()|
|java.awt.Polygon.getPathIterator(AffineTransform)|Returns an iterator object that iterates along the boundary of this   Polygo
|java.awt.Polygon.getPathIterator(AffineTransform,double)|Returns an iterator object that iterates along the boundary of  the S
|java.awt.Polygon.inside(int,int)|Determines whether the specified coordinates are contained in this   Polygon.
|java.awt.Polygon.intersects(double,double,double,double)|
|java.awt.Polygon.intersects(Rectangle2D)|
|java.awt.Polygon.invalidate()|Invalidates or flushes any internally-cached data that depends  on the vertex coordinates of thi
|java.awt.Polygon.reset()|Resets this Polygon object to an empty polygon.
|java.awt.Polygon.translate(int,int)|Translates the vertices of the Polygon by   deltaX along the x axis and by   deltaY along 

*java.awt.Polygon_Description*

The Polygon class encapsulates a description of a closed, two-dimensional region within a coordinate space. This region is 
bounded by an arbitrary number of line segments, each of which is one side of the polygon. Internally, a polygon comprises of a 
list of(x,y)coordinate pairs, where each pair defines a vertex of the polygon, and two successive pairs are the endpoints of a 
line that is a side of the polygon. The first and final pairs of(x,y)points are joined by a line segment that closes the 
polygon. This Polygon is defined with an even-odd winding rule. See WIND_EVEN_ODD(|java.awt.geom.PathIterator|) for a 
definition of the even-odd winding rule. This class's hit-testing methods, which include the contains, intersects and inside 
methods, use the insideness definition described in the (|java.awt.Shape|) class comments. 



*java.awt.Rectangle_java.awt.Polygon.bounds*

The bounds of thisPolygon. This value can be null. 


*int_java.awt.Polygon.npoints*

The total number of points. The value of npoints represents the number of valid points in this Polygon and might be less than 
the number of elements in xpoints(|java.awt.Polygon|) or ypoints(|java.awt.Polygon|) . This value can be NULL. 


*int[]_java.awt.Polygon.xpoints*

The array of X coordinates. The number of elements in this array might be more than the number of X coordinates in this 
Polygon. The extra elements allow new points to be added to this Polygon without re-creating this array. The value of 
npoints(|java.awt.Polygon|) is equal to the number of valid points in this Polygon. 


*int[]_java.awt.Polygon.ypoints*

The array of Y coordinates. The number of elements in this array might be more than the number of Y coordinates in this 
Polygon. The extra elements allow new points to be added to this Polygon without re-creating this array. The value of npoints 
is equal to the number of valid points in this Polygon. 



*java.awt.Polygon()*

public Polygon()

Creates an empty polygon. 


*java.awt.Polygon(int[],int[],int)*

public Polygon(
  int[] xpoints,
  int[] ypoints,
  int npoints)

Constructs and initializes a Polygon from the specified parameters. 

    xpoints - an array of X coordinates 
    ypoints - an array of Y coordinates 
    npoints - the total number of points in the Polygon 

*java.awt.Polygon.addPoint(int,int)*

public void addPoint(
  int x,
  int y)

Appends the specified coordinates to this Polygon. 

If an operation that calculates the bounding box of this Polygon has already been performed, such as getBounds or contains, 
then this method updates the bounding box. 


    x - the specified X coordinate 
    y - the specified Y coordinate 

*java.awt.Polygon.contains(double,double)*

public boolean contains(
  double x,
  double y)





*java.awt.Polygon.contains(double,double,double,double)*

public boolean contains(
  double x,
  double y,
  double w,
  double h)





*java.awt.Polygon.contains(int,int)*

public boolean contains(
  int x,
  int y)

Determines whether the specified coordinates are inside this Polygon. 


    x - the specified X coordinate to be tested 
    y - the specified Y coordinate to be tested 

    Returns: {@code true} if this {@code Polygon} contains the specified coordinates {@code (x,y)}; {@code false} otherwise. 

*java.awt.Polygon.contains(Point)*

public boolean contains(java.awt.Point p)

Determines whether the specified (|java.awt.Point|) is inside this Polygon. 


    p - the specified Point to be tested 

    Returns: true if the Polygon contains the Point; false otherwise. 

*java.awt.Polygon.contains(Point2D)*

public boolean contains(java.awt.geom.Point2D p)





*java.awt.Polygon.contains(Rectangle2D)*

public boolean contains(java.awt.geom.Rectangle2D r)





*java.awt.Polygon.getBoundingBox()*

public |java.awt.Rectangle| getBoundingBox()

Returns the bounds of this Polygon. 

    Deprecated: As of JDK version 1.1,
 replaced by <code>getBounds()</code>.


    Returns: the bounds of this Polygon. 

*java.awt.Polygon.getBounds()*

public |java.awt.Rectangle| getBounds()

Gets the bounding box of this Polygon. The bounding box is the smallest (|java.awt.Rectangle|) whose sides are parallel to the 
x and y axes of the coordinate space, and can completely contain the Polygon. 



    Returns: a Rectangle that defines the bounds of this Polygon. 

*java.awt.Polygon.getBounds2D()*

public |java.awt.geom.Rectangle2D| getBounds2D()





*java.awt.Polygon.getPathIterator(AffineTransform)*

public |java.awt.geom.PathIterator| getPathIterator(java.awt.geom.AffineTransform at)

Returns an iterator object that iterates along the boundary of this Polygon and provides access to the geometry of the outline 
of this Polygon. An optional (|java.awt.geom.AffineTransform|) can be specified so that the coordinates returned in the 
iteration are transformed accordingly. 


    at - an optional AffineTransform to be applied to the coordinates as they are returned in the iteration, or null if untransformed 
       coordinates are desired 

    Returns: a {@link PathIterator} object that provides access to the geometry of this Polygon. 

*java.awt.Polygon.getPathIterator(AffineTransform,double)*

public |java.awt.geom.PathIterator| getPathIterator(
  java.awt.geom.AffineTransform at,
  double flatness)

Returns an iterator object that iterates along the boundary of the Shape and provides access to the geometry of the outline of 
the Shape. Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are returned by the iterator. Since polygons are already 
flat, the flatness parameter is ignored. An optional AffineTransform can be specified in which case the coordinates returned in 
the iteration are transformed accordingly. 


    at - an optional AffineTransform to be applied to the coordinates as they are returned in the iteration, or null if untransformed 
       coordinates are desired 
    flatness - the maximum amount that the control points for a given curve can vary from colinear before a subdivided curve is replaced by a 
       straight line connecting the endpoints. Since polygons are already flat the flatness parameter is ignored. 

    Returns: a PathIterator object that provides access to the Shape object's geometry. 

*java.awt.Polygon.inside(int,int)*

public boolean inside(
  int x,
  int y)

Determines whether the specified coordinates are contained in this Polygon. 

    Deprecated: As of JDK version 1.1,
 replaced by <code>contains(int, int)</code>.

    x - the specified X coordinate to be tested 
    y - the specified Y coordinate to be tested 

    Returns: {@code true} if this {@code Polygon} contains the specified coordinates {@code (x,y)}; {@code false} otherwise. 

*java.awt.Polygon.intersects(double,double,double,double)*

public boolean intersects(
  double x,
  double y,
  double w,
  double h)





*java.awt.Polygon.intersects(Rectangle2D)*

public boolean intersects(java.awt.geom.Rectangle2D r)





*java.awt.Polygon.invalidate()*

public void invalidate()

Invalidates or flushes any internally-cached data that depends on the vertex coordinates of this Polygon. This method should be 
called after any direct manipulation of the coordinates in the xpoints or ypoints arrays to avoid inconsistent results from 
methods such as getBounds or contains that might cache data from earlier computations relating to the vertex coordinates. 



*java.awt.Polygon.reset()*

public void reset()

Resets this Polygon object to an empty polygon. The coordinate arrays and the data in them are left untouched but the number of 
points is reset to zero to mark the old vertex data as invalid and to start accumulating new vertex data at the beginning. All 
internally-cached data relating to the old vertices are discarded. Note that since the coordinate arrays from before the reset 
are reused, creating a new empty Polygon might be more memory efficient than resetting the current one if the number of 
vertices in the new polygon data is significantly smaller than the number of vertices in the data from before the reset. 



*java.awt.Polygon.translate(int,int)*

public void translate(
  int deltaX,
  int deltaY)

Translates the vertices of the Polygon by deltaX along the x axis and by deltaY along the y axis. 


    deltaX - the amount to translate along the X axis 
    deltaY - the amount to translate along the Y axis 


