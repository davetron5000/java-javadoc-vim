*java.net.NetworkInterface* *NetworkInterface* This class represents a Network Interface made up of a name, 
 and a list of IP a

public final class NetworkInterface
  extends    |java.lang.Object|

|java.net.NetworkInterface_Description|
|java.net.NetworkInterface_Fields|
|java.net.NetworkInterface_Constructors|
|java.net.NetworkInterface_Methods|

================================================================================================================================

*java.net.NetworkInterface_Methods*
|java.net.NetworkInterface.equals(Object)|Compares this object against the specified object.
|java.net.NetworkInterface.getByInetAddress(InetAddress)|Convenience method to search for a network interface that  has the spe
|java.net.NetworkInterface.getByName(String)|Searches for the network interface with the specified name.
|java.net.NetworkInterface.getDisplayName()|Get the display name of this network interface.
|java.net.NetworkInterface.getHardwareAddress()|Returns the hardware address (usually MAC) of the interface if it  has one and 
|java.net.NetworkInterface.getInetAddresses()|Convenience method to return an Enumeration with all or a  subset of the InetAddr
|java.net.NetworkInterface.getInterfaceAddresses()|Get a List of all or a subset of the InterfaceAddresses  of this network int
|java.net.NetworkInterface.getMTU()|Returns the Maximum Transmission Unit (MTU) of this interface.
|java.net.NetworkInterface.getName()|Get the name of this network interface.
|java.net.NetworkInterface.getNetworkInterfaces()|Returns all the interfaces on this machine.
|java.net.NetworkInterface.getParent()|Returns the parent NetworkInterface of this interface if this is  a subinterface, or nul
|java.net.NetworkInterface.getSubInterfaces()|Get an Enumeration with all the subinterfaces (also known as virtual  interfaces)
|java.net.NetworkInterface.hashCode()|
|java.net.NetworkInterface.isLoopback()|Returns whether a network interface is a loopback interface.
|java.net.NetworkInterface.isPointToPoint()|Returns whether a network interface is a point to point interface.
|java.net.NetworkInterface.isUp()|Returns whether a network interface is up and running.
|java.net.NetworkInterface.isVirtual()|Returns whether this interface is a virtual interface (also called  subinterface).
|java.net.NetworkInterface.supportsMulticast()|Returns whether a network interface supports multicasting or not.
|java.net.NetworkInterface.toString()|

*java.net.NetworkInterface_Description*

This class represents a Network Interface made up of a name, and a list of IP addresses assigned to this interface. It is used 
to identify the local interface on which a multicast group is joined. 

Interfaces are normally known by names such as "le0". 



*java.net.NetworkInterface.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object against the specified object. The result is true if and only if the argument is not null and it represents 
the same NetworkInterface as this object. 

Two instances of NetworkInterface represent the same NetworkInterface if both name and addrs are the same for both. 


    obj - the object to compare against. 

    Returns: true if the objects are the same; false otherwise. 

*java.net.NetworkInterface.getByInetAddress(InetAddress)*

public static |java.net.NetworkInterface| getByInetAddress(java.net.InetAddress addr)
  throws |java.net.SocketException|
         
Convenience method to search for a network interface that has the specified Internet Protocol (IP) address bound to it. 

If the specified IP address is bound to multiple network interfaces it is not defined which network interface is returned. 


    addr - The InetAddress to search with. 

    Returns: A NetworkInterface or null if there is no network interface with the specified IP address. 

*java.net.NetworkInterface.getByName(String)*

public static |java.net.NetworkInterface| getByName(java.lang.String name)
  throws |java.net.SocketException|
         
Searches for the network interface with the specified name. 


    name - The name of the network interface. 

    Returns: A NetworkInterface with the specified name, or null if there is no network interface with the specified name. 

*java.net.NetworkInterface.getDisplayName()*

public |java.lang.String| getDisplayName()

Get the display name of this network interface. A display name is a human readable String describing the network device. 



    Returns: the display name of this network interface, or null if no display name is available. 

*java.net.NetworkInterface.getHardwareAddress()*

public byte[] getHardwareAddress()
  throws |java.net.SocketException|
         
Returns the hardware address (usually MAC) of the interface if it has one and if it can be accessed given the current 
privileges. 



    Returns: a byte array containing the address or null if the address doesn't exist or is not accessible. 

*java.net.NetworkInterface.getInetAddresses()*

public |java.util.Enumeration|<InetAddress> getInetAddresses()

Convenience method to return an Enumeration with all or a subset of the InetAddresses bound to this network interface. 

If there is a security manager, its checkConnect method is called for each InetAddress. Only InetAddresses where the 
checkConnect doesn't throw a SecurityException will be returned in the Enumeration. 



    Returns: an Enumeration object with all or a subset of the InetAddresses bound to this network interface 

*java.net.NetworkInterface.getInterfaceAddresses()*

public |java.util.List|<InterfaceAddress> getInterfaceAddresses()

Get a List of all or a subset of the InterfaceAddresses of this network interface. 

If there is a security manager, its checkConnect method is called with the InetAddress for each InterfaceAddress. Only 
InterfaceAddresses where the checkConnect doesn't throw a SecurityException will be returned in the List. 



    Returns: a List object with all or a subset of the InterfaceAddresss of this network interface 

*java.net.NetworkInterface.getMTU()*

public int getMTU()
  throws |java.net.SocketException|
         
Returns the Maximum Transmission Unit (MTU) of this interface. 



    Returns: the value of the MTU for that interface. 

*java.net.NetworkInterface.getName()*

public |java.lang.String| getName()

Get the name of this network interface. 



    Returns: the name of this network interface 

*java.net.NetworkInterface.getNetworkInterfaces()*

public static |java.util.Enumeration|<NetworkInterface> getNetworkInterfaces()
  throws |java.net.SocketException|
         
Returns all the interfaces on this machine. Returns null if no network interfaces could be found on this machine. 

NOTE: can use getNetworkInterfaces()+getInetAddresses() to obtain all IP addresses for this node 



    Returns: an Enumeration of NetworkInterfaces found on this machine 

*java.net.NetworkInterface.getParent()*

public |java.net.NetworkInterface| getParent()

Returns the parent NetworkInterface of this interface if this is a subinterface, or null if it is a physical (non virtual) 
interface or has no parent. 



    Returns: The NetworkInterface this interface is attached to. 

*java.net.NetworkInterface.getSubInterfaces()*

public |java.util.Enumeration|<NetworkInterface> getSubInterfaces()

Get an Enumeration with all the subinterfaces (also known as virtual interfaces) attached to this network interface. 

For instance eth0:1 will be a subinterface to eth0. 



    Returns: an Enumeration object with all of the subinterfaces of this network interface 

*java.net.NetworkInterface.hashCode()*

public int hashCode()





*java.net.NetworkInterface.isLoopback()*

public boolean isLoopback()
  throws |java.net.SocketException|
         
Returns whether a network interface is a loopback interface. 



    Returns: true if the interface is a loopback interface. 

*java.net.NetworkInterface.isPointToPoint()*

public boolean isPointToPoint()
  throws |java.net.SocketException|
         
Returns whether a network interface is a point to point interface. A typical point to point interface would be a PPP connection 
through a modem. 



    Returns: true if the interface is a point to point interface. 

*java.net.NetworkInterface.isUp()*

public boolean isUp()
  throws |java.net.SocketException|
         
Returns whether a network interface is up and running. 



    Returns: true if the interface is up and running. 

*java.net.NetworkInterface.isVirtual()*

public boolean isVirtual()

Returns whether this interface is a virtual interface (also called subinterface). Virtual interfaces are, on some systems, 
interfaces created as a child of a physical interface and given different settings (like address or MTU). Usually the name of 
the interface will the name of the parent followed by a colon (:) and a number identifying the child since there can be several 
virtual interfaces attached to a single physical interface. 



    Returns: true if this interface is a virtual interface. 

*java.net.NetworkInterface.supportsMulticast()*

public boolean supportsMulticast()
  throws |java.net.SocketException|
         
Returns whether a network interface supports multicasting or not. 



    Returns: true if the interface supports Multicasting. 

*java.net.NetworkInterface.toString()*

public |java.lang.String| toString()






