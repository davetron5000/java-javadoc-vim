*java.awt.geom.Area* *Area* An Area object stores and manipulates a
 resolution-independent description of an enclosed area of
 

public class Area
  extends    |java.lang.Object|
  implements |java.awt.Shape|
             |java.lang.Cloneable|

|java.awt.geom.Area_Description|
|java.awt.geom.Area_Fields|
|java.awt.geom.Area_Constructors|
|java.awt.geom.Area_Methods|

================================================================================================================================

*java.awt.geom.Area_Constructors*
|java.awt.geom.Area()|Default constructor which creates an empty area.
|java.awt.geom.Area(Shape)|The Area class creates an area geometry from the  specifiedShapeobject.

*java.awt.geom.Area_Methods*
|java.awt.geom.Area.add(Area)|Adds the shape of the specified Area to the  shape of this Area.
|java.awt.geom.Area.clone()|Returns an exact copy of this Area object.
|java.awt.geom.Area.contains(double,double)|
|java.awt.geom.Area.contains(double,double,double,double)|
|java.awt.geom.Area.contains(Point2D)|
|java.awt.geom.Area.contains(Rectangle2D)|
|java.awt.geom.Area.createTransformedArea(AffineTransform)|Creates a new Area object that contains the same  geometry as this A
|java.awt.geom.Area.equals(Area)|Tests whether the geometries of the two Area objects  are equal.
|java.awt.geom.Area.exclusiveOr(Area)|Sets the shape of this Area to be the combined area  of its current shape and the shape o
|java.awt.geom.Area.getBounds()|Returns a boundingRectanglethat completely encloses  this Area.
|java.awt.geom.Area.getBounds2D()|Returns a high precision boundingRectangle2Dthat  completely encloses this Area.
|java.awt.geom.Area.getPathIterator(AffineTransform)|Creates aPathIteratorfor the outline of this   Area object.
|java.awt.geom.Area.getPathIterator(AffineTransform,double)|Creates a PathIterator for the flattened outline of   this Area obj
|java.awt.geom.Area.intersect(Area)|Sets the shape of this Area to the intersection of   its current shape and the shape of the
|java.awt.geom.Area.intersects(double,double,double,double)|
|java.awt.geom.Area.intersects(Rectangle2D)|
|java.awt.geom.Area.isEmpty()|Tests whether this Area object encloses any area.
|java.awt.geom.Area.isPolygonal()|Tests whether this Area consists entirely of  straight edged polygonal geometry.
|java.awt.geom.Area.isRectangular()|Tests whether this Area is rectangular in shape.
|java.awt.geom.Area.isSingular()|Tests whether this Area is comprised of a single  closed subpath.
|java.awt.geom.Area.reset()|Removes all of the geometry from this Area and  restores it to an empty area.
|java.awt.geom.Area.subtract(Area)|Subtracts the shape of the specified Area from the   shape of this Area.
|java.awt.geom.Area.transform(AffineTransform)|Transforms the geometry of this Area using the specifiedAffineTransform.

*java.awt.geom.Area_Description*

An Area object stores and manipulates a resolution-independent description of an enclosed area of 2-dimensional space. Area 
objects can be transformed and can perform various Constructive Area Geometry (CAG) operations when combined with other Area 
objects. The CAG operations include area addition(|java.awt.geom.Area|) , subtraction(|java.awt.geom.Area|) , 
intersection(|java.awt.geom.Area|) , and exclusive or(|java.awt.geom.Area|) . See the linked method documentation for examples 
of the various operations. 

The Area class implements the Shape interface and provides full support for all of its hit-testing and path iteration 
facilities, but an Area is more specific than a generalized path in a number of ways: 

Only closed paths and sub-paths are stored. Area objects constructed from unclosed paths are implicitly closed during 
construction as if those paths had been filled by the Graphics2D.fill method. The interiors of the individual stored sub-paths 
are all non-empty and non-overlapping. Paths are decomposed during construction into separate component non-overlapping parts, 
empty pieces of the path are discarded, and then these non-empty and non-overlapping properties are maintained through all 
subsequent CAG operations. Outlines of different component sub-paths may touch each other, as long as they do not cross so that 
their enclosed areas overlap. The geometry of the path describing the outline of the Area resembles the path from which it was 
constructed only in that it describes the same enclosed 2-dimensional area, but may use entirely different types and ordering 
of the path segments to do so. 

Interesting issues which are not always obvious when using the Area include: 

Creating an Area from an unclosed (open) Shape results in a closed outline in the Area object. Creating an Area from a Shape 
which encloses no area (even when "closed") produces an empty Area. A common example of this issue is that producing an Area 
from a line will be empty since the line encloses no area. An empty Area will iterate no geometry in its PathIterator objects. 
A self-intersecting Shape may be split into two (or more) sub-paths each enclosing one of the non-intersecting portions of the 
original path. An Area may take more path segments to describe the same geometry even when the original outline is simple and 
obvious. The analysis that the Area class must perform on the path may not reflect the same concepts of "simple and obvious" as 
a human being perceives. 



*java.awt.geom.Area()*

public Area()

Default constructor which creates an empty area. 


*java.awt.geom.Area(Shape)*

public Area(java.awt.Shape s)

The Area class creates an area geometry from the specified (|java.awt.Shape|) object. The geometry is explicitly closed, if the 
Shape is not already closed. The fill rule (even-odd or winding) specified by the geometry of the Shape is used to determine 
the resulting enclosed area. 

    s - the Shape from which the area is constructed 

*java.awt.geom.Area.add(Area)*

public void add(java.awt.geom.Area rhs)

Adds the shape of the specified Area to the shape of this Area. The resulting shape of this Area will include the union of both 
shapes, or all areas that were contained in either this or the specified Area. 

// Example: Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]); Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]); a1.add(a2); 

a1(before) + a2 = a1(after) 

################ ################ ################ ############## ############## ################ ############ ############ 
################ ########## ########## ################ ######## ######## ################ ###### ###### ###### ###### #### 
#### #### #### ## ## ## ## 


    rhs - the Area to be added to the current shape 

*java.awt.geom.Area.clone()*

public |java.lang.Object| clone()

Returns an exact copy of this Area object. 



    Returns: Created clone object 

*java.awt.geom.Area.contains(double,double)*

public boolean contains(
  double x,
  double y)





*java.awt.geom.Area.contains(double,double,double,double)*

public boolean contains(
  double x,
  double y,
  double w,
  double h)





*java.awt.geom.Area.contains(Point2D)*

public boolean contains(java.awt.geom.Point2D p)





*java.awt.geom.Area.contains(Rectangle2D)*

public boolean contains(java.awt.geom.Rectangle2D r)





*java.awt.geom.Area.createTransformedArea(AffineTransform)*

public |java.awt.geom.Area| createTransformedArea(java.awt.geom.AffineTransform t)

Creates a new Area object that contains the same geometry as this Area transformed by the specified AffineTransform. This Area 
object is unchanged. 


    t - the specified AffineTransform used to transform the new Area 

    Returns: a new Area object representing the transformed geometry. 

*java.awt.geom.Area.equals(Area)*

public boolean equals(java.awt.geom.Area other)

Tests whether the geometries of the two Area objects are equal. This method will return false if the argument is null. 


    other - the Area to be compared to this Area 

    Returns: true if the two geometries are equal; false otherwise. 

*java.awt.geom.Area.exclusiveOr(Area)*

public void exclusiveOr(java.awt.geom.Area rhs)

Sets the shape of this Area to be the combined area of its current shape and the shape of the specified Area, minus their 
intersection. The resulting shape of this Area will include only areas that were contained in either this Area or in the 
specified Area, but not in both. 

// Example: Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]); Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]); 
a1.exclusiveOr(a2); 

a1(before) xor a2 = a1(after) 

################ ################ ############## ############## ## ## ############ ############ #### #### ########## ########## 
###### ###### ######## ######## ################ ###### ###### ###### ###### #### #### #### #### ## ## ## ## 


    rhs - the Area to be exclusive ORed with this Area. 

*java.awt.geom.Area.getBounds()*

public |java.awt.Rectangle| getBounds()

Returns a bounding (|java.awt.Rectangle|) that completely encloses this Area. 

The Area class will attempt to return the tightest bounding box possible for the Shape. The bounding box will not be padded to 
include the control points of curves in the outline of the Shape, but should tightly fit the actual geometry of the outline 
itself. Since the returned object represents the bounding box with integers, the bounding box can only be as tight as the 
nearest integer coordinates that encompass the geometry of the Shape. 



    Returns: the bounding Rectangle for the Area. 

*java.awt.geom.Area.getBounds2D()*

public |java.awt.geom.Rectangle2D| getBounds2D()

Returns a high precision bounding (|java.awt.geom.Rectangle2D|) that completely encloses this Area. 

The Area class will attempt to return the tightest bounding box possible for the Shape. The bounding box will not be padded to 
include the control points of curves in the outline of the Shape, but should tightly fit the actual geometry of the outline 
itself. 



    Returns: the bounding Rectangle2D for the Area. 

*java.awt.geom.Area.getPathIterator(AffineTransform)*

public |java.awt.geom.PathIterator| getPathIterator(java.awt.geom.AffineTransform at)

Creates a (|java.awt.geom.PathIterator|) for the outline of this Area object. This Area object is unchanged. 


    at - an optional AffineTransform to be applied to the coordinates as they are returned in the iteration, or null if untransformed 
       coordinates are desired 

    Returns: the PathIterator object that returns the geometry of the outline of this Area, one segment at a time. 

*java.awt.geom.Area.getPathIterator(AffineTransform,double)*

public |java.awt.geom.PathIterator| getPathIterator(
  java.awt.geom.AffineTransform at,
  double flatness)

Creates a PathIterator for the flattened outline of this Area object. Only uncurved path segments represented by the 
SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are returned by the iterator. This Area object is unchanged. 


    at - an optional AffineTransform to be applied to the coordinates as they are returned in the iteration, or null if untransformed 
       coordinates are desired 
    flatness - the maximum amount that the control points for a given curve can vary from colinear before a subdivided curve is replaced by a 
       straight line connecting the end points 

    Returns: the PathIterator object that returns the geometry of the outline of this Area, one segment at a time. 

*java.awt.geom.Area.intersect(Area)*

public void intersect(java.awt.geom.Area rhs)

Sets the shape of this Area to the intersection of its current shape and the shape of the specified Area. The resulting shape 
of this Area will include only areas that were contained in both this Area and also in the specified Area. 

// Example: Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]); Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]); 
a1.intersect(a2); 

a1(before) intersect a2 = a1(after) 

################ ################ ################ ############## ############## ############ ############ ############ 
######## ########## ########## #### ######## ######## ###### ###### #### #### ## ## 


    rhs - the Area to be intersected with this Area 

*java.awt.geom.Area.intersects(double,double,double,double)*

public boolean intersects(
  double x,
  double y,
  double w,
  double h)





*java.awt.geom.Area.intersects(Rectangle2D)*

public boolean intersects(java.awt.geom.Rectangle2D r)





*java.awt.geom.Area.isEmpty()*

public boolean isEmpty()

Tests whether this Area object encloses any area. 



    Returns: true if this Area object represents an empty area; false otherwise. 

*java.awt.geom.Area.isPolygonal()*

public boolean isPolygonal()

Tests whether this Area consists entirely of straight edged polygonal geometry. 



    Returns: true if the geometry of this Area consists entirely of line segments; false otherwise. 

*java.awt.geom.Area.isRectangular()*

public boolean isRectangular()

Tests whether this Area is rectangular in shape. 



    Returns: true if the geometry of this Area is rectangular in shape; false otherwise. 

*java.awt.geom.Area.isSingular()*

public boolean isSingular()

Tests whether this Area is comprised of a single closed subpath. This method returns true if the path contains 0 or 1 subpaths, 
or false if the path contains more than 1 subpath. The subpaths are counted by the number of 
SEG_MOVETO(|java.awt.geom.PathIterator|) segments that appear in the path. 



    Returns: true if the Area is comprised of a single basic geometry; false otherwise. 

*java.awt.geom.Area.reset()*

public void reset()

Removes all of the geometry from this Area and restores it to an empty area. 



*java.awt.geom.Area.subtract(Area)*

public void subtract(java.awt.geom.Area rhs)

Subtracts the shape of the specified Area from the shape of this Area. The resulting shape of this Area will include areas that 
were contained only in this Area and not in the specified Area. 

// Example: Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]); Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]); 
a1.subtract(a2); 

a1(before) - a2 = a1(after) 

################ ################ ############## ############## ## ############ ############ #### ########## ########## ###### 
######## ######## ######## ###### ###### ###### #### #### #### ## ## ## 


    rhs - the Area to be subtracted from the current shape 

*java.awt.geom.Area.transform(AffineTransform)*

public void transform(java.awt.geom.AffineTransform t)

Transforms the geometry of this Area using the specified (|java.awt.geom.AffineTransform|) . The geometry is transformed in 
place, which permanently changes the enclosed area defined by this object. 


    t - the transformation used to transform the area 


