*java.net.CookieManager* *CookieManager* CookieManager provides a concrete implementation ofCookieHandler,
 which separates the 

public class CookieManager
  extends    |java.net.CookieHandler|

|java.net.CookieManager_Description|
|java.net.CookieManager_Fields|
|java.net.CookieManager_Constructors|
|java.net.CookieManager_Methods|

================================================================================================================================

*java.net.CookieManager_Constructors*
|java.net.CookieManager()|Create a new cookie manager.
|java.net.CookieManager(CookieStore,CookiePolicy)|Create a new cookie manager with specified cookie store and cookie policy.

*java.net.CookieManager_Methods*
|java.net.CookieManager.get(URI,Map<String,List<String>>)|
|java.net.CookieManager.getCookieStore()|To retrieve current cookie store.
|java.net.CookieManager.put(URI,Map<String,List<String>>)|
|java.net.CookieManager.setCookiePolicy(CookiePolicy)|To set the cookie policy of this cookie manager.

*java.net.CookieManager_Description*

CookieManager provides a concrete implementation of (|java.net.CookieHandler|) , which separates the storage of cookies from 
the policy surrounding accepting and rejecting cookies. A CookieManager is initialized with a (|java.net.CookieStore|) which 
manages storage, and a (|java.net.CookiePolicy|) object, which makes policy decisions on cookie acceptance/rejection. 

The HTTP cookie management in java.net package looks like: 



use CookieHandler CookiePolicy | use |--------> HttpCookie | ^ | | use | use | |--------> CookieStore ^ | impl | Internal 
in-memory implementation 



CookieHandler is at the core of cookie management. User can call CookieHandler.setDefault to set a concrete CookieHanlder 
implementation to be used. 

CookiePolicy.shouldAccept will be called by CookieManager.put to see whether or not one cookie should be accepted and put into 
cookie store. User can use any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER, or 
user can define his own CookiePolicy implementation and tell CookieManager to use it. 

CookieStore is the place where any accepted HTTP cookie is stored in. If not specified when created, a CookieManager instance 
will use an internal in-memory implementation. Or user can implements one and tell CookieManager to use it. 

Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI) are used by CookieManager. Others are for 
completeness and might be needed by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieSotre. 



There're various ways user can hook up his own HTTP cookie management behavior, e.g. 

Use CookieHandler.setDefault to set a brand new (|java.net.CookieHandler|) implementation Let CookieManager be the default 
(|java.net.CookieHandler|) implementation, but implement user's own (|java.net.CookieStore|) and (|java.net.CookiePolicy|) and 
tell default CookieManager to use them: 

// this should be done at the beginning of an HTTP session CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new 
MyCookiePolicy())); 

Let CookieManager be the default (|java.net.CookieHandler|) implementation, but use customized (|java.net.CookiePolicy|) : 

// this should be done at the beginning of an HTTP session CookieHandler.setDefault(new CookieManager()); // this can be done 
at any point of an HTTP session ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy()); 



The implementation conforms to RFC 2965, section 3.3. 



*java.net.CookieManager()*

public CookieManager()

Create a new cookie manager. 

This constructor will create new cookie manager with default cookie store and accept policy. The effect is same as 
CookieManager(null, null). 


*java.net.CookieManager(CookieStore,CookiePolicy)*

public CookieManager(
  java.net.CookieStore store,
  java.net.CookiePolicy cookiePolicy)

Create a new cookie manager with specified cookie store and cookie policy. 

    store - a CookieStore to be used by cookie manager. if null, cookie manager will use a default one, which is an in-memory CookieStore 
       implmentation. 
    cookiePolicy - a CookiePolicy instance to be used by cookie manager as policy callback. if null, ACCEPT_ORIGINAL_SERVER will be used. 

*java.net.CookieManager.get(URI,Map<String,List<String>>)*

public |java.util.Map|<String,List<String>> get(
  java.net.URI uri,
  java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders)
  throws |java.io.IOException|
         




*java.net.CookieManager.getCookieStore()*

public |java.net.CookieStore| getCookieStore()

To retrieve current cookie store. 



    Returns: the cookie store currently used by cookie manager. 

*java.net.CookieManager.put(URI,Map<String,List<String>>)*

public void put(
  java.net.URI uri,
  java.util.Map<java.lang.String, java.util.List<java.lang.String>> responseHeaders)
  throws |java.io.IOException|
         




*java.net.CookieManager.setCookiePolicy(CookiePolicy)*

public void setCookiePolicy(java.net.CookiePolicy cookiePolicy)

To set the cookie policy of this cookie manager. 

A instance of CookieManager will have cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always can call this method to set 
another cookie policy. 


    cookiePolicy - the cookie policy. Can be null, which has no effects on current cookie policy. 


