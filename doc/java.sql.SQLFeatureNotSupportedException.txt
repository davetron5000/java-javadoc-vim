*java.sql.SQLFeatureNotSupportedException* *SQLFeatureNotSupportedException* The subclass ofSQLExceptionthrown when the SQLState

public class SQLFeatureNotSupportedException
  extends    |java.sql.SQLNonTransientException|

|java.sql.SQLFeatureNotSupportedException_Description|
|java.sql.SQLFeatureNotSupportedException_Fields|
|java.sql.SQLFeatureNotSupportedException_Constructors|
|java.sql.SQLFeatureNotSupportedException_Methods|

================================================================================================================================

*java.sql.SQLFeatureNotSupportedException_Constructors*
|java.sql.SQLFeatureNotSupportedException()|Constructs a SQLFeatureNotSupportedException object.
|java.sql.SQLFeatureNotSupportedException(String)|Constructs a SQLFeatureNotSupportedException object   with a given reason.
|java.sql.SQLFeatureNotSupportedException(String,String)|Constructs a SQLFeatureNotSupportedException object  with a given reas
|java.sql.SQLFeatureNotSupportedException(String,String,int)|Constructs a SQLFeatureNotSupportedException object   with a given
|java.sql.SQLFeatureNotSupportedException(String,String,int,Throwable)|Constructs a SQLFeatureNotSupportedException object  wit
|java.sql.SQLFeatureNotSupportedException(String,String,Throwable)|Constructs a SQLFeatureNotSupportedException object   with a
|java.sql.SQLFeatureNotSupportedException(String,Throwable)|Constructs a SQLFeatureNotSupportedException object   with a given 
|java.sql.SQLFeatureNotSupportedException(Throwable)|Constructs a SQLFeatureNotSupportedException object     with a given  caus

*java.sql.SQLFeatureNotSupportedException_Description*

The subclass of (|java.sql.SQLException|) thrown when the SQLState class value is '0A' ( the value is 'zero' A). This indicates 
that the JDBC driver does not support an optional JDBC feature. Optional JDBC features can fall into the fallowing categories: 

no support for an optional feature no support for an optional overloaded method no support for an optional mode for a method. 
The mode for a method is determined based on constants passed as parameter values to a method 



*java.sql.SQLFeatureNotSupportedException()*

public SQLFeatureNotSupportedException()

Constructs a SQLFeatureNotSupportedException object. The reason, SQLState are initialized to null and the vendor code is 
initialized to 0. 

The cause is not initialized, and may subsequently be initialized by a call to the (|java.lang.Throwable|) method. 


*java.sql.SQLFeatureNotSupportedException(String)*

public SQLFeatureNotSupportedException(java.lang.String reason)

Constructs a SQLFeatureNotSupportedException object with a given reason. The SQLState is initialized to null and the vender 
code is initialized to 0. 

The cause is not initialized, and may subsequently be initialized by a call to the (|java.lang.Throwable|) method. 

    reason - a description of the exception 

*java.sql.SQLFeatureNotSupportedException(String,String)*

public SQLFeatureNotSupportedException(
  java.lang.String reason,
  java.lang.String SQLState)

Constructs a SQLFeatureNotSupportedException object with a given reason and SQLState. 

The cause is not initialized, and may subsequently be initialized by a call to the (|java.lang.Throwable|) method. The vendor 
code is initialized to 0. 

    reason - a description of the exception 
    SQLState - an XOPEN or SQL:2003 code identifying the exception 

*java.sql.SQLFeatureNotSupportedException(String,String,int)*

public SQLFeatureNotSupportedException(
  java.lang.String reason,
  java.lang.String SQLState,
  int vendorCode)

Constructs a SQLFeatureNotSupportedException object with a given reason, SQLState and vendorCode. 

The cause is not initialized, and may subsequently be initialized by a call to the (|java.lang.Throwable|) method. 

    reason - a description of the exception 
    SQLState - an XOPEN or SQL:2003 code identifying the exception 
    vendorCode - a database vendor specific exception code 

*java.sql.SQLFeatureNotSupportedException(String,String,int,Throwable)*

public SQLFeatureNotSupportedException(
  java.lang.String reason,
  java.lang.String SQLState,
  int vendorCode,
  java.lang.Throwable cause)

Constructs a SQLFeatureNotSupportedException object with a given reason, SQLState, vendorCode and cause. 

    reason - a description of the exception 
    SQLState - an XOPEN or SQL:2003 code identifying the exception 
    vendorCode - a database vendor-specific exception code 
    cause - the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method); may be null 
       indicating the cause is non-existent or unknown. 

*java.sql.SQLFeatureNotSupportedException(String,String,Throwable)*

public SQLFeatureNotSupportedException(
  java.lang.String reason,
  java.lang.String SQLState,
  java.lang.Throwable cause)

Constructs a SQLFeatureNotSupportedException object with a given reason, SQLState and cause. The vendor code is initialized to 
0. 

    reason - a description of the exception. 
    SQLState - an XOPEN or SQL:2003 code identifying the exception 
    cause - the (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown. 

*java.sql.SQLFeatureNotSupportedException(String,Throwable)*

public SQLFeatureNotSupportedException(
  java.lang.String reason,
  java.lang.Throwable cause)

Constructs a SQLFeatureNotSupportedException object with a given reason and cause. The SQLState is initialized to null and the 
vendor code is initialized to 0. 

    reason - a description of the exception. 
    cause - the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method); may be null 
       indicating the cause is non-existent or unknown. 

*java.sql.SQLFeatureNotSupportedException(Throwable)*

public SQLFeatureNotSupportedException(java.lang.Throwable cause)

Constructs a SQLFeatureNotSupportedException object with a given cause. The SQLState is initialized to null and the vendor code 
is initialized to 0. The reason is initialized to null if cause==null or to cause.toString() if cause!=null. 

    cause - the underlying reason for this SQLException (which is saved for later retrieval bythe getCause() method); may be null 
       indicating the cause is non-existent or unknown. 

