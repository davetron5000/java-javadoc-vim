*java.io.PipedInputStream* *PipedInputStream* A piped input stream should be connected
 to a piped output stream; the piped  inp

public class PipedInputStream
  extends    |java.io.InputStream|

|java.io.PipedInputStream_Description|
|java.io.PipedInputStream_Fields|
|java.io.PipedInputStream_Constructors|
|java.io.PipedInputStream_Methods|

================================================================================================================================

*java.io.PipedInputStream_Fields*
|byte[]_java.io.PipedInputStream.buffer|
|int_java.io.PipedInputStream.in|
|int_java.io.PipedInputStream.out|
|int_java.io.PipedInputStream.PIPE_SIZE|

*java.io.PipedInputStream_Constructors*
|java.io.PipedInputStream()|Creates a PipedInputStream so  that it is not yet#connect(java.io.PipedOutputStream)  connected.
|java.io.PipedInputStream(int)|Creates a PipedInputStream so that it is not yet#connect(java.io.PipedOutputStream) connectedand
|java.io.PipedInputStream(PipedOutputStream)|Creates a PipedInputStream so  that it is connected to the piped output  stream sr
|java.io.PipedInputStream(PipedOutputStream,int)|Creates a PipedInputStream so that it is  connected to the piped output stream

*java.io.PipedInputStream_Methods*
|java.io.PipedInputStream.available()|Returns the number of bytes that can be read from this input  stream without blocking.
|java.io.PipedInputStream.close()|Closes this piped input stream and releases any system resources  associated with the stream.
|java.io.PipedInputStream.connect(PipedOutputStream)|Causes this piped input stream to be connected  to the piped  output strea
|java.io.PipedInputStream.read()|Reads the next byte of data from this piped input stream.
|java.io.PipedInputStream.read(byte[],int,int)|Reads up to len bytes of data from this piped input  stream into an array of byt
|java.io.PipedInputStream.receive(int)|Receives a byte of data.

*java.io.PipedInputStream_Description*

A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are 
written to the piped output stream. Typically, data is read from a PipedInputStream object by one thread and data is written to 
the corresponding PipedOutputStream by some other thread. Attempting to use both objects from a single thread is not 
recommended, as it may deadlock the thread. The piped input stream contains a buffer, decoupling read operations from write 
operations, within limits. A pipe is said to be broken if a thread that was providing data bytes to the connected piped output 
stream is no longer alive. 



*byte[]_java.io.PipedInputStream.buffer*

The circular buffer into which incoming data is placed. 


*int_java.io.PipedInputStream.in*

The index of the position in the circular buffer at which the next byte of data will be stored when received from the connected 
piped output stream. in<0 implies the buffer is empty, in==out implies the buffer is full 


*int_java.io.PipedInputStream.out*

The index of the position in the circular buffer at which the next byte of data will be read by this piped input stream. 


*int_java.io.PipedInputStream.PIPE_SIZE*

The default size of the pipe's circular input buffer. 



*java.io.PipedInputStream()*

public PipedInputStream()

Creates a PipedInputStream so that it is not yet connected(|java.io.PipedInputStream|) . It must be 
connected(|java.io.PipedOutputStream|) to a PipedOutputStream before being used. 


*java.io.PipedInputStream(int)*

public PipedInputStream(int pipeSize)

Creates a PipedInputStream so that it is not yet connected(|java.io.PipedInputStream|) and uses the specified pipe size for the 
pipe's buffer. It must be connected(|java.io.PipedOutputStream|) to a PipedOutputStream before being used. 

    pipeSize - the size of the pipe's buffer. 

*java.io.PipedInputStream(PipedOutputStream)*

public PipedInputStream(java.io.PipedOutputStream src)
  throws |java.io.IOException|
         
Creates a PipedInputStream so that it is connected to the piped output stream src. Data bytes written to src will then be 
available as input from this stream. 

    src - the stream to connect to. 

*java.io.PipedInputStream(PipedOutputStream,int)*

public PipedInputStream(
  java.io.PipedOutputStream src,
  int pipeSize)
  throws |java.io.IOException|
         
Creates a PipedInputStream so that it is connected to the piped output stream src and uses the specified pipe size for the 
pipe's buffer. Data bytes written to src will then be available as input from this stream. 

    src - the stream to connect to. 
    pipeSize - the size of the pipe's buffer. 

*java.io.PipedInputStream.available()*

public synchronized int available()
  throws |java.io.IOException|
         
Returns the number of bytes that can be read from this input stream without blocking. 



    Returns: the number of bytes that can be read from this input stream without blocking, or {@code 0} if this input stream has been closed 
             by invoking its {@link #close()} method, or if the pipe is {@link #connect(java.io.PipedOutputStream) 
             unconnected}, or broken. 

*java.io.PipedInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this piped input stream and releases any system resources associated with the stream. 



*java.io.PipedInputStream.connect(PipedOutputStream)*

public void connect(java.io.PipedOutputStream src)
  throws |java.io.IOException|
         
Causes this piped input stream to be connected to the piped output stream src. If this object is already connected to some 
other piped output stream, an IOException is thrown. 

If src is an unconnected piped output stream and snk is an unconnected piped input stream, they may be connected by either the 
call: 

snk.connect(src) 

or the call: 

src.connect(snk) 

The two calls have the same effect. 


    src - The piped output stream to connect to. 

*java.io.PipedInputStream.read()*

public synchronized int read()
  throws |java.io.IOException|
         
Reads the next byte of data from this piped input stream. The value byte is returned as an int in the range 0 to 255. This 
method blocks until input data is available, the end of the stream is detected, or an exception is thrown. 



    Returns: the next byte of data, or -1 if the end of the stream is reached. 

*java.io.PipedInputStream.read(byte[],int,int)*

public synchronized int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to len bytes of data from this piped input stream into an array of bytes. Less than len bytes will be read if the end 
of the data stream is reached or if len exceeds the pipe's buffer size. If len is zero, then no bytes are read and 0 is 
returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an 
exception is thrown. 


    b - the buffer into which the data is read. 
    off - the start offset in the destination array b 
    len - the maximum number of bytes read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached. 

*java.io.PipedInputStream.receive(int)*

protected synchronized void receive(int b)
  throws |java.io.IOException|
         
Receives a byte of data. This method will block if no input is available. 


    b - the byte being received 


