*java.rmi.activation.Activatable* *Activatable* The Activatable class provides support for remote
 objects that require persiste

public abstract class Activatable
  extends    |java.rmi.server.RemoteServer|

|java.rmi.activation.Activatable_Description|
|java.rmi.activation.Activatable_Fields|
|java.rmi.activation.Activatable_Constructors|
|java.rmi.activation.Activatable_Methods|

================================================================================================================================

*java.rmi.activation.Activatable_Constructors*
|java.rmi.activation.Activatable(ActivationID,int)|Constructor used to activate/export the object on a specified  port.
|java.rmi.activation.Activatable(ActivationID,int,RMIClientSocketFactory,RMIServerSocketFactory)|Constructor used to activate/e
|java.rmi.activation.Activatable(String,MarshalledObject<?>,boolean,int)|Constructs an activatable remote object by registering
|java.rmi.activation.Activatable(String,MarshalledObject<?>,boolean,int,RMIClientSocketFactory,RMIServerSocketFactory)|Construc

*java.rmi.activation.Activatable_Methods*
|java.rmi.activation.Activatable.exportObject(Remote,ActivationID,int)|Export the activatable remote object to the RMI runtime 
|java.rmi.activation.Activatable.exportObject(Remote,ActivationID,int,RMIClientSocketFactory,RMIServerSocketFactory)|Export the
|java.rmi.activation.Activatable.exportObject(Remote,String,MarshalledObject<?>,boolean,int)|Registers an activation descriptor
|java.rmi.activation.Activatable.exportObject(Remote,String,MarshalledObject<?>,boolean,int,RMIClientSocketFactory,RMIServerSocketFactory)|
|java.rmi.activation.Activatable.getID()|Returns the object's activation identifier.
|java.rmi.activation.Activatable.inactive(ActivationID)|Informs the system that the object with the corresponding activation  i
|java.rmi.activation.Activatable.register(ActivationDesc)|Register an object descriptor for an activatable remote  object so th
|java.rmi.activation.Activatable.unexportObject(Remote,boolean)|Remove the remote object, obj, from the RMI runtime.
|java.rmi.activation.Activatable.unregister(ActivationID)|Revokes previous registration for the activation descriptor  associat

*java.rmi.activation.Activatable_Description*

The Activatable class provides support for remote objects that require persistent access over time and that can be activated by 
the system. 

For the constructors and static exportObject methods, the stub for a remote object being exported is obtained as described in 
(|java.rmi.server.UnicastRemoteObject|) . 

An attempt to serialize explicitly an instance of this class will fail. 



*java.rmi.activation.Activatable(ActivationID,int)*

protected Activatable(
  java.rmi.activation.ActivationID id,
  int port)
  throws |java.rmi.RemoteException|
         
Constructor used to activate/export the object on a specified port. An "activatable" remote object must have a constructor that 
takes two arguments: the object's activation identifier (ActivationID), and the object's initialization data (a 
MarshalledObject). 

A concrete subclass of this class must call this constructor when it is activated via the two parameter constructor described 
above. As a side-effect of construction, the remote object is "exported" to the RMI runtime (on the specified port) and is 
available to accept incoming calls from clients. 

    id - activation identifier for the object 
    port - the port number on which the object is exported 

*java.rmi.activation.Activatable(ActivationID,int,RMIClientSocketFactory,RMIServerSocketFactory)*

protected Activatable(
  java.rmi.activation.ActivationID id,
  int port,
  java.rmi.server.RMIClientSocketFactory csf,
  java.rmi.server.RMIServerSocketFactory ssf)
  throws |java.rmi.RemoteException|
         
Constructor used to activate/export the object on a specified port. An "activatable" remote object must have a constructor that 
takes two arguments: the object's activation identifier (ActivationID), and the object's initialization data (a 
MarshalledObject). 

A concrete subclass of this class must call this constructor when it is activated via the two parameter constructor described 
above. As a side-effect of construction, the remote object is "exported" to the RMI runtime (on the specified port) and is 
available to accept incoming calls from clients. 

    id - activation identifier for the object 
    port - the port number on which the object is exported 
    csf - the client-side socket factory for making calls to the remote object 
    ssf - the server-side socket factory for receiving remote calls 

*java.rmi.activation.Activatable(String,MarshalledObject<?>,boolean,int)*

protected Activatable(
  java.lang.String location,
  java.rmi.MarshalledObject<?> data,
  boolean restart,
  int port)
  throws |java.rmi.activation.ActivationException|
         |java.rmi.RemoteException|
         
Constructs an activatable remote object by registering an activation descriptor (with the specified location, data, and restart 
mode) for this object, and exporting the object with the specified port. 

Note: Using the Activatable constructors that both register and export an activatable remote object is strongly discouraged 
because the actions of registering and exporting the remote object are not guaranteed to be atomic. Instead, an application 
should register an activation descriptor and export a remote object separately, so that exceptions can be handled properly. 

This method invokes the exportObject(|java.rmi.activation.Activatable|) method with this object, and the specified location, 
data, restart mode, and port. Subsequent calls to (|java.rmi.activation.Activatable|) will return the activation identifier 
returned from the call to exportObject. 

    location - the location for classes for this object 
    data - the object's initialization data 
    port - the port on which the object is exported (an anonymous port is used if port=0) 
    restart - if true, the object is restarted (reactivated) when either the activator is restarted or the object's activation group is 
       restarted after an unexpected crash; if false, the object is only activated on demand. Specifying restart to be true 
       does not force an initial immediate activation of a newly registered object; initial activation is lazy. 

*java.rmi.activation.Activatable(String,MarshalledObject<?>,boolean,int,RMIClientSocketFactory,RMIServerSocketFactory)*

protected Activatable(
  java.lang.String location,
  java.rmi.MarshalledObject<?> data,
  boolean restart,
  int port,
  java.rmi.server.RMIClientSocketFactory csf,
  java.rmi.server.RMIServerSocketFactory ssf)
  throws |java.rmi.activation.ActivationException|
         |java.rmi.RemoteException|
         
Constructs an activatable remote object by registering an activation descriptor (with the specified location, data, and restart 
mode) for this object, and exporting the object with the specified port, and specified client and server socket factories. 

Note: Using the Activatable constructors that both register and export an activatable remote object is strongly discouraged 
because the actions of registering and exporting the remote object are not guaranteed to be atomic. Instead, an application 
should register an activation descriptor and export a remote object separately, so that exceptions can be handled properly. 

This method invokes the exportObject(|java.rmi.activation.Activatable|) method with this object, and the specified location, 
data, restart mode, port, and client and server socket factories. Subsequent calls to (|java.rmi.activation.Activatable|) will 
return the activation identifier returned from the call to exportObject. 

    location - the location for classes for this object 
    data - the object's initialization data 
    restart - if true, the object is restarted (reactivated) when either the activator is restarted or the object's activation group is 
       restarted after an unexpected crash; if false, the object is only activated on demand. Specifying restart to be true 
       does not force an initial immediate activation of a newly registered object; initial activation is lazy. 
    port - the port on which the object is exported (an anonymous port is used if port=0) 
    csf - the client-side socket factory for making calls to the remote object 
    ssf - the server-side socket factory for receiving remote calls 

*java.rmi.activation.Activatable.exportObject(Remote,ActivationID,int)*

public static |java.rmi.Remote| exportObject(
  java.rmi.Remote obj,
  java.rmi.activation.ActivationID id,
  int port)
  throws |java.rmi.RemoteException|
         
Export the activatable remote object to the RMI runtime to make the object available to receive incoming calls. The object is 
exported on an anonymous port, if port is zero. 

During activation, this exportObject method should be invoked explicitly by an "activatable" object, that does not extend the 
Activatable class. There is no need for objects that do extend the Activatable class to invoke this method directly because the 
object is exported during construction. 


    obj - the remote object implementation 
    id - the object's activation identifier 
    port - the port on which the object is exported (an anonymous port is used if port=0) 

    Returns: the stub for the activatable remote object 

*java.rmi.activation.Activatable.exportObject(Remote,ActivationID,int,RMIClientSocketFactory,RMIServerSocketFactory)*

public static |java.rmi.Remote| exportObject(
  java.rmi.Remote obj,
  java.rmi.activation.ActivationID id,
  int port,
  java.rmi.server.RMIClientSocketFactory csf,
  java.rmi.server.RMIServerSocketFactory ssf)
  throws |java.rmi.RemoteException|
         
Export the activatable remote object to the RMI runtime to make the object available to receive incoming calls. The object is 
exported on an anonymous port, if port is zero. 

During activation, this exportObject method should be invoked explicitly by an "activatable" object, that does not extend the 
Activatable class. There is no need for objects that do extend the Activatable class to invoke this method directly because the 
object is exported during construction. 


    obj - the remote object implementation 
    id - the object's activation identifier 
    port - the port on which the object is exported (an anonymous port is used if port=0) 
    csf - the client-side socket factory for making calls to the remote object 
    ssf - the server-side socket factory for receiving remote calls 

    Returns: the stub for the activatable remote object 

*java.rmi.activation.Activatable.exportObject(Remote,String,MarshalledObject<?>,boolean,int)*

public static |java.rmi.activation.ActivationID| exportObject(
  java.rmi.Remote obj,
  java.lang.String location,
  java.rmi.MarshalledObject<?> data,
  boolean restart,
  int port)
  throws |java.rmi.activation.ActivationException|
         |java.rmi.RemoteException|
         
Registers an activation descriptor (with the specified location, data, and restart mode) for the specified object, and exports 
that object with the specified port. 

Note: Using this method (as well as the Activatable constructors that both register and export an activatable remote object) is 
strongly discouraged because the actions of registering and exporting the remote object are not guaranteed to be atomic. 
Instead, an application should register an activation descriptor and export a remote object separately, so that exceptions can 
be handled properly. 

This method invokes the exportObject(|java.rmi.activation.Activatable|) method with the specified object, location, data, 
restart mode, and port, and null for both client and server socket factories, and then returns the resulting activation 
identifier. 


    obj - the object being exported 
    location - the object's code location 
    data - the object's bootstrapping data 
    restart - if true, the object is restarted (reactivated) when either the activator is restarted or the object's activation group is 
       restarted after an unexpected crash; if false, the object is only activated on demand. Specifying restart to be true 
       does not force an initial immediate activation of a newly registered object; initial activation is lazy. 
    port - the port on which the object is exported (an anonymous port is used if port=0) 

    Returns: the activation identifier obtained from registering the descriptor, desc, with the activation system the wrong group 

*java.rmi.activation.Activatable.exportObject(Remote,String,MarshalledObject<?>,boolean,int,RMIClientSocketFactory,RMIServerSocketFactory)*

public static |java.rmi.activation.ActivationID| exportObject(
  java.rmi.Remote obj,
  java.lang.String location,
  java.rmi.MarshalledObject<?> data,
  boolean restart,
  int port,
  java.rmi.server.RMIClientSocketFactory csf,
  java.rmi.server.RMIServerSocketFactory ssf)
  throws |java.rmi.activation.ActivationException|
         |java.rmi.RemoteException|
         
Registers an activation descriptor (with the specified location, data, and restart mode) for the specified object, and exports 
that object with the specified port, and the specified client and server socket factories. 

Note: Using this method (as well as the Activatable constructors that both register and export an activatable remote object) is 
strongly discouraged because the actions of registering and exporting the remote object are not guaranteed to be atomic. 
Instead, an application should register an activation descriptor and export a remote object separately, so that exceptions can 
be handled properly. 

This method first registers an activation descriptor for the specified object as follows. It obtains the activation system by 
invoking the method ActivationGroup.getSystem(|java.rmi.activation.ActivationGroup|) . This method then obtains an 
(|java.rmi.activation.ActivationID|) for the object by invoking the activation system's 
registerObject(|java.rmi.activation.ActivationSystem|) method with an (|java.rmi.activation.ActivationDesc|) constructed with 
the specified object's class name, and the specified location, data, and restart mode. If an exception occurs obtaining the 
activation system or registering the activation descriptor, that exception is thrown to the caller. 

Next, this method exports the object by invoking the exportObject(|java.rmi.activation.Activatable|) method with the specified 
remote object, the activation identifier obtained from registration, the specified port, and the specified client and server 
socket factories. If an exception occurs exporting the object, this method attempts to unregister the activation identifier 
(obtained from registration) by invoking the activation system's unregisterObject(|java.rmi.activation.ActivationSystem|) 
method with the activation identifier. If an exception occurs unregistering the identifier, that exception is ignored, and the 
original exception that occurred exporting the object is thrown to the caller. 

Finally, this method invokes the activeObject(|java.rmi.activation.ActivationGroup|) method on the activation group in this VM 
with the activation identifier and the specified remote object, and returns the activation identifier to the caller. 


    obj - the object being exported 
    location - the object's code location 
    data - the object's bootstrapping data 
    restart - if true, the object is restarted (reactivated) when either the activator is restarted or the object's activation group is 
       restarted after an unexpected crash; if false, the object is only activated on demand. Specifying restart to be true 
       does not force an initial immediate activation of a newly registered object; initial activation is lazy. 
    port - the port on which the object is exported (an anonymous port is used if port=0) 
    csf - the client-side socket factory for making calls to the remote object 
    ssf - the server-side socket factory for receiving remote calls 

    Returns: the activation identifier obtained from registering the descriptor with the activation system 

*java.rmi.activation.Activatable.getID()*

protected |java.rmi.activation.ActivationID| getID()

Returns the object's activation identifier. The method is protected so that only subclasses can obtain an object's identifier. 



    Returns: the object's activation identifier 

*java.rmi.activation.Activatable.inactive(ActivationID)*

public static boolean inactive(java.rmi.activation.ActivationID id)
  throws |java.rmi.activation.ActivationException|
         |java.rmi.RemoteException|
         |java.rmi.activation.UnknownObjectException|
         
Informs the system that the object with the corresponding activation id is currently inactive. If the object is currently 
active, the object is "unexported" from the RMI runtime (only if there are no pending or in-progress calls) so the that it can 
no longer receive incoming calls. This call informs this VM's ActivationGroup that the object is inactive, that, in turn, 
informs its ActivationMonitor. If this call completes successfully, a subsequent activate request to the activator will cause 
the object to reactivate. The operation may still succeed if the object is considered active but has already unexported itself. 


    id - the object's activation identifier 

    Returns: true if the operation succeeds (the operation will succeed if the object in currently known to be active and is either already 
             unexported or is currently exported and has no pending/executing calls); false is returned if the object has 
             pending/executing calls in which case it cannot be deactivated 

*java.rmi.activation.Activatable.register(ActivationDesc)*

public static |java.rmi.Remote| register(java.rmi.activation.ActivationDesc desc)
  throws |java.rmi.activation.ActivationException|
         |java.rmi.RemoteException|
         |java.rmi.activation.UnknownGroupException|
         
Register an object descriptor for an activatable remote object so that is can be activated on demand. 


    desc - the object's descriptor 

    Returns: the stub for the activatable remote object 

*java.rmi.activation.Activatable.unexportObject(Remote,boolean)*

public static boolean unexportObject(
  java.rmi.Remote obj,
  boolean force)
  throws |java.rmi.NoSuchObjectException|
         
Remove the remote object, obj, from the RMI runtime. If successful, the object can no longer accept incoming RMI calls. If the 
force parameter is true, the object is forcibly unexported even if there are pending calls to the remote object or the remote 
object still has calls in progress. If the force parameter is false, the object is only unexported if there are no pending or 
in progress calls to the object. 


    obj - the remote object to be unexported 
    force - if true, unexports the object even if there are pending or in-progress calls; if false, only unexports the object if there are 
       no pending or in-progress calls 

    Returns: true if operation is successful, false otherwise 

*java.rmi.activation.Activatable.unregister(ActivationID)*

public static void unregister(java.rmi.activation.ActivationID id)
  throws |java.rmi.activation.ActivationException|
         |java.rmi.RemoteException|
         |java.rmi.activation.UnknownObjectException|
         
Revokes previous registration for the activation descriptor associated with id. An object can no longer be activated via that 
id. 


    id - the object's activation identifier 


