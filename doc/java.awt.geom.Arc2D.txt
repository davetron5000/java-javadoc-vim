*java.awt.geom.Arc2D* *Arc2D* Arc2D is the abstract superclass for all objects that 
 store a 2D arc defined by a framing rectan

public abstract class Arc2D
  extends    |java.awt.geom.RectangularShape|

|java.awt.geom.Arc2D_Description|
|java.awt.geom.Arc2D_Fields|
|java.awt.geom.Arc2D_Constructors|
|java.awt.geom.Arc2D_Methods|

================================================================================================================================

*java.awt.geom.Arc2D_Fields*
|int_java.awt.geom.Arc2D.CHORD|
|int_java.awt.geom.Arc2D.OPEN|
|int_java.awt.geom.Arc2D.PIE|

*java.awt.geom.Arc2D_Constructors*
|java.awt.geom.Arc2D(int)|This is an abstract class that cannot be instantiated directly.

*java.awt.geom.Arc2D_Methods*
|java.awt.geom.Arc2D.contains(double,double)|Determines whether or not the specified point is inside the boundary   of the arc.
|java.awt.geom.Arc2D.contains(double,double,double,double)|Determines whether or not the interior of the arc entirely contains 
|java.awt.geom.Arc2D.contains(Rectangle2D)|Determines whether or not the interior of the arc entirely contains   the specified 
|java.awt.geom.Arc2D.containsAngle(double)|Determines whether or not the specified angle is within the    angular extents of th
|java.awt.geom.Arc2D.equals(Object)|Determines whether or not the specified Object is  equal to this Arc2D.
|java.awt.geom.Arc2D.getAngleExtent()|Returns the angular extent of the arc.
|java.awt.geom.Arc2D.getAngleStart()|Returns the starting angle of the arc.
|java.awt.geom.Arc2D.getArcType()|Returns the arc closure type of the arc:#OPEN,#CHORD, or#PIE.
|java.awt.geom.Arc2D.getBounds2D()|Returns the high-precision framing rectangle of the arc.
|java.awt.geom.Arc2D.getEndPoint()|Returns the ending point of the arc.
|java.awt.geom.Arc2D.getPathIterator(AffineTransform)|Returns an iteration object that defines the boundary of the  arc.
|java.awt.geom.Arc2D.getStartPoint()|Returns the starting point of the arc.
|java.awt.geom.Arc2D.hashCode()|Returns the hashcode for this Arc2D.
|java.awt.geom.Arc2D.intersects(double,double,double,double)|Determines whether or not the interior of the arc intersects   the
|java.awt.geom.Arc2D.makeBounds(double,double,double,double)|Constructs a Rectangle2D of the appropriate precision  to hold the
|java.awt.geom.Arc2D.setAngleExtent(double)|Sets the angular extent of this arc to the specified double  value.
|java.awt.geom.Arc2D.setAngles(double,double,double,double)|Sets the starting angle and angular extent of this arc using two   
|java.awt.geom.Arc2D.setAngles(Point2D,Point2D)|Sets the starting angle and angular extent of this arc using    two points.
|java.awt.geom.Arc2D.setAngleStart(double)|Sets the starting angle of this arc to the specified double  value.
|java.awt.geom.Arc2D.setAngleStart(Point2D)|Sets the starting angle of this arc to the angle that the  specified point defines 
|java.awt.geom.Arc2D.setArc(Arc2D)|Sets this arc to be the same as the specified arc.
|java.awt.geom.Arc2D.setArc(double,double,double,double,double,double,int)|Sets the location, size, angular extents, and closur
|java.awt.geom.Arc2D.setArc(Point2D,Dimension2D,double,double,int)|Sets the location, size, angular extents, and closure type o
|java.awt.geom.Arc2D.setArc(Rectangle2D,double,double,int)|Sets the location, size, angular extents, and closure type of  this 
|java.awt.geom.Arc2D.setArcByCenter(double,double,double,double,double,int)|Sets the position, bounds, angular extents, and clo
|java.awt.geom.Arc2D.setArcByTangent(Point2D,Point2D,Point2D,double)|Sets the position, bounds, and angular extents of this arc
|java.awt.geom.Arc2D.setArcType(int)|Sets the closure type of this arc to the specified value:   OPEN, CHORD, or PIE.
|java.awt.geom.Arc2D.setFrame(double,double,double,double)|Note that the arc  partially inscribes  the framing rectangle of thi

*java.awt.geom.Arc2D_Description*

Arc2D is the abstract superclass for all objects that store a 2D arc defined by a framing rectangle, start angle, angular 
extent (length of the arc), and a closure type (OPEN, CHORD, or PIE). 

The arc is a partial section of a full ellipse which inscribes the framing rectangle of its parent 
(|java.awt.geom.RectangularShape|) . 

The angles are specified relative to the non-square framing rectangle such that 45 degrees always falls on the line from the 
center of the ellipse to the upper right corner of the framing rectangle. As a result, if the framing rectangle is noticeably 
longer along one axis than the other, the angles to the start and end of the arc segment will be skewed farther along the 
longer axis of the frame. 

The actual storage representation of the coordinates is left to the subclass. 



*int_java.awt.geom.Arc2D.CHORD*

The closure type for an arc closed by drawing a straight line segment from the start of the arc segment to the end of the arc 
segment. 


*int_java.awt.geom.Arc2D.OPEN*

The closure type for an open arc with no path segments connecting the two ends of the arc segment. 


*int_java.awt.geom.Arc2D.PIE*

The closure type for an arc closed by drawing straight line segments from the start of the arc segment to the center of the 
full ellipse and from that point to the end of the arc segment. 



*java.awt.geom.Arc2D(int)*

protected Arc2D(int type)

This is an abstract class that cannot be instantiated directly. Type-specific implementation subclasses are available for 
instantiation and provide a number of formats for storing the information necessary to satisfy the various accessor methods 
below. 

    type - The closure type of this arc: {@link #OPEN}, {@link #CHORD}, or {@link #PIE}. 

*java.awt.geom.Arc2D.contains(double,double)*

public boolean contains(
  double x,
  double y)

Determines whether or not the specified point is inside the boundary of the arc. 


    x - The X coordinate of the point to test. 
    y - The Y coordinate of the point to test. 

    Returns: true if the point lies within the bound of the arc, false if the point lies outside of the arc's bounds. 

*java.awt.geom.Arc2D.contains(double,double,double,double)*

public boolean contains(
  double x,
  double y,
  double w,
  double h)

Determines whether or not the interior of the arc entirely contains the specified rectangle. 


    x - The X coordinate of the rectangle's upper-left corner. 
    y - The Y coordinate of the rectangle's upper-left corner. 
    w - The width of the rectangle. 
    h - The height of the rectangle. 

    Returns: true if the arc contains the rectangle, false if the arc doesn't contain the rectangle. 

*java.awt.geom.Arc2D.contains(Rectangle2D)*

public boolean contains(java.awt.geom.Rectangle2D r)

Determines whether or not the interior of the arc entirely contains the specified rectangle. 


    r - The Rectangle2D to test. 

    Returns: true if the arc contains the rectangle, false if the arc doesn't contain the rectangle. 

*java.awt.geom.Arc2D.containsAngle(double)*

public boolean containsAngle(double angle)

Determines whether or not the specified angle is within the angular extents of the arc. 


    angle - The angle to test. 

    Returns: true if the arc contains the angle, false if the arc doesn't contain the angle. 

*java.awt.geom.Arc2D.equals(Object)*

public boolean equals(java.lang.Object obj)

Determines whether or not the specified Object is equal to this Arc2D. The specified Object is equal to this Arc2D if it is an 
instance of Arc2D and if its location, size, arc extents and type are the same as this Arc2D. 


    obj - an Object to be compared with this Arc2D. 

    Returns: true if obj is an instance of Arc2D and has the same values; false otherwise. 

*java.awt.geom.Arc2D.getAngleExtent()*

public abstract double getAngleExtent()

Returns the angular extent of the arc. 



    Returns: A double value that represents the angular extent of the arc in degrees. 

*java.awt.geom.Arc2D.getAngleStart()*

public abstract double getAngleStart()

Returns the starting angle of the arc. 



    Returns: A double value that represents the starting angle of the arc in degrees. 

*java.awt.geom.Arc2D.getArcType()*

public int getArcType()

Returns the arc closure type of the arc: (|java.awt.geom.Arc2D|) , (|java.awt.geom.Arc2D|) , or (|java.awt.geom.Arc2D|) . 



    Returns: One of the integer constant closure types defined in this class. 

*java.awt.geom.Arc2D.getBounds2D()*

public |java.awt.geom.Rectangle2D| getBounds2D()

Returns the high-precision framing rectangle of the arc. The framing rectangle contains only the part of this Arc2D that is in 
between the starting and ending angles and contains the pie wedge, if this Arc2D has a PIE closure type. 

This method differs from the getBounds(|java.awt.geom.RectangularShape|) in that the getBounds method only returns the bounds 
of the enclosing ellipse of this Arc2D without considering the starting and ending angles of this Arc2D. 



    Returns: the Rectangle2D that represents the arc's framing rectangle. 

*java.awt.geom.Arc2D.getEndPoint()*

public |java.awt.geom.Point2D| getEndPoint()

Returns the ending point of the arc. This point is the intersection of the ray from the center defined by the starting angle 
plus the angular extent of the arc and the elliptical boundary of the arc. 



    Returns: A Point2D object representing the x,y coordinates of the ending point of the arc. 

*java.awt.geom.Arc2D.getPathIterator(AffineTransform)*

public |java.awt.geom.PathIterator| getPathIterator(java.awt.geom.AffineTransform at)

Returns an iteration object that defines the boundary of the arc. This iterator is multithread safe. Arc2D guarantees that 
modifications to the geometry of the arc do not affect any iterations of that geometry that are already in process. 


    at - an optional AffineTransform to be applied to the coordinates as they are returned in the iteration, or null if the 
       untransformed coordinates are desired. 

    Returns: A PathIterator that defines the arc's boundary. 

*java.awt.geom.Arc2D.getStartPoint()*

public |java.awt.geom.Point2D| getStartPoint()

Returns the starting point of the arc. This point is the intersection of the ray from the center defined by the starting angle 
and the elliptical boundary of the arc. 



    Returns: A Point2D object representing the x,y coordinates of the starting point of the arc. 

*java.awt.geom.Arc2D.hashCode()*

public int hashCode()

Returns the hashcode for this Arc2D. 



    Returns: the hashcode for this Arc2D. 

*java.awt.geom.Arc2D.intersects(double,double,double,double)*

public boolean intersects(
  double x,
  double y,
  double w,
  double h)

Determines whether or not the interior of the arc intersects the interior of the specified rectangle. 


    x - The X coordinate of the rectangle's upper-left corner. 
    y - The Y coordinate of the rectangle's upper-left corner. 
    w - The width of the rectangle. 
    h - The height of the rectangle. 

    Returns: true if the arc intersects the rectangle, false if the arc doesn't intersect the rectangle. 

*java.awt.geom.Arc2D.makeBounds(double,double,double,double)*

protected abstract |java.awt.geom.Rectangle2D| makeBounds(
  double x,
  double y,
  double w,
  double h)

Constructs a Rectangle2D of the appropriate precision to hold the parameters calculated to be the framing rectangle of this 
arc. 


    x - The X coordinate of the upper-left corner of the framing rectangle. 
    y - The Y coordinate of the upper-left corner of the framing rectangle. 
    w - The width of the framing rectangle. 
    h - The height of the framing rectangle. 

    Returns: a Rectangle2D that is the framing rectangle of this arc. 

*java.awt.geom.Arc2D.setAngleExtent(double)*

public abstract void setAngleExtent(double angExt)

Sets the angular extent of this arc to the specified double value. 


    angExt - The angular extent of the arc in degrees. 

*java.awt.geom.Arc2D.setAngles(double,double,double,double)*

public void setAngles(
  double x1,
  double y1,
  double x2,
  double y2)

Sets the starting angle and angular extent of this arc using two sets of coordinates. The first set of coordinates is used to 
determine the angle of the starting point relative to the arc's center. The second set of coordinates is used to determine the 
angle of the end point relative to the arc's center. The arc will always be non-empty and extend counterclockwise from the 
first point around to the second point. 


    x1 - The X coordinate of the arc's starting point. 
    y1 - The Y coordinate of the arc's starting point. 
    x2 - The X coordinate of the arc's ending point. 
    y2 - The Y coordinate of the arc's ending point. 

*java.awt.geom.Arc2D.setAngles(Point2D,Point2D)*

public void setAngles(
  java.awt.geom.Point2D p1,
  java.awt.geom.Point2D p2)

Sets the starting angle and angular extent of this arc using two points. The first point is used to determine the angle of the 
starting point relative to the arc's center. The second point is used to determine the angle of the end point relative to the 
arc's center. The arc will always be non-empty and extend counterclockwise from the first point around to the second point. 


    p1 - The Point2D that defines the arc's starting point. 
    p2 - The Point2D that defines the arc's ending point. 

*java.awt.geom.Arc2D.setAngleStart(double)*

public abstract void setAngleStart(double angSt)

Sets the starting angle of this arc to the specified double value. 


    angSt - The starting angle of the arc in degrees. 

*java.awt.geom.Arc2D.setAngleStart(Point2D)*

public void setAngleStart(java.awt.geom.Point2D p)

Sets the starting angle of this arc to the angle that the specified point defines relative to the center of this arc. The 
angular extent of the arc will remain the same. 


    p - The Point2D that defines the starting angle. 

*java.awt.geom.Arc2D.setArc(Arc2D)*

public void setArc(java.awt.geom.Arc2D a)

Sets this arc to be the same as the specified arc. 


    a - The Arc2D to use to set the arc's values. 

*java.awt.geom.Arc2D.setArc(double,double,double,double,double,double,int)*

public abstract void setArc(
  double x,
  double y,
  double w,
  double h,
  double angSt,
  double angExt,
  int closure)

Sets the location, size, angular extents, and closure type of this arc to the specified double values. 


    x - The X coordinate of the upper-left corner of the arc. 
    y - The Y coordinate of the upper-left corner of the arc. 
    w - The overall width of the full ellipse of which this arc is a partial section. 
    h - The overall height of the full ellipse of which this arc is a partial section. 
    angSt - The starting angle of the arc in degrees. 
    angExt - The angular extent of the arc in degrees. 
    closure - The closure type for the arc: {@link #OPEN}, {@link #CHORD}, or {@link #PIE}. 

*java.awt.geom.Arc2D.setArc(Point2D,Dimension2D,double,double,int)*

public void setArc(
  java.awt.geom.Point2D loc,
  java.awt.geom.Dimension2D size,
  double angSt,
  double angExt,
  int closure)

Sets the location, size, angular extents, and closure type of this arc to the specified values. 


    loc - The Point2D representing the coordinates of the upper-left corner of the arc. 
    size - The Dimension2D representing the width and height of the full ellipse of which this arc is a partial section. 
    angSt - The starting angle of the arc in degrees. 
    angExt - The angular extent of the arc in degrees. 
    closure - The closure type for the arc: {@link #OPEN}, {@link #CHORD}, or {@link #PIE}. 

*java.awt.geom.Arc2D.setArc(Rectangle2D,double,double,int)*

public void setArc(
  java.awt.geom.Rectangle2D rect,
  double angSt,
  double angExt,
  int closure)

Sets the location, size, angular extents, and closure type of this arc to the specified values. 


    rect - The framing rectangle that defines the outer boundary of the full ellipse of which this arc is a partial section. 
    angSt - The starting angle of the arc in degrees. 
    angExt - The angular extent of the arc in degrees. 
    closure - The closure type for the arc: {@link #OPEN}, {@link #CHORD}, or {@link #PIE}. 

*java.awt.geom.Arc2D.setArcByCenter(double,double,double,double,double,int)*

public void setArcByCenter(
  double x,
  double y,
  double radius,
  double angSt,
  double angExt,
  int closure)

Sets the position, bounds, angular extents, and closure type of this arc to the specified values. The arc is defined by a 
center point and a radius rather than a framing rectangle for the full ellipse. 


    x - The X coordinate of the center of the arc. 
    y - The Y coordinate of the center of the arc. 
    radius - The radius of the arc. 
    angSt - The starting angle of the arc in degrees. 
    angExt - The angular extent of the arc in degrees. 
    closure - The closure type for the arc: {@link #OPEN}, {@link #CHORD}, or {@link #PIE}. 

*java.awt.geom.Arc2D.setArcByTangent(Point2D,Point2D,Point2D,double)*

public void setArcByTangent(
  java.awt.geom.Point2D p1,
  java.awt.geom.Point2D p2,
  java.awt.geom.Point2D p3,
  double radius)

Sets the position, bounds, and angular extents of this arc to the specified value. The starting angle of the arc is tangent to 
the line specified by points (p1, p2), the ending angle is tangent to the line specified by points (p2, p3), and the arc has 
the specified radius. 


    p1 - The first point that defines the arc. The starting angle of the arc is tangent to the line specified by points (p1, p2). 
    p2 - The second point that defines the arc. The starting angle of the arc is tangent to the line specified by points (p1, p2). The 
       ending angle of the arc is tangent to the line specified by points (p2, p3). 
    p3 - The third point that defines the arc. The ending angle of the arc is tangent to the line specified by points (p2, p3). 
    radius - The radius of the arc. 

*java.awt.geom.Arc2D.setArcType(int)*

public void setArcType(int type)

Sets the closure type of this arc to the specified value: OPEN, CHORD, or PIE. 


    type - The integer constant that represents the closure type of this arc: {@link #OPEN}, {@link #CHORD}, or {@link #PIE}. 

*java.awt.geom.Arc2D.setFrame(double,double,double,double)*

public void setFrame(
  double x,
  double y,
  double w,
  double h)

Note that the arc partially inscribes the framing rectangle of thisRectangularShape. 




