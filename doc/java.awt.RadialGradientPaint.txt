*java.awt.RadialGradientPaint* *RadialGradientPaint* TheRadialGradientPaintclass provides a way to fill a shape with
 a circular

public final class RadialGradientPaint
  extends    |java.awt.MultipleGradientPaint|

|java.awt.RadialGradientPaint_Description|
|java.awt.RadialGradientPaint_Fields|
|java.awt.RadialGradientPaint_Constructors|
|java.awt.RadialGradientPaint_Methods|

================================================================================================================================

*java.awt.RadialGradientPaint_Constructors*
|java.awt.RadialGradientPaint(float,float,float,float[],Color[])|Constructs aRadialGradientPaintwith a defaultNO_CYCLErepeating
|java.awt.RadialGradientPaint(float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod)|Constructs aRadialGradientPa
|java.awt.RadialGradientPaint(float,float,float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod)|Constructs aRadi
|java.awt.RadialGradientPaint(Point2D,float,float[],Color[])|Constructs aRadialGradientPaintwith a defaultNO_CYCLErepeating met
|java.awt.RadialGradientPaint(Point2D,float,float[],Color[],MultipleGradientPaint.CycleMethod)|Constructs aRadialGradientPaintw
|java.awt.RadialGradientPaint(Point2D,float,Point2D,float[],Color[],MultipleGradientPaint.CycleMethod)|Constructs aRadialGradie
|java.awt.RadialGradientPaint(Point2D,float,Point2D,float[],Color[],MultipleGradientPaint.CycleMethod,MultipleGradientPaint.ColorSpaceType,AffineTransform)|
|java.awt.RadialGradientPaint(Rectangle2D,float[],Color[],MultipleGradientPaint.CycleMethod)|Constructs aRadialGradientPaintwit

*java.awt.RadialGradientPaint_Methods*
|java.awt.RadialGradientPaint.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)|
|java.awt.RadialGradientPaint.getCenterPoint()|Returns a copy of the center point of the radial gradient.
|java.awt.RadialGradientPaint.getFocusPoint()|Returns a copy of the end point of the gradient axis.
|java.awt.RadialGradientPaint.getRadius()|Returns the radius of the circle defining the radial gradient.

*java.awt.RadialGradientPaint_Description*

TheRadialGradientPaintclass provides a way to fill a shape with a circular radial color gradient pattern. The user may specify 
2 or more gradient colors, and this paint will provide an interpolation between each color. 

The user must specify the circle controlling the gradient pattern, which is described by a center point and a radius. The user 
can also specify a separate focus point within that circle, which controls the location of the first color of the gradient. By 
default the focus is set to be the center of the circle. 

This paint will map the first color of the gradient to the focus point, and the last color to the perimeter of the circle, 
interpolating smoothly for any in-between colors specified by the user. Any line drawn from the focus point to the 
circumference will thus span all the gradient colors. 

Specifying a focus point outside of the circle's radius will result in the focus being set to the intersection point of the 
focus-center line and the perimeter of the circle. 

The user must provide an array of floats specifying how to distribute the colors along the gradient. These values should range 
from 0.0 to 1.0 and act like keyframes along the gradient (they mark where the gradient should be exactly a particular color). 

In the event that the user does not set the first keyframe value equal to 0 and/or the last keyframe value equal to 1, 
keyframes will be created at these positions and the first and last colors will be replicated there. So, if a user specifies 
the following arrays to construct a gradient: 

{Color.BLUE, Color.RED}, {.3f, .7f} 

this will be converted to a gradient with the following keyframes: 

{Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f} 

The user may also select what action theRadialGradientPaintshould take when filling color outside the bounds of the circle's 
radius. If no cycle method is specified,NO_CYCLEwill be chosen by default, which means the the last keyframe color will be used 
to fill the remaining area. 

The colorSpace parameter allows the user to specify in which colorspace the interpolation should be performed, default sRGB or 
linearized RGB. 

The following code demonstrates typical usage ofRadialGradientPaint, where the center and focus points are the same: 



Point2D center = new Point2D.Float(50, 50); float radius = 25; float[] dist = {0.0f, 0.2f, 1.0f}; Color[] colors = {Color.RED, 
Color.WHITE, Color.BLUE}; RadialGradientPaint p = new RadialGradientPaint(center, radius, dist, colors); 

This image demonstrates the example code above, with default (centered) focus for each of the three cycle methods: 





It is also possible to specify a non-centered focus point, as in the following code: 



Point2D center = new Point2D.Float(50, 50); float radius = 25; Point2D focus = new Point2D.Float(40, 40); float[] dist = {0.0f, 
0.2f, 1.0f}; Color[] colors = {Color.RED, Color.WHITE, Color.BLUE}; RadialGradientPaint p = new RadialGradientPaint(center, 
radius, focus, dist, colors, CycleMethod.NO_CYCLE); 

This image demonstrates the previous example code, with non-centered focus for each of the three cycle methods: 







*java.awt.RadialGradientPaint(float,float,float,float[],Color[])*

public RadialGradientPaint(
  float cx,
  float cy,
  float radius,
  float[] fractions,
  java.awt.Color[] colors)

Constructs aRadialGradientPaintwith a defaultNO_CYCLErepeating method andSRGBcolor space, using the center as the focus point. 

    cx - the X coordinate in user space of the center point of the circle defining the gradient. The last color of the gradient is 
       mapped to the perimeter of this circle. 
    cy - the Y coordinate in user space of the center point of the circle defining the gradient. The last color of the gradient is 
       mapped to the perimeter of this circle. 
    radius - the radius of the circle defining the extents of the color gradient 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the 
       circle. 

*java.awt.RadialGradientPaint(float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod)*

public RadialGradientPaint(
  float cx,
  float cy,
  float radius,
  float[] fractions,
  java.awt.Color[] colors,
  java.awt.MultipleGradientPaint.CycleMethod cycleMethod)

Constructs aRadialGradientPaintwith a defaultSRGBcolor space, using the center as the focus point. 

    cx - the X coordinate in user space of the center point of the circle defining the gradient. The last color of the gradient is 
       mapped to the perimeter of this circle. 
    cy - the Y coordinate in user space of the center point of the circle defining the gradient. The last color of the gradient is 
       mapped to the perimeter of this circle. 
    radius - the radius of the circle defining the extents of the color gradient 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the 
       circle. 
    cycleMethod - either {@code NO_CYCLE}, {@code REFLECT}, or {@code REPEAT} 

*java.awt.RadialGradientPaint(float,float,float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod)*

public RadialGradientPaint(
  float cx,
  float cy,
  float radius,
  float fx,
  float fy,
  float[] fractions,
  java.awt.Color[] colors,
  java.awt.MultipleGradientPaint.CycleMethod cycleMethod)

Constructs aRadialGradientPaintwith a defaultSRGBcolor space. 

    cx - the X coordinate in user space of the center point of the circle defining the gradient. The last color of the gradient is 
       mapped to the perimeter of this circle. 
    cy - the Y coordinate in user space of the center point of the circle defining the gradient. The last color of the gradient is 
       mapped to the perimeter of this circle. 
    radius - the radius of the circle defining the extents of the color gradient 
    fx - the X coordinate of the point in user space to which the first color is mapped 
    fy - the Y coordinate of the point in user space to which the first color is mapped 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the 
       circle. 
    cycleMethod - either {@code NO_CYCLE}, {@code REFLECT}, or {@code REPEAT} 

*java.awt.RadialGradientPaint(Point2D,float,float[],Color[])*

public RadialGradientPaint(
  java.awt.geom.Point2D center,
  float radius,
  float[] fractions,
  java.awt.Color[] colors)

Constructs aRadialGradientPaintwith a defaultNO_CYCLErepeating method andSRGBcolor space, using the center as the focus point. 

    center - the center point, in user space, of the circle defining the gradient 
    radius - the radius of the circle defining the extents of the color gradient 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the 
       circle. 

*java.awt.RadialGradientPaint(Point2D,float,float[],Color[],MultipleGradientPaint.CycleMethod)*

public RadialGradientPaint(
  java.awt.geom.Point2D center,
  float radius,
  float[] fractions,
  java.awt.Color[] colors,
  java.awt.MultipleGradientPaint.CycleMethod cycleMethod)

Constructs aRadialGradientPaintwith a defaultSRGBcolor space, using the center as the focus point. 

    center - the center point, in user space, of the circle defining the gradient 
    radius - the radius of the circle defining the extents of the color gradient 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the 
       circle. 
    cycleMethod - either {@code NO_CYCLE}, {@code REFLECT}, or {@code REPEAT} 

*java.awt.RadialGradientPaint(Point2D,float,Point2D,float[],Color[],MultipleGradientPaint.CycleMethod)*

public RadialGradientPaint(
  java.awt.geom.Point2D center,
  float radius,
  java.awt.geom.Point2D focus,
  float[] fractions,
  java.awt.Color[] colors,
  java.awt.MultipleGradientPaint.CycleMethod cycleMethod)

Constructs aRadialGradientPaintwith a defaultSRGBcolor space. 

    center - the center point, in user space, of the circle defining the gradient. The last color of the gradient is mapped to the perimeter 
       of this circle. 
    radius - the radius of the circle defining the extents of the color gradient 
    focus - the point in user space to which the first color is mapped 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the 
       circle. 
    cycleMethod - either {@code NO_CYCLE}, {@code REFLECT}, or {@code REPEAT} 

*java.awt.RadialGradientPaint(Point2D,float,Point2D,float[],Color[],MultipleGradientPaint.CycleMethod,MultipleGradientPaint.ColorSpaceType,AffineTransform)*

public RadialGradientPaint(
  java.awt.geom.Point2D center,
  float radius,
  java.awt.geom.Point2D focus,
  float[] fractions,
  java.awt.Color[] colors,
  java.awt.MultipleGradientPaint.CycleMethod cycleMethod,
  java.awt.MultipleGradientPaint.ColorSpaceType colorSpace,
  java.awt.geom.AffineTransform gradientTransform)

Constructs aRadialGradientPaint. 

    center - the center point in user space of the circle defining the gradient. The last color of the gradient is mapped to the perimeter 
       of this circle. 
    radius - the radius of the circle defining the extents of the color gradient 
    focus - the point in user space to which the first color is mapped 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the 
       circle. 
    cycleMethod - either {@code NO_CYCLE}, {@code REFLECT}, or {@code REPEAT} 
    colorSpace - which color space to use for interpolation, either {@code SRGB} or {@code LINEAR_RGB} 
    gradientTransform - transform to apply to the gradient 

*java.awt.RadialGradientPaint(Rectangle2D,float[],Color[],MultipleGradientPaint.CycleMethod)*

public RadialGradientPaint(
  java.awt.geom.Rectangle2D gradientBounds,
  float[] fractions,
  java.awt.Color[] colors,
  java.awt.MultipleGradientPaint.CycleMethod cycleMethod)

Constructs aRadialGradientPaintwith a defaultSRGBcolor space. The gradient circle of theRadialGradientPaintis defined by the 
given bounding box. 

This constructor is a more convenient way to express the following (equivalent) code: 



double gw = gradientBounds.getWidth(); double gh = gradientBounds.getHeight(); double cx = gradientBounds.getCenterX(); double 
cy = gradientBounds.getCenterY(); Point2D center = new Point2D.Double(cx, cy); 

AffineTransform gradientTransform = new AffineTransform(); gradientTransform.translate(cx, cy); gradientTransform.scale(gw / 2, 
gh / 2); gradientTransform.translate(-cx, -cy); 

RadialGradientPaint gp = new RadialGradientPaint(center, 1.0f, center, fractions, colors, cycleMethod, ColorSpaceType.SRGB, 
gradientTransform); 

    gradientBounds - the bounding box, in user space, of the circle defining the outermost extent of the gradient 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors to use in the gradient. The first color is used at the focus point, the last color around the perimeter of the 
       circle. 
    cycleMethod - either {@code NO_CYCLE}, {@code REFLECT}, or {@code REPEAT} 

*java.awt.RadialGradientPaint.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)*

public |java.awt.PaintContext| createContext(
  java.awt.image.ColorModel cm,
  java.awt.Rectangle deviceBounds,
  java.awt.geom.Rectangle2D userBounds,
  java.awt.geom.AffineTransform transform,
  java.awt.RenderingHints hints)





*java.awt.RadialGradientPaint.getCenterPoint()*

public |java.awt.geom.Point2D| getCenterPoint()

Returns a copy of the center point of the radial gradient. 



    Returns: a {@code Point2D} object that is a copy of the center point 

*java.awt.RadialGradientPaint.getFocusPoint()*

public |java.awt.geom.Point2D| getFocusPoint()

Returns a copy of the end point of the gradient axis. 



    Returns: a {@code Point2D} object that is a copy of the focus point 

*java.awt.RadialGradientPaint.getRadius()*

public float getRadius()

Returns the radius of the circle defining the radial gradient. 



    Returns: the radius of the circle defining the radial gradient 


