*java.awt.geom.Line2D* *Line2D* This Line2D represents a line segment in(x,y)coordinate space.

public abstract class Line2D
  extends    |java.lang.Object|
  implements |java.awt.Shape|
             |java.lang.Cloneable|

|java.awt.geom.Line2D_Description|
|java.awt.geom.Line2D_Fields|
|java.awt.geom.Line2D_Constructors|
|java.awt.geom.Line2D_Methods|

================================================================================================================================

*java.awt.geom.Line2D_Constructors*
|java.awt.geom.Line2D()|This is an abstract class that cannot be instantiated directly.

*java.awt.geom.Line2D_Methods*
|java.awt.geom.Line2D.clone()|Creates a new object of the same class as this object.
|java.awt.geom.Line2D.contains(double,double)|Tests if a specified coordinate is inside the boundary of this  Line2D.
|java.awt.geom.Line2D.contains(double,double,double,double)|Tests if the interior of this Line2D entirely contains  the specifi
|java.awt.geom.Line2D.contains(Point2D)|Tests if a given Point2D is inside the boundary of  this Line2D.
|java.awt.geom.Line2D.contains(Rectangle2D)|Tests if the interior of this Line2D entirely contains  the specified Rectangle2D.
|java.awt.geom.Line2D.getBounds()|
|java.awt.geom.Line2D.getP1()|Returns the start Point2D of this Line2D.
|java.awt.geom.Line2D.getP2()|Returns the end Point2D of this Line2D.
|java.awt.geom.Line2D.getPathIterator(AffineTransform)|Returns an iteration object that defines the boundary of this  Line2D.
|java.awt.geom.Line2D.getPathIterator(AffineTransform,double)|Returns an iteration object that defines the boundary of this  fl
|java.awt.geom.Line2D.getX1()|Returns the X coordinate of the start point in double precision.
|java.awt.geom.Line2D.getX2()|Returns the X coordinate of the end point in double precision.
|java.awt.geom.Line2D.getY1()|Returns the Y coordinate of the start point in double precision.
|java.awt.geom.Line2D.getY2()|Returns the Y coordinate of the end point in double precision.
|java.awt.geom.Line2D.intersects(double,double,double,double)|
|java.awt.geom.Line2D.intersects(Rectangle2D)|
|java.awt.geom.Line2D.intersectsLine(double,double,double,double)|Tests if the line segment from(x1,y1)to(x2,y2)intersects this
|java.awt.geom.Line2D.intersectsLine(Line2D)|Tests if the specified line segment intersects this line segment.
|java.awt.geom.Line2D.linesIntersect(double,double,double,double,double,double,double,double)|Tests if the line segment from(x1
|java.awt.geom.Line2D.ptLineDist(double,double)|Returns the distance from a point to this line.
|java.awt.geom.Line2D.ptLineDist(double,double,double,double,double,double)|Returns the distance from a point to a line.
|java.awt.geom.Line2D.ptLineDist(Point2D)|Returns the distance from a Point2D to this line.
|java.awt.geom.Line2D.ptLineDistSq(double,double)|Returns the square of the distance from a point to this line.
|java.awt.geom.Line2D.ptLineDistSq(double,double,double,double,double,double)|Returns the square of the distance from a point t
|java.awt.geom.Line2D.ptLineDistSq(Point2D)|Returns the square of the distance from a specified   Point2D to this line.
|java.awt.geom.Line2D.ptSegDist(double,double)|Returns the distance from a point to this line segment.
|java.awt.geom.Line2D.ptSegDist(double,double,double,double,double,double)|Returns the distance from a point to a line segment.
|java.awt.geom.Line2D.ptSegDist(Point2D)|Returns the distance from a Point2D to this line  segment.
|java.awt.geom.Line2D.ptSegDistSq(double,double)|Returns the square of the distance from a point to this line segment.
|java.awt.geom.Line2D.ptSegDistSq(double,double,double,double,double,double)|Returns the square of the distance from a point to
|java.awt.geom.Line2D.ptSegDistSq(Point2D)|Returns the square of the distance from a Point2D to   this line segment.
|java.awt.geom.Line2D.relativeCCW(double,double)|Returns an indicator of where the specified point(px,py)lies with respect to t
|java.awt.geom.Line2D.relativeCCW(double,double,double,double,double,double)|Returns an indicator of where the specified point(
|java.awt.geom.Line2D.relativeCCW(Point2D)|Returns an indicator of where the specified Point2D  lies with respect to this line 
|java.awt.geom.Line2D.setLine(double,double,double,double)|Sets the location of the end points of this Line2D to  the specified
|java.awt.geom.Line2D.setLine(Line2D)|Sets the location of the end points of this Line2D to  the same as those end points of th
|java.awt.geom.Line2D.setLine(Point2D,Point2D)|Sets the location of the end points of this Line2D to  the specified Point2D coo

*java.awt.geom.Line2D_Description*

This Line2D represents a line segment in(x,y)coordinate space. This class, like all of the Java 2D API, uses a default 
coordinate system called user space in which the y-axis values increase downward and x-axis values increase to the right. For 
more information on the user space coordinate system, see the 

Coordinate Systems section of the Java 2D Programmer's Guide. 

This class is only the abstract superclass for all objects that store a 2D line segment. The actual storage representation of 
the coordinates is left to the subclass. 



*java.awt.geom.Line2D()*

protected Line2D()

This is an abstract class that cannot be instantiated directly. Type-specific implementation subclasses are available for 
instantiation and provide a number of formats for storing the information necessary to satisfy the various accessory methods 
below. 


*java.awt.geom.Line2D.clone()*

public |java.lang.Object| clone()

Creates a new object of the same class as this object. 



    Returns: a clone of this instance. 

*java.awt.geom.Line2D.contains(double,double)*

public boolean contains(
  double x,
  double y)

Tests if a specified coordinate is inside the boundary of this Line2D. This method is required to implement the 
(|java.awt.Shape|) interface, but in the case of Line2D objects it always returns false since a line contains no area. 


    x - the X coordinate of the specified point to be tested 
    y - the Y coordinate of the specified point to be tested 

    Returns: false because a Line2D contains no area. 

*java.awt.geom.Line2D.contains(double,double,double,double)*

public boolean contains(
  double x,
  double y,
  double w,
  double h)

Tests if the interior of this Line2D entirely contains the specified set of rectangular coordinates. This method is required to 
implement the Shape interface, but in the case of Line2D objects it always returns false since a line contains no area. 


    x - the X coordinate of the upper-left corner of the specified rectangular area 
    y - the Y coordinate of the upper-left corner of the specified rectangular area 
    w - the width of the specified rectangular area 
    h - the height of the specified rectangular area 

    Returns: false because a Line2D contains no area. 

*java.awt.geom.Line2D.contains(Point2D)*

public boolean contains(java.awt.geom.Point2D p)

Tests if a given Point2D is inside the boundary of this Line2D. This method is required to implement the (|java.awt.Shape|) 
interface, but in the case of Line2D objects it always returns false since a line contains no area. 


    p - the specified Point2D to be tested 

    Returns: false because a Line2D contains no area. 

*java.awt.geom.Line2D.contains(Rectangle2D)*

public boolean contains(java.awt.geom.Rectangle2D r)

Tests if the interior of this Line2D entirely contains the specified Rectangle2D. This method is required to implement the 
Shape interface, but in the case of Line2D objects it always returns false since a line contains no area. 


    r - the specified Rectangle2D to be tested 

    Returns: false because a Line2D contains no area. 

*java.awt.geom.Line2D.getBounds()*

public |java.awt.Rectangle| getBounds()





*java.awt.geom.Line2D.getP1()*

public abstract |java.awt.geom.Point2D| getP1()

Returns the start Point2D of this Line2D. 



    Returns: the start Point2D of this Line2D. 

*java.awt.geom.Line2D.getP2()*

public abstract |java.awt.geom.Point2D| getP2()

Returns the end Point2D of this Line2D. 



    Returns: the end Point2D of this Line2D. 

*java.awt.geom.Line2D.getPathIterator(AffineTransform)*

public |java.awt.geom.PathIterator| getPathIterator(java.awt.geom.AffineTransform at)

Returns an iteration object that defines the boundary of this Line2D. The iterator for this class is not multi-threaded safe, 
which means that this Line2D class does not guarantee that modifications to the geometry of this Line2D object do not affect 
any iterations of that geometry that are already in process. 


    at - the specified {@link AffineTransform} 

    Returns: a {@link PathIterator} that defines the boundary of this Line2D. 

*java.awt.geom.Line2D.getPathIterator(AffineTransform,double)*

public |java.awt.geom.PathIterator| getPathIterator(
  java.awt.geom.AffineTransform at,
  double flatness)

Returns an iteration object that defines the boundary of this flattened Line2D. The iterator for this class is not 
multi-threaded safe, which means that this Line2D class does not guarantee that modifications to the geometry of this Line2D 
object do not affect any iterations of that geometry that are already in process. 


    at - the specified AffineTransform 
    flatness - the maximum amount that the control points for a given curve can vary from colinear before a subdivided curve is replaced by a 
       straight line connecting the end points. Since a Line2D object is always flat, this parameter is ignored. 

    Returns: a PathIterator that defines the boundary of the flattened Line2D 

*java.awt.geom.Line2D.getX1()*

public abstract double getX1()

Returns the X coordinate of the start point in double precision. 



    Returns: the X coordinate of the start point of this {@code Line2D} object. 

*java.awt.geom.Line2D.getX2()*

public abstract double getX2()

Returns the X coordinate of the end point in double precision. 



    Returns: the X coordinate of the end point of this {@code Line2D} object. 

*java.awt.geom.Line2D.getY1()*

public abstract double getY1()

Returns the Y coordinate of the start point in double precision. 



    Returns: the Y coordinate of the start point of this {@code Line2D} object. 

*java.awt.geom.Line2D.getY2()*

public abstract double getY2()

Returns the Y coordinate of the end point in double precision. 



    Returns: the Y coordinate of the end point of this {@code Line2D} object. 

*java.awt.geom.Line2D.intersects(double,double,double,double)*

public boolean intersects(
  double x,
  double y,
  double w,
  double h)





*java.awt.geom.Line2D.intersects(Rectangle2D)*

public boolean intersects(java.awt.geom.Rectangle2D r)





*java.awt.geom.Line2D.intersectsLine(double,double,double,double)*

public boolean intersectsLine(
  double x1,
  double y1,
  double x2,
  double y2)

Tests if the line segment from(x1,y1)to(x2,y2)intersects this line segment. 


    x1 - the X coordinate of the start point of the specified line segment 
    y1 - the Y coordinate of the start point of the specified line segment 
    x2 - the X coordinate of the end point of the specified line segment 
    y2 - the Y coordinate of the end point of the specified line segment 

    Returns: if this line segment and the specified line segment intersect each other; false otherwise. 

*java.awt.geom.Line2D.intersectsLine(Line2D)*

public boolean intersectsLine(java.awt.geom.Line2D l)

Tests if the specified line segment intersects this line segment. 


    l - the specified Line2D 

    Returns: true if this line segment and the specified line segment intersect each other; false otherwise. 

*java.awt.geom.Line2D.linesIntersect(double,double,double,double,double,double,double,double)*

public static boolean linesIntersect(
  double x1,
  double y1,
  double x2,
  double y2,
  double x3,
  double y3,
  double x4,
  double y4)

Tests if the line segment from(x1,y1)to(x2,y2)intersects the line segment from(x3,y3)to(x4,y4). 


    x1 - the X coordinate of the start point of the first specified line segment 
    y1 - the Y coordinate of the start point of the first specified line segment 
    x2 - the X coordinate of the end point of the first specified line segment 
    y2 - the Y coordinate of the end point of the first specified line segment 
    x3 - the X coordinate of the start point of the second specified line segment 
    y3 - the Y coordinate of the start point of the second specified line segment 
    x4 - the X coordinate of the end point of the second specified line segment 
    y4 - the Y coordinate of the end point of the second specified line segment 

    Returns: true if the first specified line segment and the second specified line segment intersect each other; false otherwise. 

*java.awt.geom.Line2D.ptLineDist(double,double)*

public double ptLineDist(
  double px,
  double py)

Returns the distance from a point to this line. The distance measured is the distance between the specified point and the 
closest point on the infinitely-extended line defined by this Line2D. If the specified point intersects the line, this method 
returns 0.0. 


    px - the X coordinate of the specified point being measured against this line 
    py - the Y coordinate of the specified point being measured against this line 

    Returns: a double value that is the distance from a specified point to the current line. 

*java.awt.geom.Line2D.ptLineDist(double,double,double,double,double,double)*

public static double ptLineDist(
  double x1,
  double y1,
  double x2,
  double y2,
  double px,
  double py)

Returns the distance from a point to a line. The distance measured is the distance between the specified point and the closest 
point on the infinitely-extended line defined by the specified coordinates. If the specified point intersects the line, this 
method returns 0.0. 


    x1 - the X coordinate of the start point of the specified line 
    y1 - the Y coordinate of the start point of the specified line 
    x2 - the X coordinate of the end point of the specified line 
    y2 - the Y coordinate of the end point of the specified line 
    px - the X coordinate of the specified point being measured against the specified line 
    py - the Y coordinate of the specified point being measured against the specified line 

    Returns: a double value that is the distance from the specified point to the specified line. 

*java.awt.geom.Line2D.ptLineDist(Point2D)*

public double ptLineDist(java.awt.geom.Point2D pt)

Returns the distance from a Point2D to this line. The distance measured is the distance between the specified point and the 
closest point on the infinitely-extended line defined by this Line2D. If the specified point intersects the line, this method 
returns 0.0. 


    pt - the specified Point2D being measured 

    Returns: a double value that is the distance from a specified Point2D to the current line. 

*java.awt.geom.Line2D.ptLineDistSq(double,double)*

public double ptLineDistSq(
  double px,
  double py)

Returns the square of the distance from a point to this line. The distance measured is the distance between the specified point 
and the closest point on the infinitely-extended line defined by this Line2D. If the specified point intersects the line, this 
method returns 0.0. 


    px - the X coordinate of the specified point being measured against this line 
    py - the Y coordinate of the specified point being measured against this line 

    Returns: a double value that is the square of the distance from a specified point to the current line. 

*java.awt.geom.Line2D.ptLineDistSq(double,double,double,double,double,double)*

public static double ptLineDistSq(
  double x1,
  double y1,
  double x2,
  double y2,
  double px,
  double py)

Returns the square of the distance from a point to a line. The distance measured is the distance between the specified point 
and the closest point on the infinitely-extended line defined by the specified coordinates. If the specified point intersects 
the line, this method returns 0.0. 


    x1 - the X coordinate of the start point of the specified line 
    y1 - the Y coordinate of the start point of the specified line 
    x2 - the X coordinate of the end point of the specified line 
    y2 - the Y coordinate of the end point of the specified line 
    px - the X coordinate of the specified point being measured against the specified line 
    py - the Y coordinate of the specified point being measured against the specified line 

    Returns: a double value that is the square of the distance from the specified point to the specified line. 

*java.awt.geom.Line2D.ptLineDistSq(Point2D)*

public double ptLineDistSq(java.awt.geom.Point2D pt)

Returns the square of the distance from a specified Point2D to this line. The distance measured is the distance between the 
specified point and the closest point on the infinitely-extended line defined by this Line2D. If the specified point intersects 
the line, this method returns 0.0. 


    pt - the specified Point2D being measured against this line 

    Returns: a double value that is the square of the distance from a specified Point2D to the current line. 

*java.awt.geom.Line2D.ptSegDist(double,double)*

public double ptSegDist(
  double px,
  double py)

Returns the distance from a point to this line segment. The distance measured is the distance between the specified point and 
the closest point between the current line's end points. If the specified point intersects the line segment in between the end 
points, this method returns 0.0. 


    px - the X coordinate of the specified point being measured against this line segment 
    py - the Y coordinate of the specified point being measured against this line segment 

    Returns: a double value that is the distance from the specified point to the current line segment. 

*java.awt.geom.Line2D.ptSegDist(double,double,double,double,double,double)*

public static double ptSegDist(
  double x1,
  double y1,
  double x2,
  double y2,
  double px,
  double py)

Returns the distance from a point to a line segment. The distance measured is the distance between the specified point and the 
closest point between the specified end points. If the specified point intersects the line segment in between the end points, 
this method returns 0.0. 


    x1 - the X coordinate of the start point of the specified line segment 
    y1 - the Y coordinate of the start point of the specified line segment 
    x2 - the X coordinate of the end point of the specified line segment 
    y2 - the Y coordinate of the end point of the specified line segment 
    px - the X coordinate of the specified point being measured against the specified line segment 
    py - the Y coordinate of the specified point being measured against the specified line segment 

    Returns: a double value that is the distance from the specified point to the specified line segment. 

*java.awt.geom.Line2D.ptSegDist(Point2D)*

public double ptSegDist(java.awt.geom.Point2D pt)

Returns the distance from a Point2D to this line segment. The distance measured is the distance between the specified point and 
the closest point between the current line's end points. If the specified point intersects the line segment in between the end 
points, this method returns 0.0. 


    pt - the specified Point2D being measured against this line segment 

    Returns: a double value that is the distance from the specified Point2D to the current line segment. 

*java.awt.geom.Line2D.ptSegDistSq(double,double)*

public double ptSegDistSq(
  double px,
  double py)

Returns the square of the distance from a point to this line segment. The distance measured is the distance between the 
specified point and the closest point between the current line's end points. If the specified point intersects the line segment 
in between the end points, this method returns 0.0. 


    px - the X coordinate of the specified point being measured against this line segment 
    py - the Y coordinate of the specified point being measured against this line segment 

    Returns: a double value that is the square of the distance from the specified point to the current line segment. 

*java.awt.geom.Line2D.ptSegDistSq(double,double,double,double,double,double)*

public static double ptSegDistSq(
  double x1,
  double y1,
  double x2,
  double y2,
  double px,
  double py)

Returns the square of the distance from a point to a line segment. The distance measured is the distance between the specified 
point and the closest point between the specified end points. If the specified point intersects the line segment in between the 
end points, this method returns 0.0. 


    x1 - the X coordinate of the start point of the specified line segment 
    y1 - the Y coordinate of the start point of the specified line segment 
    x2 - the X coordinate of the end point of the specified line segment 
    y2 - the Y coordinate of the end point of the specified line segment 
    px - the X coordinate of the specified point being measured against the specified line segment 
    py - the Y coordinate of the specified point being measured against the specified line segment 

    Returns: a double value that is the square of the distance from the specified point to the specified line segment. 

*java.awt.geom.Line2D.ptSegDistSq(Point2D)*

public double ptSegDistSq(java.awt.geom.Point2D pt)

Returns the square of the distance from a Point2D to this line segment. The distance measured is the distance between the 
specified point and the closest point between the current line's end points. If the specified point intersects the line segment 
in between the end points, this method returns 0.0. 


    pt - the specified Point2D being measured against this line segment. 

    Returns: a double value that is the square of the distance from the specified Point2D to the current line segment. 

*java.awt.geom.Line2D.relativeCCW(double,double)*

public int relativeCCW(
  double px,
  double py)

Returns an indicator of where the specified point(px,py)lies with respect to this line segment. See the method comments of 
(|java.awt.geom.Line2D|) to interpret the return value. 


    px - the X coordinate of the specified point to be compared with this Line2D 
    py - the Y coordinate of the specified point to be compared with this Line2D 

    Returns: an integer that indicates the position of the specified coordinates with respect to this Line2D 

*java.awt.geom.Line2D.relativeCCW(double,double,double,double,double,double)*

public static int relativeCCW(
  double x1,
  double y1,
  double x2,
  double y2,
  double px,
  double py)

Returns an indicator of where the specified point(px,py)lies with respect to the line segment from(x1,y1)to(x2,y2). The return 
value can be either 1, -1, or 0 and indicates in which direction the specified line must pivot around its first end 
point,(x1,y1), in order to point at the specified point(px,py). A return value of 1 indicates that the line segment must turn 
in the direction that takes the positive X axis towards the negative Y axis. In the default coordinate system used by Java 2D, 
this direction is counterclockwise. A return value of -1 indicates that the line segment must turn in the direction that takes 
the positive X axis towards the positive Y axis. In the default coordinate system, this direction is clockwise. A return value 
of 0 indicates that the point lies exactly on the line segment. Note that an indicator value of 0 is rare and not useful for 
determining colinearity because of floating point rounding issues. If the point is colinear with the line segment, but not 
between the end points, then the value will be -1 if the point lies "beyond(x1,y1)" or 1 if the point lies "beyond(x2,y2)". 


    x1 - the X coordinate of the start point of the specified line segment 
    y1 - the Y coordinate of the start point of the specified line segment 
    x2 - the X coordinate of the end point of the specified line segment 
    y2 - the Y coordinate of the end point of the specified line segment 
    px - the X coordinate of the specified point to be compared with the specified line segment 
    py - the Y coordinate of the specified point to be compared with the specified line segment 

    Returns: an integer that indicates the position of the third specified coordinates with respect to the line segment formed by the first 
             two specified coordinates. 

*java.awt.geom.Line2D.relativeCCW(Point2D)*

public int relativeCCW(java.awt.geom.Point2D p)

Returns an indicator of where the specified Point2D lies with respect to this line segment. See the method comments of 
(|java.awt.geom.Line2D|) to interpret the return value. 


    p - the specified Point2D to be compared with this Line2D 

    Returns: an integer that indicates the position of the specified Point2D with respect to this Line2D 

*java.awt.geom.Line2D.setLine(double,double,double,double)*

public abstract void setLine(
  double x1,
  double y1,
  double x2,
  double y2)

Sets the location of the end points of this Line2D to the specified double coordinates. 


    x1 - the X coordinate of the start point 
    y1 - the Y coordinate of the start point 
    x2 - the X coordinate of the end point 
    y2 - the Y coordinate of the end point 

*java.awt.geom.Line2D.setLine(Line2D)*

public void setLine(java.awt.geom.Line2D l)

Sets the location of the end points of this Line2D to the same as those end points of the specified Line2D. 


    l - the specified Line2D 

*java.awt.geom.Line2D.setLine(Point2D,Point2D)*

public void setLine(
  java.awt.geom.Point2D p1,
  java.awt.geom.Point2D p2)

Sets the location of the end points of this Line2D to the specified Point2D coordinates. 


    p1 - the start Point2D of the line segment 
    p2 - the end Point2D of the line segment 


