*java.text.BreakIterator* *BreakIterator* The BreakIterator class implements methods for finding
 the location of boundaries in 

public abstract class BreakIterator
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|

|java.text.BreakIterator_Description|
|java.text.BreakIterator_Fields|
|java.text.BreakIterator_Constructors|
|java.text.BreakIterator_Methods|

================================================================================================================================

*java.text.BreakIterator_Fields*
|int_java.text.BreakIterator.DONE|

*java.text.BreakIterator_Constructors*
|java.text.BreakIterator()|Constructor.

*java.text.BreakIterator_Methods*
|java.text.BreakIterator.clone()|Create a copy of this iterator
|java.text.BreakIterator.current()|Returns character index of the text boundary that was most   recently returned by next(), ne
|java.text.BreakIterator.first()|Returns the first boundary.
|java.text.BreakIterator.following(int)|Returns the first boundary following the specified character offset.
|java.text.BreakIterator.getAvailableLocales()|Returns an array of all locales for which the  get*Instance methods of this clas
|java.text.BreakIterator.getCharacterInstance()|Returns a new BreakIterator instance  for character breaks  for theLocale#getDe
|java.text.BreakIterator.getCharacterInstance(Locale)|Returns a new BreakIterator instance  for character breaks  for the given
|java.text.BreakIterator.getLineInstance()|Returns a new BreakIterator instance  for line breaks  for theLocale#getDefault() de
|java.text.BreakIterator.getLineInstance(Locale)|Returns a new BreakIterator instance  for line breaks  for the given locale.
|java.text.BreakIterator.getSentenceInstance()|Returns a new BreakIterator instance  for sentence breaks  for theLocale#getDefa
|java.text.BreakIterator.getSentenceInstance(Locale)|Returns a new BreakIterator instance  for sentence breaks  for the given l
|java.text.BreakIterator.getText()|Get the text being scanned
|java.text.BreakIterator.getWordInstance()|Returns a new BreakIterator instance  for word breaks  for theLocale#getDefault() de
|java.text.BreakIterator.getWordInstance(Locale)|Returns a new BreakIterator instance  for word breaks  for the given locale.
|java.text.BreakIterator.isBoundary(int)|Returns true if the specified character offset is a text boundary.
|java.text.BreakIterator.last()|Returns the last boundary.
|java.text.BreakIterator.next()|Returns the boundary following the current boundary.
|java.text.BreakIterator.next(int)|Returns the nth boundary from the current boundary.
|java.text.BreakIterator.preceding(int)|Returns the last boundary preceding the specified character offset.
|java.text.BreakIterator.previous()|Returns the boundary preceding the current boundary.
|java.text.BreakIterator.setText(CharacterIterator)|Set a new text for scanning.
|java.text.BreakIterator.setText(String)|Set a new text string to be scanned.

*java.text.BreakIterator_Description*

The BreakIterator class implements methods for finding the location of boundaries in text. Instances of BreakIterator maintain 
a current position and scan over text returning the index of characters where boundaries occur. Internally, BreakIterator scans 
text using a CharacterIterator, and is thus able to scan text held by any object implementing that protocol. A 
StringCharacterIterator is used to scan String objects passed to setText. 

You use the factory methods provided by this class to create instances of various types of break iterators. In particular, use 
getWordIterator, getLineIterator, getSentenceIterator, and getCharacterIterator to create BreakIterators that perform word, 
line, sentence, and character boundary analysis respectively. A single BreakIterator can work only on one unit (word, line, 
sentence, and so on). You must use a different iterator for each unit boundary analysis you wish to perform. 

Line boundary analysis determines where a text string can be broken when line-wrapping. The mechanism correctly handles 
punctuation and hyphenated words. Actual line breaking needs to also consider the available line width and is handled by 
higher-level software. 

Sentence boundary analysis allows selection with correct interpretation of periods within numbers and abbreviations, and 
trailing punctuation marks such as quotation marks and parentheses. 

Word boundary analysis is used by search and replace functions, as well as within text editing applications that allow the user 
to select words with a double click. Word selection provides correct interpretation of punctuation marks within and following 
words. Characters that are not part of a word, such as symbols or punctuation marks, have word-breaks on both sides. 

Character boundary analysis allows users to interact with characters as they expect to, for example, when moving the cursor 
through a text string. Character boundary analysis provides correct navigation through character strings, regardless of how the 
character is stored. The boundaries returned may be those of supplementary characters, combining character sequences, or 
ligature clusters. For example, an accented character might be stored as a base character and a diacritical mark. What users 
consider to be a character can differ between languages. 

The BreakIterator instances returned by the factory methods of this class are intended for use with natural languages only, not 
for programming language text. It is however possible to define subclasses that tokenize a programming language. 

Examples: Creating and using text boundaries: 



public static void main(String args[]) { if (args.length == 1) { String stringToExamine = args[0]; //print each word in order 
BreakIterator boundary = BreakIterator.getWordInstance(); boundary.setText(stringToExamine); printEachForward(boundary, 
stringToExamine); //print each sentence in reverse order boundary = BreakIterator.getSentenceInstance(Locale.US); 
boundary.setText(stringToExamine); printEachBackward(boundary, stringToExamine); printFirst(boundary, stringToExamine); 
printLast(boundary, stringToExamine); } } 



Print each element in order: 



public static void printEachForward(BreakIterator boundary, String source) { int start = boundary.first(); for (int end = 
boundary.next(); end != BreakIterator.DONE; start = end, end = boundary.next()) { 
System.out.println(source.substring(start,end)); } } 



Print each element in reverse order: 



public static void printEachBackward(BreakIterator boundary, String source) { int end = boundary.last(); for (int start = 
boundary.previous(); start != BreakIterator.DONE; end = start, start = boundary.previous()) { 
System.out.println(source.substring(start,end)); } } 



Print first element: 



public static void printFirst(BreakIterator boundary, String source) { int start = boundary.first(); int end = boundary.next(); 
System.out.println(source.substring(start,end)); } 



Print last element: 



public static void printLast(BreakIterator boundary, String source) { int end = boundary.last(); int start = 
boundary.previous(); System.out.println(source.substring(start,end)); } 



Print the element at a specified position: 



public static void printAt(BreakIterator boundary, int pos, String source) { int end = boundary.following(pos); int start = 
boundary.previous(); System.out.println(source.substring(start,end)); } 



Find the next word: 



public static int nextWordStartAfter(int pos, String text) { BreakIterator wb = BreakIterator.getWordInstance(); 
wb.setText(text); int last = wb.following(pos); int current = wb.next(); while (current != BreakIterator.DONE) { for (int p = 
last; p 



*int_java.text.BreakIterator.DONE*

DONE is returned by previous(), next(), next(int), preceding(int) and following(int) when either the first or last text 
boundary has been reached. 



*java.text.BreakIterator()*

protected BreakIterator()

Constructor. BreakIterator is stateless and has no default behavior. 


*java.text.BreakIterator.clone()*

public |java.lang.Object| clone()

Create a copy of this iterator 



    Returns: A copy of this 

*java.text.BreakIterator.current()*

public abstract int current()

Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), 
following(int) or preceding(int). If any of these methods returns BreakIterator.DONE because either first or last text boundary 
has been reached, it returns the first or last text boundary depending on which one is reached. 



    Returns: The text boundary returned from the above methods, first or last text boundary. 

*java.text.BreakIterator.first()*

public abstract int first()

Returns the first boundary. The iterator's current position is set to the first text boundary. 



    Returns: The character index of the first text boundary. 

*java.text.BreakIterator.following(int)*

public abstract int following(int offset)

Returns the first boundary following the specified character offset. If the specified offset equals to the last text boundary, 
it returns BreakIterator.DONE and the iterator's current position is unchanged. Otherwise, the iterator's current position is 
set to the returned boundary. The value returned is always greater than the offset or the value BreakIterator.DONE. 


    offset - the character offset to begin scanning. 

    Returns: The first boundary after the specified offset or BreakIterator.DONE if the last text boundary is passed in as the offset. 

*java.text.BreakIterator.getAvailableLocales()*

public static synchronized |java.util.Locale|[] getAvailableLocales()

Returns an array of all locales for which the get*Instance methods of this class can return localized instances. The returned 
array represents the union of locales supported by the Java runtime and by installed 
BreakIteratorProvider(|java.text.spi.BreakIteratorProvider|) implementations. It must contain at least a Locale instance equal 
to Locale.US(|java.util.Locale|) . 



    Returns: An array of locales for which localized BreakIterator instances are available. 

*java.text.BreakIterator.getCharacterInstance()*

public static |java.text.BreakIterator| getCharacterInstance()

Returns a new BreakIterator instance for character breaks for the default locale(|java.util.Locale|) . 



    Returns: A break iterator for character breaks 

*java.text.BreakIterator.getCharacterInstance(Locale)*

public static |java.text.BreakIterator| getCharacterInstance(java.util.Locale locale)

Returns a new BreakIterator instance for character breaks for the given locale. 


    locale - the desired locale 

    Returns: A break iterator for character breaks 

*java.text.BreakIterator.getLineInstance()*

public static |java.text.BreakIterator| getLineInstance()

Returns a new BreakIterator instance for line breaks for the default locale(|java.util.Locale|) . 



    Returns: A break iterator for line breaks 

*java.text.BreakIterator.getLineInstance(Locale)*

public static |java.text.BreakIterator| getLineInstance(java.util.Locale locale)

Returns a new BreakIterator instance for line breaks for the given locale. 


    locale - the desired locale 

    Returns: A break iterator for line breaks 

*java.text.BreakIterator.getSentenceInstance()*

public static |java.text.BreakIterator| getSentenceInstance()

Returns a new BreakIterator instance for sentence breaks for the default locale(|java.util.Locale|) . 



    Returns: A break iterator for sentence breaks 

*java.text.BreakIterator.getSentenceInstance(Locale)*

public static |java.text.BreakIterator| getSentenceInstance(java.util.Locale locale)

Returns a new BreakIterator instance for sentence breaks for the given locale. 


    locale - the desired locale 

    Returns: A break iterator for sentence breaks 

*java.text.BreakIterator.getText()*

public abstract |java.text.CharacterIterator| getText()

Get the text being scanned 



    Returns: the text being scanned 

*java.text.BreakIterator.getWordInstance()*

public static |java.text.BreakIterator| getWordInstance()

Returns a new BreakIterator instance for word breaks for the default locale(|java.util.Locale|) . 



    Returns: A break iterator for word breaks 

*java.text.BreakIterator.getWordInstance(Locale)*

public static |java.text.BreakIterator| getWordInstance(java.util.Locale locale)

Returns a new BreakIterator instance for word breaks for the given locale. 


    locale - the desired locale 

    Returns: A break iterator for word breaks 

*java.text.BreakIterator.isBoundary(int)*

public boolean isBoundary(int offset)

Returns true if the specified character offset is a text boundary. 


    offset - the character offset to check. 

    Returns: true if "offset" is a boundary position, false otherwise. 

*java.text.BreakIterator.last()*

public abstract int last()

Returns the last boundary. The iterator's current position is set to the last text boundary. 



    Returns: The character index of the last text boundary. 

*java.text.BreakIterator.next()*

public abstract int next()

Returns the boundary following the current boundary. If the current boundary is the last text boundary, it returns 
BreakIterator.DONE and the iterator's current position is unchanged. Otherwise, the iterator's current position is set to the 
boundary following the current boundary. 



    Returns: The character index of the next text boundary or BreakIterator.DONE if the current boundary is the last text boundary. 
             Equivalent to next(1). 

*java.text.BreakIterator.next(int)*

public abstract int next(int n)

Returns the nth boundary from the current boundary. If either the first or last text boundary has been reached, it returns 
BreakIterator.DONE and the current position is set to either the first or last text boundary depending on which one is reached. 
Otherwise, the iterator's current position is set to the new boundary. For example, if the iterator's current position is the 
mth text boundary and three more boundaries exist from the current boundary to the last text boundary, the next(2) call will 
return m + 2. The new text position is set to the (m + 2)th text boundary. A next(4) call would return BreakIterator.DONE and 
the last text boundary would become the new text position. 


    n - which boundary to return. A value of 0 does nothing. Negative values move to previous boundaries and positive values move to 
       later boundaries. 

    Returns: The character index of the nth boundary from the current position or BreakIterator.DONE if either first or last text boundary 
             has been reached. 

*java.text.BreakIterator.preceding(int)*

public int preceding(int offset)

Returns the last boundary preceding the specified character offset. If the specified offset equals to the first text boundary, 
it returns BreakIterator.DONE and the iterator's current position is unchanged. Otherwise, the iterator's current position is 
set to the returned boundary. The value returned is always less than the offset or the value BreakIterator.DONE. 


    offset - the characater offset to begin scanning. 

    Returns: The last boundary before the specified offset or BreakIterator.DONE if the first text boundary is passed in as the offset. 

*java.text.BreakIterator.previous()*

public abstract int previous()

Returns the boundary preceding the current boundary. If the current boundary is the first text boundary, it returns 
BreakIterator.DONE and the iterator's current position is unchanged. Otherwise, the iterator's current position is set to the 
boundary preceding the current boundary. 



    Returns: The character index of the previous text boundary or BreakIterator.DONE if the current boundary is the first text boundary. 

*java.text.BreakIterator.setText(CharacterIterator)*

public abstract void setText(java.text.CharacterIterator newText)

Set a new text for scanning. The current scan position is reset to first(). 


    newText - new text to scan. 

*java.text.BreakIterator.setText(String)*

public void setText(java.lang.String newText)

Set a new text string to be scanned. The current scan position is reset to first(). 


    newText - new text to scan. 


