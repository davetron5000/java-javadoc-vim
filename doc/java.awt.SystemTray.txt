*java.awt.SystemTray* *SystemTray* The SystemTray class represents the system tray for a
 desktop.

public class SystemTray
  extends    |java.lang.Object|

|java.awt.SystemTray_Description|
|java.awt.SystemTray_Fields|
|java.awt.SystemTray_Constructors|
|java.awt.SystemTray_Methods|

================================================================================================================================

*java.awt.SystemTray_Methods*
|java.awt.SystemTray.add(TrayIcon)|Adds a TrayIcon to the SystemTray.
|java.awt.SystemTray.addPropertyChangeListener(String,PropertyChangeListener)|Adds aPropertyChangeListenerto the listener list 
|java.awt.SystemTray.getPropertyChangeListeners(String)|Returns an array of all the listeners that have been associated   with 
|java.awt.SystemTray.getSystemTray()|Gets the SystemTray instance that represents the  desktop's tray area.
|java.awt.SystemTray.getTrayIcons()|Returns an array of all icons added to the tray by this  application.
|java.awt.SystemTray.getTrayIconSize()|Returns the size, in pixels, of the space that a tray icon will  occupy in the system tr
|java.awt.SystemTray.isSupported()|Returns whether the system tray is supported on the current  platform.
|java.awt.SystemTray.remove(TrayIcon)|Removes the specified TrayIcon from the  SystemTray.
|java.awt.SystemTray.removePropertyChangeListener(String,PropertyChangeListener)|Removes aPropertyChangeListenerfrom the listen

*java.awt.SystemTray_Description*

The SystemTray class represents the system tray for a desktop. On Microsoft Windows it is referred to as the "Taskbar Status 
Area", on Gnome it is referred to as the "Notification Area", on KDE it is referred to as the "System Tray". The system tray is 
shared by all applications running on the desktop. 

On some platforms the system tray may not be present or may not be supported, in this case (|java.awt.SystemTray|) throws 
(|java.lang.UnsupportedOperationException|) . To detect whether the system tray is supported, use (|java.awt.SystemTray|) . 

The SystemTray may contain one or more TrayIcons(|java.awt.TrayIcon|) , which are added to the tray using the 
(|java.awt.SystemTray|) method, and removed when no longer needed, using the (|java.awt.SystemTray|) . TrayIcon consists of an 
image, a popup menu and a set of associated listeners. Please see the (|java.awt.TrayIcon|) class for details. 

Every Java application has a single SystemTray instance that allows the app to interface with the system tray of the desktop 
while the app is running. The SystemTray instance can be obtained from the (|java.awt.SystemTray|) method. An application may 
not create its own instance of SystemTray. 

The following code snippet demonstrates how to access and customize the system tray: 

(|java.awt.TrayIcon|) trayIcon = null; if (SystemTray.isSupported()) { // get the SystemTray instance SystemTray tray = 
SystemTray. (|java.awt.SystemTray|) ; // load an image (|java.awt.Image|) image = 
Toolkit.getDefaultToolkit.getImage(|java.awt.Toolkit|) (...); // create a action listener to listen for default action executed 
on the tray icon (|java.awt.event.ActionListener|) listener = new ActionListener(|java.awt.event.ActionListener|) () { public 
void actionPerformed(|java.awt.event.ActionListener|) ( (|java.awt.event.ActionEvent|) e) { // execute default action of the 
application // ... } }; // create a popup menu (|java.awt.PopupMenu|) popup = new PopupMenu(|java.awt.PopupMenu|) (); // create 
menu item for the default action MenuItem defaultItem = new MenuItem(...); defaultItem.addActionListener(listener); 
popup.add(defaultItem); /// ... add other items // construct a TrayIcon trayIcon = new TrayIcon(|java.awt.TrayIcon|) (image, 
"Tray Demo", popup); // set the TrayIcon properties trayIcon. addActionListener(|java.awt.TrayIcon|) (listener); // ... // add 
the tray image try { tray. add(|java.awt.SystemTray|) (trayIcon); } catch (AWTException e) { System.err.println(e); } // ... } 
else { // disable tray option in your application or // perform other actions ... } // ... // some time later // the 
application state has changed - update the image if (trayIcon != null) { trayIcon. setImage(|java.awt.TrayIcon|) 
(updatedImage); } // ... 





*java.awt.SystemTray.add(TrayIcon)*

public void add(java.awt.TrayIcon trayIcon)
  throws |java.awt.AWTException|
         
Adds a TrayIcon to the SystemTray. The tray icon becomes visible in the system tray once it is added. The order in which icons 
are displayed in a tray is not specified - it is platform and implementation-dependent. 

All icons added by the application are automatically removed from the SystemTray upon application exit and also when the 
desktop system tray becomes unavailable. 


    trayIcon - the TrayIcon to be added 

*java.awt.SystemTray.addPropertyChangeListener(String,PropertyChangeListener)*

public synchronized void addPropertyChangeListener(
  java.lang.String propertyName,
  java.beans.PropertyChangeListener listener)

Adds aPropertyChangeListenerto the listener list for a specific property. Currently supported property: 

trayIcons 

ThisSystemTray's array ofTrayIcons. The array is accessed via (|java.awt.SystemTray|) . This property is changed when 
aTrayIconis added to (or removed from) theSystemTray. For example, this property is changed when the nativeSystemTraybecomes 
unavailable on the desktop and theTrayIcons are automatically removed. 

Thelistenerlistens to property changes only in this context. 

Iflistenerisnull, no exception is thrown and no action is performed. 


    propertyName - the specified property 
    listener - the property change listener to be added 

*java.awt.SystemTray.getPropertyChangeListeners(String)*

public synchronized |java.beans.PropertyChangeListener|[] getPropertyChangeListeners(java.lang.String propertyName)

Returns an array of all the listeners that have been associated with the named property. 

Only the listeners in this context are returned. 


    propertyName - the specified property 

    Returns: all of the {@code PropertyChangeListener}s associated with the named property; if no such listeners have been added or if 
             {@code propertyName} is {@code null} or invalid, an empty array is returned 

*java.awt.SystemTray.getSystemTray()*

public static |java.awt.SystemTray| getSystemTray()

Gets the SystemTray instance that represents the desktop's tray area. This always returns the same instance per application. On 
some platforms the system tray may not be supported. You may use the (|java.awt.SystemTray|) method to check if the system tray 
is supported. 

If a SecurityManager is installed, the AWTPermissionaccessSystemTraymust be granted in order to get theSystemTrayinstance. 
Otherwise this method will throw a SecurityException. 



    Returns: the SystemTray instance that represents the desktop's tray area 

*java.awt.SystemTray.getTrayIcons()*

public |java.awt.TrayIcon|[] getTrayIcons()

Returns an array of all icons added to the tray by this application. You can't access the icons added by another application. 
Some browsers partition applets in different code bases into separate contexts, and establish walls between these contexts. In 
such a scenario, only the tray icons added from this context will be returned. 

The returned array is a copy of the actual array and may be modified in any way without affecting the system tray. To remove a 
TrayIcon from the SystemTray, use the (|java.awt.SystemTray|) method. 



    Returns: an array of all tray icons added to this tray, or an empty array if none has been added 

*java.awt.SystemTray.getTrayIconSize()*

public |java.awt.Dimension| getTrayIconSize()

Returns the size, in pixels, of the space that a tray icon will occupy in the system tray. Developers may use this methods to 
acquire the preferred size for the image property of a tray icon before it is created. For convenience, there is a similar 
method (|java.awt.TrayIcon|) in the TrayIcon class. 



    Returns: the default size of a tray icon, in pixels 

*java.awt.SystemTray.isSupported()*

public static boolean isSupported()

Returns whether the system tray is supported on the current platform. In addition to displaying the tray icon, minimal system 
tray support includes either a popup menu (see (|java.awt.TrayIcon|) ) or an action event (see (|java.awt.TrayIcon|) ). 

Developers should not assume that all of the system tray functionality is supported. To guarantee that the tray icon's default 
action is always accessible, add the default action to both the action listener and the popup menu. See the 
example(|java.awt.SystemTray|) for an example of how to do this. 

Note: When implementing SystemTray and TrayIcon it is strongly recommended that you assign different gestures to the popup menu 
and an action event. Overloading a gesture for both purposes is confusing and may prevent the user from accessing one or the 
other. 



    Returns: false if no system tray access is supported; this method returns true if the minimal system tray access is supported but does 
             not guarantee that all system tray functionality is supported for the current platform 

*java.awt.SystemTray.remove(TrayIcon)*

public void remove(java.awt.TrayIcon trayIcon)

Removes the specified TrayIcon from the SystemTray. 

All icons added by the application are automatically removed from the SystemTray upon application exit and also when the 
desktop system tray becomes unavailable. 

If trayIcon is null or was not added to the system tray, no exception is thrown and no action is performed. 


    trayIcon - the TrayIcon to be removed 

*java.awt.SystemTray.removePropertyChangeListener(String,PropertyChangeListener)*

public synchronized void removePropertyChangeListener(
  java.lang.String propertyName,
  java.beans.PropertyChangeListener listener)

Removes aPropertyChangeListenerfrom the listener list for a specific property. 

ThePropertyChangeListenermust be from this context. 

IfpropertyNameorlistenerisnullor invalid, no exception is thrown and no action is taken. 


    propertyName - the specified property 
    listener - the PropertyChangeListener to be removed 


