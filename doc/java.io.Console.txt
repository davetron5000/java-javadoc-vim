*java.io.Console* *Console* Methods to access the character-based console device, if any, associated
 with the current Java virt

public final class Console
  extends    |java.lang.Object|
  implements |java.io.Flushable|

|java.io.Console_Description|
|java.io.Console_Fields|
|java.io.Console_Constructors|
|java.io.Console_Methods|

================================================================================================================================

*java.io.Console_Methods*
|java.io.Console.flush()|Flushes the console and forces any buffered output to be written  immediately .
|java.io.Console.format(String,Object...)|Writes a formatted string to this console's output stream using  the specified format
|java.io.Console.printf(String,Object...)|A convenience method to write a formatted string to this console's  output stream usi
|java.io.Console.reader()|Retrieves the uniquejava.io.Reader Readerobject associated  with this console.
|java.io.Console.readLine()|Reads a single line of text from the console.
|java.io.Console.readLine(String,Object...)|Provides a formatted prompt, then reads a single line of text from the  console.
|java.io.Console.readPassword()|Reads a password or passphrase from the console with echoing disabled
|java.io.Console.readPassword(String,Object...)|Provides a formatted prompt, then reads a password or passphrase from  the cons
|java.io.Console.writer()|Retrieves the uniquejava.io.PrintWriter PrintWriterobject  associated with this console.

*java.io.Console_Description*

Methods to access the character-based console device, if any, associated with the current Java virtual machine. 

Whether a virtual machine has a console is dependent upon the underlying platform and also upon the manner in which the virtual 
machine is invoked. If the virtual machine is started from an interactive command line without redirecting the standard input 
and output streams then its console will exist and will typically be connected to the keyboard and display from which the 
virtual machine was launched. If the virtual machine is started automatically, for example by a background job scheduler, then 
it will typically not have a console. 

If this virtual machine has a console then it is represented by a unique instance of this class which can be obtained by 
invoking the (|java.lang.System|) method. If no console device is available then an invocation of that method will return null. 

Read and write operations are synchronized to guarantee the atomic completion of critical operations; therefore invoking 
methods (|java.io.Console|) , (|java.io.Console|) , format()(|java.io.Console|) , printf()(|java.io.Console|) as well as the 
read, format and write operations on the objects returned by (|java.io.Console|) and (|java.io.Console|) may block in 
multithreaded scenarios. 

Invoking close() on the objects returned by the (|java.io.Console|) and the (|java.io.Console|) will not close the underlying 
stream of those objects. 

The console-read methods return null when the end of the console input stream is reached, for example by typing control-D on 
Unix or control-Z on Windows. Subsequent read operations will succeed if additional characters are later entered on the 
console's input device. 

Unless otherwise specified, passing a null argument to any method in this class will cause a (|java.lang.NullPointerException|) 
to be thrown. 

Security note: If an application needs to read a password or other secure data, it should use (|java.io.Console|) or 
(|java.io.Console|) and manually zero the returned character array after processing to minimize the lifetime of sensitive data 
in memory. 



Console cons; char[] passwd; if ((cons = System.console()) != null (passwd = cons.readPassword("[%s]", "Password:")) != null) { 
... java.util.Arrays.fill(passwd, ' '); } 



*java.io.Console.flush()*

public void flush()

Flushes the console and forces any buffered output to be written immediately . 



*java.io.Console.format(String,Object...)*

public |java.io.Console| format(
  java.lang.String fmt,
  java.lang.Object[] args)

Writes a formatted string to this console's output stream using the specified format string and arguments. 


    fmt - A format string as described in Format string syntax 
    args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the 
       extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is 
       limited by the maximum dimension of a Java array as defined by the Java Virtual Machine Specification. The behaviour on 
       a null argument depends on the conversion. 

    Returns: 

*java.io.Console.printf(String,Object...)*

public |java.io.Console| printf(
  java.lang.String format,
  java.lang.Object[] args)

A convenience method to write a formatted string to this console's output stream using the specified format string and 
arguments. 

An invocation of this method of the form con.printf(format, args) behaves in exactly the same way as the invocation of 

con.format(format, args) . 


    format - A format string as described in Format string syntax. 
    args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the 
       extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is 
       limited by the maximum dimension of a Java array as defined by the Java Virtual Machine Specification. The behaviour on 
       a null argument depends on the conversion. 

    Returns: 

*java.io.Console.reader()*

public |java.io.Reader| reader()

Retrieves the unique Reader(|java.io.Reader|) object associated with this console. 

This method is intended to be used by sophisticated applications, for example, a (|java.util.Scanner|) object which utilizes 
the rich parsing/scanning functionality provided by the Scanner: 

Console con = System.console(); if (con != null) { Scanner sc = new Scanner(con.reader()); ... } 

For simple applications requiring only line-oriented reading, use (|java.io.Console|) . 

The bulk read operations read(char[]) (|java.io.Reader|) , read(char[], int, int) (|java.io.Reader|) and 
read(java.nio.CharBuffer)(|java.io.Reader|) on the returned object will not read in characters beyond the line bound for each 
invocation, even if the destination buffer has space for more characters. A line bound is considered to be any one of a line 
feed ('\n'), a carriage return ('\r'), a carriage return followed immediately by a linefeed, or an end of stream. 



    Returns: The reader associated with this console 

*java.io.Console.readLine()*

public |java.lang.String| readLine()

Reads a single line of text from the console. 



    Returns: A string containing the line read from the console, not including any line-termination characters, or null if an end of stream 
             has been reached. 

*java.io.Console.readLine(String,Object...)*

public |java.lang.String| readLine(
  java.lang.String fmt,
  java.lang.Object[] args)

Provides a formatted prompt, then reads a single line of text from the console. 


    fmt - A format string as described in Format string syntax. 
    args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the 
       extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as 
       defined by the Java Virtual Machine Specification. 

    Returns: A string containing the line read from the console, not including any line-termination characters, or null if an end of stream 
             has been reached. 

*java.io.Console.readPassword()*

public char[] readPassword()

Reads a password or passphrase from the console with echoing disabled 



    Returns: A character array containing the password or passphrase read from the console, not including any line-termination characters, 
             or null if an end of stream has been reached. 

*java.io.Console.readPassword(String,Object...)*

public char[] readPassword(
  java.lang.String fmt,
  java.lang.Object[] args)

Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled. 


    fmt - A format string as described in Format string syntax for the prompt text. 
    args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the 
       extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as 
       defined by the Java Virtual Machine Specification. 

    Returns: A character array containing the password or passphrase read from the console, not including any line-termination characters, 
             or null if an end of stream has been reached. 

*java.io.Console.writer()*

public |java.io.PrintWriter| writer()

Retrieves the unique PrintWriter(|java.io.PrintWriter|) object associated with this console. 



    Returns: The printwriter associated with this console 


