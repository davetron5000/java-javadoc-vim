*java.awt.LinearGradientPaint* *LinearGradientPaint* TheLinearGradientPaintclass provides a way to fill
 ajava.awt.Shapewith a l

public final class LinearGradientPaint
  extends    |java.awt.MultipleGradientPaint|

|java.awt.LinearGradientPaint_Description|
|java.awt.LinearGradientPaint_Fields|
|java.awt.LinearGradientPaint_Constructors|
|java.awt.LinearGradientPaint_Methods|

================================================================================================================================

*java.awt.LinearGradientPaint_Constructors*
|java.awt.LinearGradientPaint(float,float,float,float,float[],Color[])|Constructs aLinearGradientPaintwith a defaultNO_CYCLErep
|java.awt.LinearGradientPaint(float,float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod)|Constructs aLinearGrad
|java.awt.LinearGradientPaint(Point2D,Point2D,float[],Color[])|Constructs aLinearGradientPaintwith a defaultNO_CYCLErepeating m
|java.awt.LinearGradientPaint(Point2D,Point2D,float[],Color[],MultipleGradientPaint.CycleMethod)|Constructs aLinearGradientPain
|java.awt.LinearGradientPaint(Point2D,Point2D,float[],Color[],MultipleGradientPaint.CycleMethod,MultipleGradientPaint.ColorSpaceType,AffineTransform)|

*java.awt.LinearGradientPaint_Methods*
|java.awt.LinearGradientPaint.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)|
|java.awt.LinearGradientPaint.getEndPoint()|Returns a copy of the end point of the gradient axis.
|java.awt.LinearGradientPaint.getStartPoint()|Returns a copy of the start point of the gradient axis.

*java.awt.LinearGradientPaint_Description*

TheLinearGradientPaintclass provides a way to fill a (|java.awt.Shape|) with a linear color gradient pattern. The user may 
specify two or more gradient colors, and this paint will provide an interpolation between each color. The user also specifies 
start and end points which define where in user space the color gradient should begin and end. 

The user must provide an array of floats specifying how to distribute the colors along the gradient. These values should range 
from 0.0 to 1.0 and act like keyframes along the gradient (they mark where the gradient should be exactly a particular color). 

In the event that the user does not set the first keyframe value equal to 0 and/or the last keyframe value equal to 1, 
keyframes will be created at these positions and the first and last colors will be replicated there. So, if a user specifies 
the following arrays to construct a gradient: 

{Color.BLUE, Color.RED}, {.3f, .7f} 

this will be converted to a gradient with the following keyframes: 

{Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f} 

The user may also select what action theLinearGradientPaintshould take when filling color outside the start and end points. If 
no cycle method is specified,NO_CYCLEwill be chosen by default, which means the endpoint colors will be used to fill the 
remaining area. 

The colorSpace parameter allows the user to specify in which colorspace the interpolation should be performed, default sRGB or 
linearized RGB. 

The following code demonstrates typical usage ofLinearGradientPaint: 



Point2D start = new Point2D.Float(0, 0); Point2D end = new Point2D.Float(50, 50); float[] dist = {0.0f, 0.2f, 1.0f}; Color[] 
colors = {Color.RED, Color.WHITE, Color.BLUE}; LinearGradientPaint p = new LinearGradientPaint(start, end, dist, colors); 

This code will create aLinearGradientPaintwhich interpolates between red and white for the first 20% of the gradient and 
between white and blue for the remaining 80%. 

This image demonstrates the example code above for each of the three cycle methods: 







*java.awt.LinearGradientPaint(float,float,float,float,float[],Color[])*

public LinearGradientPaint(
  float startX,
  float startY,
  float endX,
  float endY,
  float[] fractions,
  java.awt.Color[] colors)

Constructs aLinearGradientPaintwith a defaultNO_CYCLErepeating method andSRGBcolor space. 

    startX - the X coordinate of the gradient axis start point in user space 
    startY - the Y coordinate of the gradient axis start point in user space 
    endX - the X coordinate of the gradient axis end point in user space 
    endY - the Y coordinate of the gradient axis end point in user space 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors corresponding to each fractional value 

*java.awt.LinearGradientPaint(float,float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod)*

public LinearGradientPaint(
  float startX,
  float startY,
  float endX,
  float endY,
  float[] fractions,
  java.awt.Color[] colors,
  java.awt.MultipleGradientPaint.CycleMethod cycleMethod)

Constructs aLinearGradientPaintwith a defaultSRGBcolor space. 

    startX - the X coordinate of the gradient axis start point in user space 
    startY - the Y coordinate of the gradient axis start point in user space 
    endX - the X coordinate of the gradient axis end point in user space 
    endY - the Y coordinate of the gradient axis end point in user space 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors corresponding to each fractional value 
    cycleMethod - either {@code NO_CYCLE}, {@code REFLECT}, or {@code REPEAT} 

*java.awt.LinearGradientPaint(Point2D,Point2D,float[],Color[])*

public LinearGradientPaint(
  java.awt.geom.Point2D start,
  java.awt.geom.Point2D end,
  float[] fractions,
  java.awt.Color[] colors)

Constructs aLinearGradientPaintwith a defaultNO_CYCLErepeating method andSRGBcolor space. 

    start - the gradient axis start {@code Point2D} in user space 
    end - the gradient axis end {@code Point2D} in user space 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors corresponding to each fractional value 

*java.awt.LinearGradientPaint(Point2D,Point2D,float[],Color[],MultipleGradientPaint.CycleMethod)*

public LinearGradientPaint(
  java.awt.geom.Point2D start,
  java.awt.geom.Point2D end,
  float[] fractions,
  java.awt.Color[] colors,
  java.awt.MultipleGradientPaint.CycleMethod cycleMethod)

Constructs aLinearGradientPaintwith a defaultSRGBcolor space. 

    start - the gradient axis start {@code Point2D} in user space 
    end - the gradient axis end {@code Point2D} in user space 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors corresponding to each fractional value 
    cycleMethod - either {@code NO_CYCLE}, {@code REFLECT}, or {@code REPEAT} 

*java.awt.LinearGradientPaint(Point2D,Point2D,float[],Color[],MultipleGradientPaint.CycleMethod,MultipleGradientPaint.ColorSpaceType,AffineTransform)*

public LinearGradientPaint(
  java.awt.geom.Point2D start,
  java.awt.geom.Point2D end,
  float[] fractions,
  java.awt.Color[] colors,
  java.awt.MultipleGradientPaint.CycleMethod cycleMethod,
  java.awt.MultipleGradientPaint.ColorSpaceType colorSpace,
  java.awt.geom.AffineTransform gradientTransform)

Constructs aLinearGradientPaint. 

    start - the gradient axis start {@code Point2D} in user space 
    end - the gradient axis end {@code Point2D} in user space 
    fractions - numbers ranging from 0.0 to 1.0 specifying the distribution of colors along the gradient 
    colors - array of colors corresponding to each fractional value 
    cycleMethod - either {@code NO_CYCLE}, {@code REFLECT}, or {@code REPEAT} 
    colorSpace - which color space to use for interpolation, either {@code SRGB} or {@code LINEAR_RGB} 
    gradientTransform - transform to apply to the gradient 

*java.awt.LinearGradientPaint.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)*

public |java.awt.PaintContext| createContext(
  java.awt.image.ColorModel cm,
  java.awt.Rectangle deviceBounds,
  java.awt.geom.Rectangle2D userBounds,
  java.awt.geom.AffineTransform transform,
  java.awt.RenderingHints hints)





*java.awt.LinearGradientPaint.getEndPoint()*

public |java.awt.geom.Point2D| getEndPoint()

Returns a copy of the end point of the gradient axis. 



    Returns: a {@code Point2D} object that is a copy of the point that anchors the last color of this {@code LinearGradientPaint} 

*java.awt.LinearGradientPaint.getStartPoint()*

public |java.awt.geom.Point2D| getStartPoint()

Returns a copy of the start point of the gradient axis. 



    Returns: a {@code Point2D} object that is a copy of the point that anchors the first color of this {@code LinearGradientPaint} 


